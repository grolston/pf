(()=>{"use strict";const n=require("@aws-sdk/client-sts"),e=require("@aws-sdk/client-organizations"),o=require("@aws-sdk/client-iam"),i=require("@aws-sdk/client-cloudformation"),t=require("@aws-sdk/client-sso-admin"),a=require("@aws-sdk/client-ec2"),s=require("@aws-sdk/client-cloudtrail"),c=require("@aws-sdk/client-config-service"),r=require("@aws-sdk/client-controltower"),l=require("@aws-sdk/client-cost-and-usage-report-service"),d=require("fs");(async()=>{const p="./Pathfinder.txt";let u=new Date;d.writeFileSync(p,"Cloud Foundations - Pathfinder"),d.appendFileSync(p,`\nGenerated on: ${u.toUTCString()} \n\n`),d.appendFileSync(p,"\n---------------------------------------------------------");const y=process.env.AWS_REGION||"us-east-1",g=await async function(){const n=new a.EC2Client({region:"us-east-1"});try{const e=new a.DescribeRegionsCommand({}),o=await n.send(e),i=[];for(const n of o.Regions||[])i.push(n.RegionName||"");return i}catch(n){return console.error("Error retrieving regions:",n),[]}finally{n.destroy()}}(),S=await(async o=>{const i=new e.OrganizationsClient({region:o});let t=!1,a=!1;try{const s=await async function(e){const o=new n.STSClient({region:e});try{const e=new n.GetCallerIdentityCommand({});return(await o.send(e)).Account}catch(n){throw console.error("Error getting account ID:",n),n}}(o);if(s){console.log(`current account is: ${s}`);const n=new e.DescribeOrganizationCommand({}),o=await i.send(n);if(o.Organization?.MasterAccountId){console.log(`current management account is: ${o.Organization?.MasterAccountId}`);const n=o.Organization?.MasterAccountId;n==s?(console.log("It is, it is all true!"),a=!0,t=!0):t=!0}else t=!1}}catch(n){console.error("Error:",n)}finally{i.destroy()}return{isInOrganization:t,isManagementAccount:a}})(y);if(d.appendFileSync(p,"\n\nAWS ACCOUNT TYPE\n"),S&&(console.dir(S,{depth:null,colors:!0}),d.appendFileSync(p,`\n  Is in AWS Organization: ${S.isInOrganization}`),d.appendFileSync(p,`\n  Assessing AWS Management Account: ${S.isManagementAccount}`)),S.isInOrganization&&S.isManagementAccount){d.appendFileSync(p,"\n\n---------------------------------------------------------"),d.appendFileSync(p,"\n\nLegacy CUR\n");const n=await(async n=>{const e=new l.CostAndUsageReportServiceClient({region:n});let o=!1;try{const n={},i=new l.DescribeReportDefinitionsCommand(n),t=await e.send(i);return t.ReportDefinitions&&t.ReportDefinitions.length>0&&(o=!0),{isLegacyCurSetup:o}}catch(n){return console.error(`Error: ${n}`),o=!1,{isLegacyCurSetup:o}}finally{e.destroy()}})("us-east-1");console.dir(n,{depth:null,colors:!0}),d.appendFileSync(p,`\n  Is legacy CUR setup: ${n.isLegacyCurSetup}`),d.appendFileSync(p,"\n\n---------------------------------------------------------"),d.appendFileSync(p,"\n\nAWS ORGANIZATION POLICY TYPES\n");const o=await async function(n){const o=new e.OrganizationsClient({region:n});let i={scpEnabled:!1,tagPolicyEnabled:!1,backupPolicyEnabled:!1};try{const n={},t=new e.ListRootsCommand(n),a=await o.send(t);if(a.Roots&&a.Roots[0].PolicyTypes)for(const n of a.Roots[0].PolicyTypes)"SERVICE_CONTROL_POLICY"==n.Type&&"ENABLED"==n.Status&&(i.scpEnabled=!0),"TAG_POLICY"==n.Type&&"ENABLED"==n.Status&&(i.tagPolicyEnabled=!0),"BACKUP_POLICY"==n.Type&&"ENABLED"==n.Status&&(i.backupPolicyEnabled=!0)}catch(n){console.error(`An error occurred: ${n}`)}finally{return o.destroy(),i}}("us-east-1");console.dir(o,{depth:null,colors:!0}),d.appendFileSync(p,`\n  Service Control Policies (SCP) enabled: ${o.scpEnabled}`),d.appendFileSync(p,`\n  Tag Policies enabled: ${o.tagPolicyEnabled}`),d.appendFileSync(p,`\n  Backup Policies enabled: ${o.backupPolicyEnabled}`),d.appendFileSync(p,"\n\n---------------------------------------------------------"),d.appendFileSync(p,"\n\nAWS ORGANIZATION ENABLED SERVICES\n");const a=await async function(n){const o=[],i=new e.OrganizationsClient({region:n});try{const n=new e.ListAWSServiceAccessForOrganizationCommand({}),t=await i.send(n);if(t.EnabledServicePrincipals&&t.EnabledServicePrincipals.length>0){t.EnabledServicePrincipals;for(const n of t.EnabledServicePrincipals){const e={service:n.ServicePrincipal??""};o.push(e)}}}catch(n){console.error("Error checking service access:",n)}finally{return i.destroy(),o}}("us-east-1");console.dir(a,{depth:null,colors:!0}),d.appendFileSync(p,"\n  The following AWS Services are enabled within your AWS Organization:");for(const n of a)d.appendFileSync(p,`\n    ${n.service}`);d.appendFileSync(p,"\n\n---------------------------------------------------------"),d.appendFileSync(p,"\n\nAWS ORGANIZATION INTEGRATED SERVICE REGISTERED DELEGATED ADMINS\n");const s=await async function(){let n=[];const o=new e.OrganizationsClient({region:"us-east-1"});let i={};try{const t=new e.ListDelegatedAdministratorsCommand({}),a=await o.send(t);if(a.DelegatedAdministrators)for(const t of a.DelegatedAdministrators){const a={AccountId:t.Id},s=new e.ListDelegatedServicesForAccountCommand(a),c=await o.send(s);c.DelegatedServices&&(i={services:c.DelegatedServices,accountName:t.Name},n.push(i))}}catch(n){console.log("Error looking for delegated services.")}finally{o.destroy()}return n}();if(console.dir(s,{depth:null,colors:!0}),s&&s.length>0)for(const n of s){if(d.appendFileSync(p,`\n  Account: ${n.accountName}`),n.services&&n.services.length>0){d.appendFileSync(p,"\n  Delegated Services:");for(const e of n.services)d.appendFileSync(p,`\n    ${e.ServicePrincipal}`)}d.appendFileSync(p,"\n ")}else d.appendFileSync(p,"\n  No delegated admin accounts in AWS Organization");d.appendFileSync(p,"\n\n---------------------------------------------------------"),d.appendFileSync(p,"\n\nAWS ORGANIZATION CLOUDFORMATION\n");const c=await async function(n){let e={status:"disabled"};const o=new i.CloudFormationClient({region:n});try{const n={},t=new i.DescribeOrganizationsAccessCommand(n),a=await o.send(t);e.status=a.Status??"disabled"}catch(n){console.log(`Error: ${n}`)}finally{return o.destroy(),e}}(y);console.dir(c,{depth:null,colors:!0}),d.appendFileSync(p,`\n  AWS CloudFormation Organization stack sets status : ${c.status}`),d.appendFileSync(p,"\n\n---------------------------------------------------------"),d.appendFileSync(p,"\n\nAWS CONTROL TOWER\n");const u=await async function(n){let e={};const o=new r.ControlTowerClient({region:n});try{const n=new r.ListLandingZonesCommand({}),i=await o.send(n);if(console.log(JSON.stringify(i.landingZones,null,2)),i.landingZones&&i.landingZones.length>0){const n={landingZoneIdentifier:i.landingZones[0].arn},o=i.landingZones[0].arn?.toString().split(":")[3]??"";if(o){e.controlTowerRegion=o;const i=new r.ControlTowerClient({region:o}),t=new r.GetLandingZoneCommand(n),a=await i.send(t);a.landingZone&&(console.log(JSON.stringify(a.landingZone,null,2)),e.status=a.landingZone.status,e.latestAvailableVersion=a.landingZone.latestAvailableVersion,e.deployedVersion=a.landingZone.version,e.driftStatus=a.landingZone.driftStatus?.status)}}}catch(e){console.error(`Error checking Control Tower in ${n}:`,e)}finally{o.destroy()}return e}(y);u?(console.dir(u,{depth:null,colors:!0}),d.appendFileSync(p,`\n  Control Tower home region: ${u.controlTowerRegion}`),d.appendFileSync(p,`\n  Control Tower status: ${u.status}`),d.appendFileSync(p,`\n  Control Tower Landing Zone version: ${u.deployedVersion}`),d.appendFileSync(p,`\n  Latest available version: ${u.latestAvailableVersion}`),d.appendFileSync(p,`\n  Drift Status: ${u.driftStatus}`)):d.appendFileSync(p,"\n  AWS Control Tower is not deployed in the AWS Organization"),d.appendFileSync(p,"\n\n---------------------------------------------------------"),d.appendFileSync(p,"\n\nAWS IAM IDENTITY CENTER\n");const S=await async function(n){let e={found:!1};for(const o of n){const n=new t.SSOAdminClient({region:o});try{const i={MaxResults:Number("100")},a=new t.ListInstancesCommand(i),s=await n.send(a);if(s.Instances&&s.Instances.length>0){const n=s.Instances[0];e.found=!0,e.region=o,e.arn=n.InstanceArn,e.id=n.IdentityStoreId;break}}catch(n){console.log(`Error looking for AWS Identity Center details in region ${o}`)}finally{n.destroy()}}return e}(g);console.dir(S,{depth:null,colors:!0}),d.appendFileSync(p,`\n  IdC Region: ${S.region}`),d.appendFileSync(p,`\n  IdC ARN: ${S.arn}`),d.appendFileSync(p,`\n  IdC Instance Id: ${S.id}`),d.appendFileSync(p,"\n\n---------------------------------------------------------"),d.appendFileSync(p,"\n\nAWS ORGANIZATION DETAILS\n");const f=await async function(n){const o=new e.OrganizationsClient({region:n});let i={};try{const n=new e.DescribeOrganizationCommand({}),t=await o.send(n);t.Organization&&(i.id=t.Organization.Id??"",i.arn=t.Organization.Arn??"");const a=new e.ListRootsCommand({}),s=await o.send(a);s.Roots?i.rootOuId=s.Roots[0].Id:console.log("No info found for your AWS Organization.")}catch(n){console.error(`An error occurred: ${n}`)}finally{return o.destroy(),i}}("us-east-1");if(console.dir(f,{depth:null,colors:!0}),d.appendFileSync(p,`\n  AWS Organization Id: ${f.id}`),d.appendFileSync(p,`\n  AWS Organization ARN: ${f.arn}`),d.appendFileSync(p,`\n  AWS Organization Root OU Id: ${f.rootOuId}`),f.rootOuId){d.appendFileSync(p,"\n\n---------------------------------------------------------"),d.appendFileSync(p,"\n\nAWS ORGANIZATION TOP-LEVEL ORGANIZATION UNITS\n");const n=await async function(n,o){const i=new e.OrganizationsClient({region:n});let t=[];try{const n=new e.ListOrganizationalUnitsForParentCommand({ParentId:o}),a=await i.send(n);if(a.OrganizationalUnits)for(const n of a.OrganizationalUnits){let o={id:n.Id,name:n.Name};const a=await i.send(new e.ListAccountsForParentCommand({ParentId:n.Id}));a.Accounts&&a.Accounts.length>0&&(o.accounts=a.Accounts),t.push(o)}}catch(n){return console.error("Error checking service access:",n),[]}finally{i.destroy()}return t}("us-east-1",f.rootOuId);if(console.dir(n,{depth:null,colors:!0}),d.appendFileSync(p,"\n  List of Organization's top-level OUs and AWS accounts:"),n&&n.length>0)for(const e of n){if(d.appendFileSync(p,`\n    Organizational Unit: ${e.name}`),d.appendFileSync(p,`\n      Organizational Unit Id: ${e.id}`),e.accounts&&e.accounts.length>0){d.appendFileSync(p,"\n      AWS Accounts:");for(const n of e.accounts)d.appendFileSync(p,`\n        ${n.Name}`);d.appendFileSync(p,"\n")}else d.appendFileSync(p,"\n      AWS Accounts: None");d.appendFileSync(p,"\n")}else d.appendFileSync(p,"\n  No top level OUs found.")}d.appendFileSync(p,"\n\n---------------------------------------------------------"),d.appendFileSync(p,"\n\nAWS ORGANIZATION MEMBER ACCOUNTS\n");const A=await async function(){let n=[];const o=new e.OrganizationsClient({region:"us-east-1"});try{const i=await o.send(new e.ListAccountsCommand({}));if(i.Accounts&&i.Accounts.length>0)for(const e of i.Accounts){let o={accountName:e.Name,accountEmail:e.Email};n.push(o)}}catch(n){console.error("Error listing AWS accounts:",n)}finally{o.destroy()}return n}();if(console.dir(A,{depth:null,colors:!0}),A&&A.length>0)for(const n of A)d.appendFileSync(p,`\n  Account: ${n.accountName}`),d.appendFileSync(p,`\n  Account Email: ${n.accountEmail}\n`);else d.appendFileSync(p,"No member accounts found which is amazing as this is running from one.")}else if(S.isInOrganization&&!S.isManagementAccount){const n="\nWARNING: You are running Pathfinder from an account that is a member of your AWS Organization. Please run the solution from your AWS Management account.";console.warn(n),d.appendFileSync(p,n)}else{const n="\nWARNING: You are running Pathfinder from an account that not part of an AWS Organization. This account will be treated as a standalone account.";console.warn(n),d.appendFileSync(p,n)}d.appendFileSync(p,"\n\n\n---------------------------------------------------------"),d.appendFileSync(p,"\n---------------------------------------------------------"),d.appendFileSync(p,"\nAWS MANAGEMENT ACCOUNT CHECKS"),d.appendFileSync(p,"\n---------------------------------------------------------"),d.appendFileSync(p,"\n---------------------------------------------------------\n");const f=await(async()=>{const n=new o.IAMClient({region:"us-east-1"}),e=[];try{const i=new o.ListUsersCommand({}),t=await n.send(i);for(const i of t.Users||[]){const t=i.UserName||"",a=new o.ListAccessKeysCommand({UserName:t}),s=(await n.send(a)).AccessKeyMetadata||[];if(s.length>0)for(const i of s){const a=i.AccessKeyId||"",s=new o.GetAccessKeyLastUsedCommand({AccessKeyId:a}),c=await n.send(s),r={userName:t,accessKeyId:a,lastUsed:c&&c.AccessKeyLastUsed&&`${c.AccessKeyLastUsed.LastUsedDate}`||"Not available"};e.push(r)}else{const n={userName:t};e.push(n)}}}catch(n){console.error("Error:",n)}finally{n.destroy()}return e})();if(d.appendFileSync(p,"\n\nIAM USERS CHECK\n"),f&&f.length>0){console.dir(f,{depth:null,colors:!0});for(const n of f)d.appendFileSync(p,`\n  IAM User: ${n.userName}`),n.accessKeyId&&d.appendFileSync(p,`\n    User API Key ID: ${n.accessKeyId}`),d.appendFileSync(p,"\n")}else d.appendFileSync(p,"\n  No IAM Users found.");d.appendFileSync(p,"\n\n---------------------------------------------------------");const A=await async function(n){let e=[];for(const o of n){const n=new a.EC2Client({region:o}),i=new a.DescribeInstancesCommand({});try{const t=await n.send(i);if(t.Reservations)if(t.Reservations.length>0){const n={region:o,ec2Found:!0};e.push(n)}else{const n={region:o,ec2Found:!1};e.push(n)}else{const n={region:o,ec2Found:!1};e.push(n)}}catch(n){console.log(`Error checking instance: ${n}`)}finally{n.destroy()}}return e}(g);if(d.appendFileSync(p,"\n\nEC2 INSTANCE CHECK\n"),A&&A.find((n=>!0===n.ec2Found))){console.dir(A,{depth:null,colors:!0});for(const n of A)n.ec2Found&&d.appendFileSync(p,`\n  ${n.region} - found EC2 Instance(s).`)}else d.appendFileSync(p,"\n  No EC2 instances found.");d.appendFileSync(p,"\n\n---------------------------------------------------------");const C=await async function(n){let e=[];for(const o of n){const n=new a.EC2Client({region:o}),i=new a.DescribeVpcsCommand({});try{const t=await n.send(i);if(t.Vpcs)if(t.Vpcs.length>0){const n={region:o,vpcFound:!0};e.push(n)}else{const n={region:o,vpcFound:!1};e.push(n)}else{const n={region:o,vpcFound:!1};e.push(n)}}catch(n){console.log(`Error checking instance: ${n}`)}finally{n.destroy()}}return e}(g);if(d.appendFileSync(p,"\n\nVPC CHECK\n"),C&&C.length>0){console.dir(C,{depth:null,colors:!0});for(const n of C)n.vpcFound&&d.appendFileSync(p,`\n  ${n.region} - found VPC(s).`)}else d.appendFileSync(p,"\n  No VPCs found.");d.appendFileSync(p,"\n\n---------------------------------------------------------");const F=await async function(n){let e=[];for(const o of n){const n=new s.CloudTrailClient({region:o}),i=new s.DescribeTrailsCommand({});try{const t=await n.send(i);if(t.trailList)for(const n of t.trailList){let i={};i=n.HomeRegion==o?{region:o,trailFound:!0,isOrgTrail:n.IsMultiRegionTrail,isMultiRegion:n.IsMultiRegionTrail}:{region:o,trailFound:!1},e.push(i)}}catch(n){console.log(`Error checking instance: ${n}`)}finally{n.destroy()}}return e}(g);if(d.appendFileSync(p,"\n\nCLOUDTRAIL CHECK\n"),F&&F.length>0){console.dir(F,{depth:null,colors:!0});for(const n of F)n.trailFound&&(d.appendFileSync(p,`\n  CloudTrail found in ${n.region}`),d.appendFileSync(p,`\n    Is Organization Trail: ${n.isOrgTrail}`),d.appendFileSync(p,`\n    Is MultiRegion: ${n.isMultiRegion}`),d.appendFileSync(p,"\n"))}else d.appendFileSync(p,"\n  No AWS CloudTrail resource discovered");d.appendFileSync(p,"\n"),d.appendFileSync(p,"\n\n---------------------------------------------------------");const w=await async function(n){let e=[];for(const o of n){const n=new c.ConfigServiceClient({region:o});let i={region:o,configRecorderFound:!1,configDeliveryChannelFound:!1};try{const o=await n.send(new c.DescribeConfigurationRecorderStatusCommand({}));0!==o.ConfigurationRecordersStatus?.length&&(i.configRecorderFound=!0);const t=await n.send(new c.DescribeDeliveryChannelsCommand({}));0!==t.DeliveryChannels?.length&&(i.configDeliveryChannelFound=!0),e.push(i)}catch(n){console.error(`Error checking AWS Config in ${o}:`,n)}finally{n.destroy()}}return e}(g);if(d.appendFileSync(p,"\n\nAWS CONFIG CHECK\n"),w&&w.find((n=>!0===n.configRecorderFound))){console.dir(w,{depth:null,colors:!0});for(const n of w)n.configRecorderFound&&d.appendFileSync(p,`\n  ${n.region} - Config Recorder found`),n.configDeliveryChannelFound&&d.appendFileSync(p,`\n  ${n.region} - Config Delivery Channel found`)}else d.appendFileSync(p,"\n  No AWS Config resource discovered");d.appendFileSync(p,"\n\n\n  END ASSESSMENT")})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFPMk0sQ0FDWCxDakJ5TThCLENBQWtCeE4sR0FFNUMsR0FEQSxpQkFBa0JSLEVBQVksMEJBQzFCK04sR0FBZUEsRUFBWXpCLE1BQUtDLElBQXVDLElBQTlCQSxFQUFNNkIsc0JBQStCLENBQzlFaE4sUUFBUXNCLElBQUlxTCxFQUFhLENBQUVwTCxNQUFPLEtBQU1DLFFBQVEsSUFDaEQsSUFBSyxNQUFNZ00sS0FBY2IsRUFDakJhLEVBQVdSLHFCQUNYLGlCQUFrQnBPLEVBQVksT0FBTzRPLEVBQVd4TyxrQ0FFaER3TyxFQUFXUCw0QkFDWCxpQkFBa0JyTyxFQUFZLE9BQU80TyxFQUFXeE8seUNBRzVELE1BRUksaUJBQWtCSixFQUFZLHlDQUVsQyxpQkFBa0JBLEVBQVkseUJBQXlCLEVBRTNENk8sRSIsInNvdXJjZXMiOlsid2VicGFjazovLy9leHRlcm5hbCBjb21tb25qcyBcIkBhd3Mtc2RrL2NsaWVudC1zdHNcIiIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgY29tbW9uanMgXCJAYXdzLXNkay9jbGllbnQtb3JnYW5pemF0aW9uc1wiIiwid2VicGFjazovLy9leHRlcm5hbCBjb21tb25qcyBcIkBhd3Mtc2RrL2NsaWVudC1pYW1cIiIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgY29tbW9uanMgXCJAYXdzLXNkay9jbGllbnQtY2xvdWRmb3JtYXRpb25cIiIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgY29tbW9uanMgXCJAYXdzLXNkay9jbGllbnQtc3NvLWFkbWluXCIiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIGNvbW1vbmpzIFwiQGF3cy1zZGsvY2xpZW50LWVjMlwiIiwid2VicGFjazovLy9leHRlcm5hbCBjb21tb25qcyBcIkBhd3Mtc2RrL2NsaWVudC1jbG91ZHRyYWlsXCIiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIGNvbW1vbmpzIFwiQGF3cy1zZGsvY2xpZW50LWNvbmZpZy1zZXJ2aWNlXCIiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIGNvbW1vbmpzIFwiQGF3cy1zZGsvY2xpZW50LWNvbnRyb2x0b3dlclwiIiwid2VicGFjazovLy9leHRlcm5hbCBjb21tb25qcyBcIkBhd3Mtc2RrL2NsaWVudC1jb3N0LWFuZC11c2FnZS1yZXBvcnQtc2VydmljZVwiIiwid2VicGFjazovLy9leHRlcm5hbCBub2RlLWNvbW1vbmpzIFwiZnNcIiIsIndlYnBhY2s6Ly8vLi9idWlsZC9hcHAuanMiLCJ3ZWJwYWNrOi8vLy4vYnVpbGQvc3JjL2FjdGlvbnMvZ2V0LXJlZ2lvbnMuanMiLCJ3ZWJwYWNrOi8vLy4vYnVpbGQvc3JjL2FjdGlvbnMvZGVmaW5lLWFjY291bnQtdHlwZS5qcyIsIndlYnBhY2s6Ly8vLi9idWlsZC9zcmMvYWN0aW9ucy9jaGVjay1sZWdhY3ktY3VyLmpzIiwid2VicGFjazovLy8uL2J1aWxkL3NyYy9hY3Rpb25zL2dldC1lbmFibGVkLW9yZy1wb2xpY3ktdHlwZXMuanMiLCJ3ZWJwYWNrOi8vLy4vYnVpbGQvc3JjL2FjdGlvbnMvZ2V0LWVuYWJsZWQtb3JnLXNlcnZpY2VzLmpzIiwid2VicGFjazovLy8uL2J1aWxkL3NyYy9hY3Rpb25zL2dldC1vcmctZGEtYWNjb3VudHMuanMiLCJ3ZWJwYWNrOi8vLy4vYnVpbGQvc3JjL2FjdGlvbnMvY2hlY2stb3JnLWNsb3VkZm9ybWF0aW9uLmpzIiwid2VicGFjazovLy8uL2J1aWxkL3NyYy9hY3Rpb25zL2NoZWNrLWNvbnRyb2wtdG93ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vYnVpbGQvc3JjL2FjdGlvbnMvZ2V0LWlkYy1pbmZvLmpzIiwid2VicGFjazovLy8uL2J1aWxkL3NyYy9hY3Rpb25zL2dldC1vcmctZGV0YWlscy5qcyIsIndlYnBhY2s6Ly8vLi9idWlsZC9zcmMvYWN0aW9ucy9nZXQtb3JnLW91cy5qcyIsIndlYnBhY2s6Ly8vLi9idWlsZC9zcmMvYWN0aW9ucy9nZXQtb3JnLW1lbWJlci1hY2NvdW50cy5qcyIsIndlYnBhY2s6Ly8vLi9idWlsZC9zcmMvYWN0aW9ucy9jaGVjay1pYW0tdXNlcnMuanMiLCJ3ZWJwYWNrOi8vLy4vYnVpbGQvc3JjL2FjdGlvbnMvY2hlY2stZWMyLWV4aXN0ZW5jZS5qcyIsIndlYnBhY2s6Ly8vLi9idWlsZC9zcmMvYWN0aW9ucy9jaGVjay12cGMtZXhpc3RlbmNlLmpzIiwid2VicGFjazovLy8uL2J1aWxkL3NyYy9hY3Rpb25zL2NoZWNrLWNsb3VkdHJhaWwtZXhpc3RlbmNlLmpzIiwid2VicGFjazovLy8uL2J1aWxkL3NyYy9hY3Rpb25zL2NoZWNrLWNvbmZpZy1leGlzdGVuY2UuanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgX19XRUJQQUNLX05BTUVTUEFDRV9PQkpFQ1RfXyA9IHJlcXVpcmUoXCJAYXdzLXNkay9jbGllbnQtc3RzXCIpOyIsImNvbnN0IF9fV0VCUEFDS19OQU1FU1BBQ0VfT0JKRUNUX18gPSByZXF1aXJlKFwiQGF3cy1zZGsvY2xpZW50LW9yZ2FuaXphdGlvbnNcIik7IiwiY29uc3QgX19XRUJQQUNLX05BTUVTUEFDRV9PQkpFQ1RfXyA9IHJlcXVpcmUoXCJAYXdzLXNkay9jbGllbnQtaWFtXCIpOyIsImNvbnN0IF9fV0VCUEFDS19OQU1FU1BBQ0VfT0JKRUNUX18gPSByZXF1aXJlKFwiQGF3cy1zZGsvY2xpZW50LWNsb3VkZm9ybWF0aW9uXCIpOyIsImNvbnN0IF9fV0VCUEFDS19OQU1FU1BBQ0VfT0JKRUNUX18gPSByZXF1aXJlKFwiQGF3cy1zZGsvY2xpZW50LXNzby1hZG1pblwiKTsiLCJjb25zdCBfX1dFQlBBQ0tfTkFNRVNQQUNFX09CSkVDVF9fID0gcmVxdWlyZShcIkBhd3Mtc2RrL2NsaWVudC1lYzJcIik7IiwiY29uc3QgX19XRUJQQUNLX05BTUVTUEFDRV9PQkpFQ1RfXyA9IHJlcXVpcmUoXCJAYXdzLXNkay9jbGllbnQtY2xvdWR0cmFpbFwiKTsiLCJjb25zdCBfX1dFQlBBQ0tfTkFNRVNQQUNFX09CSkVDVF9fID0gcmVxdWlyZShcIkBhd3Mtc2RrL2NsaWVudC1jb25maWctc2VydmljZVwiKTsiLCJjb25zdCBfX1dFQlBBQ0tfTkFNRVNQQUNFX09CSkVDVF9fID0gcmVxdWlyZShcIkBhd3Mtc2RrL2NsaWVudC1jb250cm9sdG93ZXJcIik7IiwiY29uc3QgX19XRUJQQUNLX05BTUVTUEFDRV9PQkpFQ1RfXyA9IHJlcXVpcmUoXCJAYXdzLXNkay9jbGllbnQtY29zdC1hbmQtdXNhZ2UtcmVwb3J0LXNlcnZpY2VcIik7IiwiY29uc3QgX19XRUJQQUNLX05BTUVTUEFDRV9PQkpFQ1RfXyA9IHJlcXVpcmUoXCJmc1wiKTsiLCJpbXBvcnQgeyBkZWZpbmVBY2NvdW50VHlwZSB9IGZyb20gJy4vc3JjL2FjdGlvbnMvZGVmaW5lLWFjY291bnQtdHlwZS5qcyc7XG5pbXBvcnQgY2hlY2tJYW1Vc2VycyBmcm9tICcuL3NyYy9hY3Rpb25zL2NoZWNrLWlhbS11c2Vycy5qcyc7XG5pbXBvcnQgZ2V0RW5hYmxlZE9yZ1BvbGljeVR5cGVzIGZyb20gJy4vc3JjL2FjdGlvbnMvZ2V0LWVuYWJsZWQtb3JnLXBvbGljeS10eXBlcy5qcyc7XG5pbXBvcnQgZ2V0RW5hYmxlZE9yZ1NlcnZpY2VzIGZyb20gJy4vc3JjL2FjdGlvbnMvZ2V0LWVuYWJsZWQtb3JnLXNlcnZpY2VzLmpzJztcbmltcG9ydCBnZXRPcmdDbG91ZEZvcm1hdGlvbiBmcm9tICcuL3NyYy9hY3Rpb25zL2NoZWNrLW9yZy1jbG91ZGZvcm1hdGlvbi5qcyc7XG5pbXBvcnQgZ2V0SWRjSW5mbyBmcm9tICcuL3NyYy9hY3Rpb25zL2dldC1pZGMtaW5mby5qcyc7XG5pbXBvcnQgZ2V0T3JnRGV0YWlscyBmcm9tICcuL3NyYy9hY3Rpb25zL2dldC1vcmctZGV0YWlscy5qcyc7XG5pbXBvcnQgZ2V0T3JnVG9wTGV2ZWxPdXMgZnJvbSAnLi9zcmMvYWN0aW9ucy9nZXQtb3JnLW91cy5qcyc7XG5pbXBvcnQgZ2V0QWxsUmVnaW9ucyBmcm9tICcuL3NyYy9hY3Rpb25zL2dldC1yZWdpb25zLmpzJztcbmltcG9ydCBjaGVja0VjMkV4aXN0cyBmcm9tICcuL3NyYy9hY3Rpb25zL2NoZWNrLWVjMi1leGlzdGVuY2UuanMnO1xuaW1wb3J0IGNoZWNrVnBjRXhpc3RzIGZyb20gJy4vc3JjL2FjdGlvbnMvY2hlY2stdnBjLWV4aXN0ZW5jZS5qcyc7XG5pbXBvcnQgY2hlY2tDbG91ZFRyYWlsRXhpc3RzIGZyb20gJy4vc3JjL2FjdGlvbnMvY2hlY2stY2xvdWR0cmFpbC1leGlzdGVuY2UuanMnO1xuaW1wb3J0IGdldE9yZ0RhQWNjb3VudHMgZnJvbSAnLi9zcmMvYWN0aW9ucy9nZXQtb3JnLWRhLWFjY291bnRzLmpzJztcbmltcG9ydCBjaGVja0NvbmZpZ0V4aXN0cyBmcm9tICcuL3NyYy9hY3Rpb25zL2NoZWNrLWNvbmZpZy1leGlzdGVuY2UuanMnO1xuaW1wb3J0IGdldE9yZ01lbWJlckFjY291bnRzIGZyb20gJy4vc3JjL2FjdGlvbnMvZ2V0LW9yZy1tZW1iZXItYWNjb3VudHMuanMnO1xuaW1wb3J0IGdldENvbnRyb2xUb3dlciBmcm9tICcuL3NyYy9hY3Rpb25zL2NoZWNrLWNvbnRyb2wtdG93ZXIuanMnO1xuaW1wb3J0IGNoZWNrTGVnYWN5Q3VyIGZyb20gJy4vc3JjL2FjdGlvbnMvY2hlY2stbGVnYWN5LWN1ci5qcyc7XG5pbXBvcnQgKiBhcyBmcyBmcm9tICdmcyc7XG5jb25zdCBtYWluID0gYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHJlcG9ydEZpbGUgPSBcIi4vUGF0aGZpbmRlci50eHRcIjtcbiAgICBsZXQgZGF0ZVRpbWUgPSBuZXcgRGF0ZSgpO1xuICAgIGZzLndyaXRlRmlsZVN5bmMocmVwb3J0RmlsZSwgXCJDbG91ZCBGb3VuZGF0aW9ucyAtIFBhdGhmaW5kZXJcIik7XG4gICAgZnMuYXBwZW5kRmlsZVN5bmMocmVwb3J0RmlsZSwgYFxcbkdlbmVyYXRlZCBvbjogJHtkYXRlVGltZS50b1VUQ1N0cmluZygpfSBcXG5cXG5gKTtcbiAgICBmcy5hcHBlbmRGaWxlU3luYyhyZXBvcnRGaWxlLCBgXFxuLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tYCk7XG4gICAgLy8gZ3JhYiByZWdpb24gZnJvbSBhd3MgQ2xvdWRTaGVsbC4gU2V0IGRlZmF1bHQgdGhvdWdoIHJlZ2lvbiBzcGVjaWZpYyBjYWxscyBhcmUgZm9yIGdsb2JhbCBzZXJ2aWNlc1xuICAgIC8vIGFuZCB1cy1lYXN0LTEgd29ya3MgdG8gZ2V0IGRldGFpbHMuXG4gICAgY29uc3QgcmVnaW9uID0gcHJvY2Vzcy5lbnYuQVdTX1JFR0lPTiB8fCAndXMtZWFzdC0xJztcbiAgICAvLyBmdW5jdGlvbiBjaGVja2luZyBpZiBtYW5hZ2VtZW50IGFjY291bnQsIG1lbWJlciBhY2NvdW50LCBvciBzdGFuZGFsb25lIGFjY291bnRcbiAgICBjb25zdCBhbGxSZWdpb25zID0gYXdhaXQgZ2V0QWxsUmVnaW9ucygpO1xuICAgIGNvbnN0IGFjY291bnRUeXBlID0gYXdhaXQgZGVmaW5lQWNjb3VudFR5cGUocmVnaW9uKTtcbiAgICBmcy5hcHBlbmRGaWxlU3luYyhyZXBvcnRGaWxlLCBgXFxuXFxuQVdTIEFDQ09VTlQgVFlQRVxcbmApO1xuICAgIGlmIChhY2NvdW50VHlwZSkge1xuICAgICAgICBjb25zb2xlLmRpcihhY2NvdW50VHlwZSwgeyBkZXB0aDogbnVsbCwgY29sb3JzOiB0cnVlIH0pO1xuICAgICAgICBmcy5hcHBlbmRGaWxlU3luYyhyZXBvcnRGaWxlLCBgXFxuICBJcyBpbiBBV1MgT3JnYW5pemF0aW9uOiAke2FjY291bnRUeXBlLmlzSW5Pcmdhbml6YXRpb259YCk7XG4gICAgICAgIGZzLmFwcGVuZEZpbGVTeW5jKHJlcG9ydEZpbGUsIGBcXG4gIEFzc2Vzc2luZyBBV1MgTWFuYWdlbWVudCBBY2NvdW50OiAke2FjY291bnRUeXBlLmlzTWFuYWdlbWVudEFjY291bnR9YCk7XG4gICAgfVxuICAgIC8vIGFsbCBjYWxscyByZXF1aXJlIGFuIEFXUyBPcmdhbml6YXRpb24gZXhpc3QgYW5kIHRoZSBhY2NvdW50IGJlIGEgbWFuYWdlbWVudCBhY2NvdW50XG4gICAgaWYgKGFjY291bnRUeXBlLmlzSW5Pcmdhbml6YXRpb24gJiYgYWNjb3VudFR5cGUuaXNNYW5hZ2VtZW50QWNjb3VudCkge1xuICAgICAgICBmcy5hcHBlbmRGaWxlU3luYyhyZXBvcnRGaWxlLCBgXFxuXFxuLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tYCk7XG4gICAgICAgIGZzLmFwcGVuZEZpbGVTeW5jKHJlcG9ydEZpbGUsIGBcXG5cXG5MZWdhY3kgQ1VSXFxuYCk7XG4gICAgICAgIGNvbnN0IGxlZ2FjeUN1ckNoZWNrID0gYXdhaXQgY2hlY2tMZWdhY3lDdXIoJ3VzLWVhc3QtMScpO1xuICAgICAgICBjb25zb2xlLmRpcihsZWdhY3lDdXJDaGVjaywgeyBkZXB0aDogbnVsbCwgY29sb3JzOiB0cnVlIH0pO1xuICAgICAgICBmcy5hcHBlbmRGaWxlU3luYyhyZXBvcnRGaWxlLCBgXFxuICBJcyBsZWdhY3kgQ1VSIHNldHVwOiAke2xlZ2FjeUN1ckNoZWNrLmlzTGVnYWN5Q3VyU2V0dXB9YCk7XG4gICAgICAgIGZzLmFwcGVuZEZpbGVTeW5jKHJlcG9ydEZpbGUsIGBcXG5cXG4tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1gKTtcbiAgICAgICAgZnMuYXBwZW5kRmlsZVN5bmMocmVwb3J0RmlsZSwgYFxcblxcbkFXUyBPUkdBTklaQVRJT04gUE9MSUNZIFRZUEVTXFxuYCk7XG4gICAgICAgIGNvbnN0IGVuYWJsZU9yZ1BvbGljaWVzQ2hlY2sgPSBhd2FpdCBnZXRFbmFibGVkT3JnUG9saWN5VHlwZXMoJ3VzLWVhc3QtMScpO1xuICAgICAgICBjb25zb2xlLmRpcihlbmFibGVPcmdQb2xpY2llc0NoZWNrLCB7IGRlcHRoOiBudWxsLCBjb2xvcnM6IHRydWUgfSk7XG4gICAgICAgIGZzLmFwcGVuZEZpbGVTeW5jKHJlcG9ydEZpbGUsIGBcXG4gIFNlcnZpY2UgQ29udHJvbCBQb2xpY2llcyAoU0NQKSBlbmFibGVkOiAke2VuYWJsZU9yZ1BvbGljaWVzQ2hlY2suc2NwRW5hYmxlZH1gKTtcbiAgICAgICAgZnMuYXBwZW5kRmlsZVN5bmMocmVwb3J0RmlsZSwgYFxcbiAgVGFnIFBvbGljaWVzIGVuYWJsZWQ6ICR7ZW5hYmxlT3JnUG9saWNpZXNDaGVjay50YWdQb2xpY3lFbmFibGVkfWApO1xuICAgICAgICBmcy5hcHBlbmRGaWxlU3luYyhyZXBvcnRGaWxlLCBgXFxuICBCYWNrdXAgUG9saWNpZXMgZW5hYmxlZDogJHtlbmFibGVPcmdQb2xpY2llc0NoZWNrLmJhY2t1cFBvbGljeUVuYWJsZWR9YCk7XG4gICAgICAgIGZzLmFwcGVuZEZpbGVTeW5jKHJlcG9ydEZpbGUsIGBcXG5cXG4tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1gKTtcbiAgICAgICAgZnMuYXBwZW5kRmlsZVN5bmMocmVwb3J0RmlsZSwgYFxcblxcbkFXUyBPUkdBTklaQVRJT04gRU5BQkxFRCBTRVJWSUNFU1xcbmApO1xuICAgICAgICBjb25zdCBvcmdFbmFibGVkU2VydmljZXMgPSBhd2FpdCBnZXRFbmFibGVkT3JnU2VydmljZXMoJ3VzLWVhc3QtMScpO1xuICAgICAgICBjb25zb2xlLmRpcihvcmdFbmFibGVkU2VydmljZXMsIHsgZGVwdGg6IG51bGwsIGNvbG9yczogdHJ1ZSB9KTtcbiAgICAgICAgZnMuYXBwZW5kRmlsZVN5bmMocmVwb3J0RmlsZSwgYFxcbiAgVGhlIGZvbGxvd2luZyBBV1MgU2VydmljZXMgYXJlIGVuYWJsZWQgd2l0aGluIHlvdXIgQVdTIE9yZ2FuaXphdGlvbjpgKTtcbiAgICAgICAgZm9yIChjb25zdCBvcmdTZXJ2aWNlIG9mIG9yZ0VuYWJsZWRTZXJ2aWNlcykge1xuICAgICAgICAgICAgZnMuYXBwZW5kRmlsZVN5bmMocmVwb3J0RmlsZSwgYFxcbiAgICAke29yZ1NlcnZpY2Uuc2VydmljZX1gKTtcbiAgICAgICAgfVxuICAgICAgICBmcy5hcHBlbmRGaWxlU3luYyhyZXBvcnRGaWxlLCBgXFxuXFxuLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tYCk7XG4gICAgICAgIGZzLmFwcGVuZEZpbGVTeW5jKHJlcG9ydEZpbGUsIGBcXG5cXG5BV1MgT1JHQU5JWkFUSU9OIElOVEVHUkFURUQgU0VSVklDRSBSRUdJU1RFUkVEIERFTEVHQVRFRCBBRE1JTlNcXG5gKTtcbiAgICAgICAgY29uc3Qgb3JnRGVsQWRtaW5EZXRhaWxzID0gYXdhaXQgZ2V0T3JnRGFBY2NvdW50cygpO1xuICAgICAgICBjb25zb2xlLmRpcihvcmdEZWxBZG1pbkRldGFpbHMsIHsgZGVwdGg6IG51bGwsIGNvbG9yczogdHJ1ZSB9KTtcbiAgICAgICAgaWYgKG9yZ0RlbEFkbWluRGV0YWlscyAmJiBvcmdEZWxBZG1pbkRldGFpbHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgZm9yIChjb25zdCBhY2NvdW50IG9mIG9yZ0RlbEFkbWluRGV0YWlscykge1xuICAgICAgICAgICAgICAgIGZzLmFwcGVuZEZpbGVTeW5jKHJlcG9ydEZpbGUsIGBcXG4gIEFjY291bnQ6ICR7YWNjb3VudC5hY2NvdW50TmFtZX1gKTtcbiAgICAgICAgICAgICAgICBpZiAoYWNjb3VudC5zZXJ2aWNlcyAmJiBhY2NvdW50LnNlcnZpY2VzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgZnMuYXBwZW5kRmlsZVN5bmMocmVwb3J0RmlsZSwgYFxcbiAgRGVsZWdhdGVkIFNlcnZpY2VzOmApO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHNydiBvZiBhY2NvdW50LnNlcnZpY2VzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmcy5hcHBlbmRGaWxlU3luYyhyZXBvcnRGaWxlLCBgXFxuICAgICR7c3J2LlNlcnZpY2VQcmluY2lwYWx9YCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZnMuYXBwZW5kRmlsZVN5bmMocmVwb3J0RmlsZSwgYFxcbiBgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGZzLmFwcGVuZEZpbGVTeW5jKHJlcG9ydEZpbGUsIGBcXG4gIE5vIGRlbGVnYXRlZCBhZG1pbiBhY2NvdW50cyBpbiBBV1MgT3JnYW5pemF0aW9uYCk7XG4gICAgICAgIH1cbiAgICAgICAgZnMuYXBwZW5kRmlsZVN5bmMocmVwb3J0RmlsZSwgYFxcblxcbi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLWApO1xuICAgICAgICBmcy5hcHBlbmRGaWxlU3luYyhyZXBvcnRGaWxlLCBgXFxuXFxuQVdTIE9SR0FOSVpBVElPTiBDTE9VREZPUk1BVElPTlxcbmApO1xuICAgICAgICBjb25zdCBjZm5PcmdTdGF0dXMgPSBhd2FpdCBnZXRPcmdDbG91ZEZvcm1hdGlvbihyZWdpb24pO1xuICAgICAgICBjb25zb2xlLmRpcihjZm5PcmdTdGF0dXMsIHsgZGVwdGg6IG51bGwsIGNvbG9yczogdHJ1ZSB9KTtcbiAgICAgICAgZnMuYXBwZW5kRmlsZVN5bmMocmVwb3J0RmlsZSwgYFxcbiAgQVdTIENsb3VkRm9ybWF0aW9uIE9yZ2FuaXphdGlvbiBzdGFjayBzZXRzIHN0YXR1cyA6ICR7Y2ZuT3JnU3RhdHVzLnN0YXR1c31gKTtcbiAgICAgICAgZnMuYXBwZW5kRmlsZVN5bmMocmVwb3J0RmlsZSwgYFxcblxcbi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLWApO1xuICAgICAgICBmcy5hcHBlbmRGaWxlU3luYyhyZXBvcnRGaWxlLCBgXFxuXFxuQVdTIENPTlRST0wgVE9XRVJcXG5gKTtcbiAgICAgICAgY29uc3QgY29udHJvbFRvd2VyRGV0YWlscyA9IGF3YWl0IGdldENvbnRyb2xUb3dlcihyZWdpb24pO1xuICAgICAgICBpZiAoY29udHJvbFRvd2VyRGV0YWlscykge1xuICAgICAgICAgICAgY29uc29sZS5kaXIoY29udHJvbFRvd2VyRGV0YWlscywgeyBkZXB0aDogbnVsbCwgY29sb3JzOiB0cnVlIH0pO1xuICAgICAgICAgICAgZnMuYXBwZW5kRmlsZVN5bmMocmVwb3J0RmlsZSwgYFxcbiAgQ29udHJvbCBUb3dlciBob21lIHJlZ2lvbjogJHtjb250cm9sVG93ZXJEZXRhaWxzLmNvbnRyb2xUb3dlclJlZ2lvbn1gKTtcbiAgICAgICAgICAgIGZzLmFwcGVuZEZpbGVTeW5jKHJlcG9ydEZpbGUsIGBcXG4gIENvbnRyb2wgVG93ZXIgc3RhdHVzOiAke2NvbnRyb2xUb3dlckRldGFpbHMuc3RhdHVzfWApO1xuICAgICAgICAgICAgZnMuYXBwZW5kRmlsZVN5bmMocmVwb3J0RmlsZSwgYFxcbiAgQ29udHJvbCBUb3dlciBMYW5kaW5nIFpvbmUgdmVyc2lvbjogJHtjb250cm9sVG93ZXJEZXRhaWxzLmRlcGxveWVkVmVyc2lvbn1gKTtcbiAgICAgICAgICAgIGZzLmFwcGVuZEZpbGVTeW5jKHJlcG9ydEZpbGUsIGBcXG4gIExhdGVzdCBhdmFpbGFibGUgdmVyc2lvbjogJHtjb250cm9sVG93ZXJEZXRhaWxzLmxhdGVzdEF2YWlsYWJsZVZlcnNpb259YCk7XG4gICAgICAgICAgICBmcy5hcHBlbmRGaWxlU3luYyhyZXBvcnRGaWxlLCBgXFxuICBEcmlmdCBTdGF0dXM6ICR7Y29udHJvbFRvd2VyRGV0YWlscy5kcmlmdFN0YXR1c31gKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGZzLmFwcGVuZEZpbGVTeW5jKHJlcG9ydEZpbGUsIGBcXG4gIEFXUyBDb250cm9sIFRvd2VyIGlzIG5vdCBkZXBsb3llZCBpbiB0aGUgQVdTIE9yZ2FuaXphdGlvbmApO1xuICAgICAgICB9XG4gICAgICAgIGZzLmFwcGVuZEZpbGVTeW5jKHJlcG9ydEZpbGUsIGBcXG5cXG4tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1gKTtcbiAgICAgICAgZnMuYXBwZW5kRmlsZVN5bmMocmVwb3J0RmlsZSwgYFxcblxcbkFXUyBJQU0gSURFTlRJVFkgQ0VOVEVSXFxuYCk7XG4gICAgICAgIGNvbnN0IGlkY0luZm9ybWF0aW9uID0gYXdhaXQgZ2V0SWRjSW5mbyhhbGxSZWdpb25zKTtcbiAgICAgICAgY29uc29sZS5kaXIoaWRjSW5mb3JtYXRpb24sIHsgZGVwdGg6IG51bGwsIGNvbG9yczogdHJ1ZSB9KTtcbiAgICAgICAgZnMuYXBwZW5kRmlsZVN5bmMocmVwb3J0RmlsZSwgYFxcbiAgSWRDIFJlZ2lvbjogJHtpZGNJbmZvcm1hdGlvbi5yZWdpb259YCk7XG4gICAgICAgIGZzLmFwcGVuZEZpbGVTeW5jKHJlcG9ydEZpbGUsIGBcXG4gIElkQyBBUk46ICR7aWRjSW5mb3JtYXRpb24uYXJufWApO1xuICAgICAgICBmcy5hcHBlbmRGaWxlU3luYyhyZXBvcnRGaWxlLCBgXFxuICBJZEMgSW5zdGFuY2UgSWQ6ICR7aWRjSW5mb3JtYXRpb24uaWR9YCk7XG4gICAgICAgIGZzLmFwcGVuZEZpbGVTeW5jKHJlcG9ydEZpbGUsIGBcXG5cXG4tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1gKTtcbiAgICAgICAgZnMuYXBwZW5kRmlsZVN5bmMocmVwb3J0RmlsZSwgYFxcblxcbkFXUyBPUkdBTklaQVRJT04gREVUQUlMU1xcbmApO1xuICAgICAgICBjb25zdCBvcmdEZXRhaWxzID0gYXdhaXQgZ2V0T3JnRGV0YWlscygndXMtZWFzdC0xJyk7XG4gICAgICAgIGNvbnNvbGUuZGlyKG9yZ0RldGFpbHMsIHsgZGVwdGg6IG51bGwsIGNvbG9yczogdHJ1ZSB9KTtcbiAgICAgICAgZnMuYXBwZW5kRmlsZVN5bmMocmVwb3J0RmlsZSwgYFxcbiAgQVdTIE9yZ2FuaXphdGlvbiBJZDogJHtvcmdEZXRhaWxzLmlkfWApO1xuICAgICAgICBmcy5hcHBlbmRGaWxlU3luYyhyZXBvcnRGaWxlLCBgXFxuICBBV1MgT3JnYW5pemF0aW9uIEFSTjogJHtvcmdEZXRhaWxzLmFybn1gKTtcbiAgICAgICAgZnMuYXBwZW5kRmlsZVN5bmMocmVwb3J0RmlsZSwgYFxcbiAgQVdTIE9yZ2FuaXphdGlvbiBSb290IE9VIElkOiAke29yZ0RldGFpbHMucm9vdE91SWR9YCk7XG4gICAgICAgIGlmIChvcmdEZXRhaWxzLnJvb3RPdUlkKSB7XG4gICAgICAgICAgICBmcy5hcHBlbmRGaWxlU3luYyhyZXBvcnRGaWxlLCBgXFxuXFxuLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tYCk7XG4gICAgICAgICAgICBmcy5hcHBlbmRGaWxlU3luYyhyZXBvcnRGaWxlLCBgXFxuXFxuQVdTIE9SR0FOSVpBVElPTiBUT1AtTEVWRUwgT1JHQU5JWkFUSU9OIFVOSVRTXFxuYCk7XG4gICAgICAgICAgICBjb25zdCBvcmdPdXMgPSBhd2FpdCBnZXRPcmdUb3BMZXZlbE91cygndXMtZWFzdC0xJywgb3JnRGV0YWlscy5yb290T3VJZCk7XG4gICAgICAgICAgICBjb25zb2xlLmRpcihvcmdPdXMsIHsgZGVwdGg6IG51bGwsIGNvbG9yczogdHJ1ZSB9KTtcbiAgICAgICAgICAgIGZzLmFwcGVuZEZpbGVTeW5jKHJlcG9ydEZpbGUsIGBcXG4gIExpc3Qgb2YgT3JnYW5pemF0aW9uJ3MgdG9wLWxldmVsIE9VcyBhbmQgQVdTIGFjY291bnRzOmApO1xuICAgICAgICAgICAgaWYgKG9yZ091cyAmJiBvcmdPdXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3Qgb3Ugb2Ygb3JnT3VzKSB7XG4gICAgICAgICAgICAgICAgICAgIGZzLmFwcGVuZEZpbGVTeW5jKHJlcG9ydEZpbGUsIGBcXG4gICAgT3JnYW5pemF0aW9uYWwgVW5pdDogJHtvdS5uYW1lfWApO1xuICAgICAgICAgICAgICAgICAgICBmcy5hcHBlbmRGaWxlU3luYyhyZXBvcnRGaWxlLCBgXFxuICAgICAgT3JnYW5pemF0aW9uYWwgVW5pdCBJZDogJHtvdS5pZH1gKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG91LmFjY291bnRzICYmIG91LmFjY291bnRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZzLmFwcGVuZEZpbGVTeW5jKHJlcG9ydEZpbGUsIGBcXG4gICAgICBBV1MgQWNjb3VudHM6YCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGFjY291bnQgb2Ygb3UuYWNjb3VudHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcy5hcHBlbmRGaWxlU3luYyhyZXBvcnRGaWxlLCBgXFxuICAgICAgICAke2FjY291bnQuTmFtZX1gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGZzLmFwcGVuZEZpbGVTeW5jKHJlcG9ydEZpbGUsIGBcXG5gKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZzLmFwcGVuZEZpbGVTeW5jKHJlcG9ydEZpbGUsIGBcXG4gICAgICBBV1MgQWNjb3VudHM6IE5vbmVgKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBmcy5hcHBlbmRGaWxlU3luYyhyZXBvcnRGaWxlLCBgXFxuYCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZnMuYXBwZW5kRmlsZVN5bmMocmVwb3J0RmlsZSwgYFxcbiAgTm8gdG9wIGxldmVsIE9VcyBmb3VuZC5gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmcy5hcHBlbmRGaWxlU3luYyhyZXBvcnRGaWxlLCBgXFxuXFxuLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tYCk7XG4gICAgICAgIGZzLmFwcGVuZEZpbGVTeW5jKHJlcG9ydEZpbGUsIGBcXG5cXG5BV1MgT1JHQU5JWkFUSU9OIE1FTUJFUiBBQ0NPVU5UU1xcbmApO1xuICAgICAgICBjb25zdCBvcmdNZW1iZXJBY2NvdW50RGV0YWlscyA9IGF3YWl0IGdldE9yZ01lbWJlckFjY291bnRzKCk7XG4gICAgICAgIGNvbnNvbGUuZGlyKG9yZ01lbWJlckFjY291bnREZXRhaWxzLCB7IGRlcHRoOiBudWxsLCBjb2xvcnM6IHRydWUgfSk7XG4gICAgICAgIGlmIChvcmdNZW1iZXJBY2NvdW50RGV0YWlscyAmJiBvcmdNZW1iZXJBY2NvdW50RGV0YWlscy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IG1lbWJlckFjY291bnQgb2Ygb3JnTWVtYmVyQWNjb3VudERldGFpbHMpIHtcbiAgICAgICAgICAgICAgICBmcy5hcHBlbmRGaWxlU3luYyhyZXBvcnRGaWxlLCBgXFxuICBBY2NvdW50OiAke21lbWJlckFjY291bnQuYWNjb3VudE5hbWV9YCk7XG4gICAgICAgICAgICAgICAgZnMuYXBwZW5kRmlsZVN5bmMocmVwb3J0RmlsZSwgYFxcbiAgQWNjb3VudCBFbWFpbDogJHttZW1iZXJBY2NvdW50LmFjY291bnRFbWFpbH1cXG5gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGZzLmFwcGVuZEZpbGVTeW5jKHJlcG9ydEZpbGUsIGBObyBtZW1iZXIgYWNjb3VudHMgZm91bmQgd2hpY2ggaXMgYW1hemluZyBhcyB0aGlzIGlzIHJ1bm5pbmcgZnJvbSBvbmUuYCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAoYWNjb3VudFR5cGUuaXNJbk9yZ2FuaXphdGlvbiAmJiAhYWNjb3VudFR5cGUuaXNNYW5hZ2VtZW50QWNjb3VudCkge1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gJ1xcbldBUk5JTkc6IFlvdSBhcmUgcnVubmluZyBQYXRoZmluZGVyIGZyb20gYW4gYWNjb3VudCB0aGF0IGlzIGEgbWVtYmVyIG9mIHlvdXIgQVdTIE9yZ2FuaXphdGlvbi4gUGxlYXNlIHJ1biB0aGUgc29sdXRpb24gZnJvbSB5b3VyIEFXUyBNYW5hZ2VtZW50IGFjY291bnQuJztcbiAgICAgICAgY29uc29sZS53YXJuKG1lc3NhZ2UpO1xuICAgICAgICBmcy5hcHBlbmRGaWxlU3luYyhyZXBvcnRGaWxlLCBtZXNzYWdlKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSAnXFxuV0FSTklORzogWW91IGFyZSBydW5uaW5nIFBhdGhmaW5kZXIgZnJvbSBhbiBhY2NvdW50IHRoYXQgbm90IHBhcnQgb2YgYW4gQVdTIE9yZ2FuaXphdGlvbi4gVGhpcyBhY2NvdW50IHdpbGwgYmUgdHJlYXRlZCBhcyBhIHN0YW5kYWxvbmUgYWNjb3VudC4nO1xuICAgICAgICBjb25zb2xlLndhcm4obWVzc2FnZSk7XG4gICAgICAgIGZzLmFwcGVuZEZpbGVTeW5jKHJlcG9ydEZpbGUsIG1lc3NhZ2UpO1xuICAgIH1cbiAgICBmcy5hcHBlbmRGaWxlU3luYyhyZXBvcnRGaWxlLCBgXFxuXFxuXFxuLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tYCk7XG4gICAgZnMuYXBwZW5kRmlsZVN5bmMocmVwb3J0RmlsZSwgYFxcbi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLWApO1xuICAgIGZzLmFwcGVuZEZpbGVTeW5jKHJlcG9ydEZpbGUsIGBcXG5BV1MgTUFOQUdFTUVOVCBBQ0NPVU5UIENIRUNLU2ApO1xuICAgIGZzLmFwcGVuZEZpbGVTeW5jKHJlcG9ydEZpbGUsIGBcXG4tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1gKTtcbiAgICBmcy5hcHBlbmRGaWxlU3luYyhyZXBvcnRGaWxlLCBgXFxuLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXFxuYCk7XG4gICAgLy8gR2VuZXJhbCBhY2NvdW50IGNoZWNrcyBmb3IgYWxsIGFjY291bnQgdHlwZXMgKG1hbmFnZW1lbnQgYWNjb3VudCwgbWVtYmVyIGFjY291bnQsIHN0YW5kYWxvbmUpXG4gICAgLy8gMS4gbGlzdCBhbGwgSUFNIHVzZXJzIGFuZCBpZiB0aGV5IGhhdmUga2V5cyBpbiB0aGUgYXdzIGFjY291bnRcbiAgICBjb25zdCBpYW1Vc2VyUmVzdWx0ID0gYXdhaXQgY2hlY2tJYW1Vc2VycygpO1xuICAgIGZzLmFwcGVuZEZpbGVTeW5jKHJlcG9ydEZpbGUsIGBcXG5cXG5JQU0gVVNFUlMgQ0hFQ0tcXG5gKTtcbiAgICBpZiAoaWFtVXNlclJlc3VsdCAmJiBpYW1Vc2VyUmVzdWx0Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgY29uc29sZS5kaXIoaWFtVXNlclJlc3VsdCwgeyBkZXB0aDogbnVsbCwgY29sb3JzOiB0cnVlIH0pO1xuICAgICAgICBmb3IgKGNvbnN0IGlhbVVzZXIgb2YgaWFtVXNlclJlc3VsdCkge1xuICAgICAgICAgICAgZnMuYXBwZW5kRmlsZVN5bmMocmVwb3J0RmlsZSwgYFxcbiAgSUFNIFVzZXI6ICR7aWFtVXNlci51c2VyTmFtZX1gKTtcbiAgICAgICAgICAgIGlmIChpYW1Vc2VyLmFjY2Vzc0tleUlkKSB7XG4gICAgICAgICAgICAgICAgZnMuYXBwZW5kRmlsZVN5bmMocmVwb3J0RmlsZSwgYFxcbiAgICBVc2VyIEFQSSBLZXkgSUQ6ICR7aWFtVXNlci5hY2Nlc3NLZXlJZH1gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZzLmFwcGVuZEZpbGVTeW5jKHJlcG9ydEZpbGUsIGBcXG5gKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgZnMuYXBwZW5kRmlsZVN5bmMocmVwb3J0RmlsZSwgYFxcbiAgTm8gSUFNIFVzZXJzIGZvdW5kLmApO1xuICAgIH1cbiAgICBmcy5hcHBlbmRGaWxlU3luYyhyZXBvcnRGaWxlLCBgXFxuXFxuLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tYCk7XG4gICAgLy8gMi4gZmluZCBvdXQgaWYgRUMyIHdvcmtsb2FkcyBhcmUgcnVubmluZyBpbiB0aGUgYWNjb3VudFxuICAgIGNvbnN0IGVjMkNoZWNrID0gYXdhaXQgY2hlY2tFYzJFeGlzdHMoYWxsUmVnaW9ucyk7XG4gICAgZnMuYXBwZW5kRmlsZVN5bmMocmVwb3J0RmlsZSwgYFxcblxcbkVDMiBJTlNUQU5DRSBDSEVDS1xcbmApO1xuICAgIGlmIChlYzJDaGVjayAmJiBlYzJDaGVjay5maW5kKHBhcmFtID0+IHBhcmFtLmVjMkZvdW5kID09PSB0cnVlKSkge1xuICAgICAgICBjb25zb2xlLmRpcihlYzJDaGVjaywgeyBkZXB0aDogbnVsbCwgY29sb3JzOiB0cnVlIH0pO1xuICAgICAgICBmb3IgKGNvbnN0IGVjMiBvZiBlYzJDaGVjaykge1xuICAgICAgICAgICAgaWYgKGVjMi5lYzJGb3VuZCkge1xuICAgICAgICAgICAgICAgIGZzLmFwcGVuZEZpbGVTeW5jKHJlcG9ydEZpbGUsIGBcXG4gICR7ZWMyLnJlZ2lvbn0gLSBmb3VuZCBFQzIgSW5zdGFuY2UocykuYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGZzLmFwcGVuZEZpbGVTeW5jKHJlcG9ydEZpbGUsIGBcXG4gIE5vIEVDMiBpbnN0YW5jZXMgZm91bmQuYCk7XG4gICAgfVxuICAgIGZzLmFwcGVuZEZpbGVTeW5jKHJlcG9ydEZpbGUsIGBcXG5cXG4tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1gKTtcbiAgICAvLyAzLiBsaXN0IGFsbCBWUENzIChkZWZhdWx0IG9yIG5vdClcbiAgICBjb25zdCB2cGNDaGVjayA9IGF3YWl0IGNoZWNrVnBjRXhpc3RzKGFsbFJlZ2lvbnMpO1xuICAgIGZzLmFwcGVuZEZpbGVTeW5jKHJlcG9ydEZpbGUsIGBcXG5cXG5WUEMgQ0hFQ0tcXG5gKTtcbiAgICBpZiAodnBjQ2hlY2sgJiYgdnBjQ2hlY2subGVuZ3RoID4gMCkge1xuICAgICAgICBjb25zb2xlLmRpcih2cGNDaGVjaywgeyBkZXB0aDogbnVsbCwgY29sb3JzOiB0cnVlIH0pO1xuICAgICAgICBmb3IgKGNvbnN0IHZwY0ZpbmQgb2YgdnBjQ2hlY2spIHtcbiAgICAgICAgICAgIGlmICh2cGNGaW5kLnZwY0ZvdW5kKSB7XG4gICAgICAgICAgICAgICAgZnMuYXBwZW5kRmlsZVN5bmMocmVwb3J0RmlsZSwgYFxcbiAgJHt2cGNGaW5kLnJlZ2lvbn0gLSBmb3VuZCBWUEMocykuYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGZzLmFwcGVuZEZpbGVTeW5jKHJlcG9ydEZpbGUsIGBcXG4gIE5vIFZQQ3MgZm91bmQuYCk7XG4gICAgfVxuICAgIGZzLmFwcGVuZEZpbGVTeW5jKHJlcG9ydEZpbGUsIGBcXG5cXG4tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1gKTtcbiAgICAvLyA0LiBjaGVjayBmb3IgY2xvdWR0cmFpbCBydW5uaW5nXG4gICAgY29uc3QgY2xvdWRUcmFpbENoZWNrID0gYXdhaXQgY2hlY2tDbG91ZFRyYWlsRXhpc3RzKGFsbFJlZ2lvbnMpO1xuICAgIGZzLmFwcGVuZEZpbGVTeW5jKHJlcG9ydEZpbGUsIGBcXG5cXG5DTE9VRFRSQUlMIENIRUNLXFxuYCk7XG4gICAgaWYgKGNsb3VkVHJhaWxDaGVjayAmJiBjbG91ZFRyYWlsQ2hlY2subGVuZ3RoID4gMCkge1xuICAgICAgICBjb25zb2xlLmRpcihjbG91ZFRyYWlsQ2hlY2ssIHsgZGVwdGg6IG51bGwsIGNvbG9yczogdHJ1ZSB9KTtcbiAgICAgICAgZm9yIChjb25zdCBjdEZpbmQgb2YgY2xvdWRUcmFpbENoZWNrKSB7XG4gICAgICAgICAgICBpZiAoY3RGaW5kLnRyYWlsRm91bmQpIHtcbiAgICAgICAgICAgICAgICBmcy5hcHBlbmRGaWxlU3luYyhyZXBvcnRGaWxlLCBgXFxuICBDbG91ZFRyYWlsIGZvdW5kIGluICR7Y3RGaW5kLnJlZ2lvbn1gKTtcbiAgICAgICAgICAgICAgICBmcy5hcHBlbmRGaWxlU3luYyhyZXBvcnRGaWxlLCBgXFxuICAgIElzIE9yZ2FuaXphdGlvbiBUcmFpbDogJHtjdEZpbmQuaXNPcmdUcmFpbH1gKTtcbiAgICAgICAgICAgICAgICBmcy5hcHBlbmRGaWxlU3luYyhyZXBvcnRGaWxlLCBgXFxuICAgIElzIE11bHRpUmVnaW9uOiAke2N0RmluZC5pc011bHRpUmVnaW9ufWApO1xuICAgICAgICAgICAgICAgIGZzLmFwcGVuZEZpbGVTeW5jKHJlcG9ydEZpbGUsIGBcXG5gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgZnMuYXBwZW5kRmlsZVN5bmMocmVwb3J0RmlsZSwgYFxcbiAgTm8gQVdTIENsb3VkVHJhaWwgcmVzb3VyY2UgZGlzY292ZXJlZGApO1xuICAgIH1cbiAgICBmcy5hcHBlbmRGaWxlU3luYyhyZXBvcnRGaWxlLCBgXFxuYCk7XG4gICAgZnMuYXBwZW5kRmlsZVN5bmMocmVwb3J0RmlsZSwgYFxcblxcbi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLWApO1xuICAgIC8vIDUuIGNoZWNrIGZvciBBV1MgY29uZmlnIHJlY29yZGVycyBhbmQgZGVsaXZlcnkgY2hhbm5lbHNcbiAgICBjb25zdCBjb25maWdDaGVjayA9IGF3YWl0IGNoZWNrQ29uZmlnRXhpc3RzKGFsbFJlZ2lvbnMpO1xuICAgIGZzLmFwcGVuZEZpbGVTeW5jKHJlcG9ydEZpbGUsIGBcXG5cXG5BV1MgQ09ORklHIENIRUNLXFxuYCk7XG4gICAgaWYgKGNvbmZpZ0NoZWNrICYmIGNvbmZpZ0NoZWNrLmZpbmQocGFyYW0gPT4gcGFyYW0uY29uZmlnUmVjb3JkZXJGb3VuZCA9PT0gdHJ1ZSkpIHtcbiAgICAgICAgY29uc29sZS5kaXIoY29uZmlnQ2hlY2ssIHsgZGVwdGg6IG51bGwsIGNvbG9yczogdHJ1ZSB9KTtcbiAgICAgICAgZm9yIChjb25zdCBjb25maWdGaW5kIG9mIGNvbmZpZ0NoZWNrKSB7XG4gICAgICAgICAgICBpZiAoY29uZmlnRmluZC5jb25maWdSZWNvcmRlckZvdW5kKSB7XG4gICAgICAgICAgICAgICAgZnMuYXBwZW5kRmlsZVN5bmMocmVwb3J0RmlsZSwgYFxcbiAgJHtjb25maWdGaW5kLnJlZ2lvbn0gLSBDb25maWcgUmVjb3JkZXIgZm91bmRgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjb25maWdGaW5kLmNvbmZpZ0RlbGl2ZXJ5Q2hhbm5lbEZvdW5kKSB7XG4gICAgICAgICAgICAgICAgZnMuYXBwZW5kRmlsZVN5bmMocmVwb3J0RmlsZSwgYFxcbiAgJHtjb25maWdGaW5kLnJlZ2lvbn0gLSBDb25maWcgRGVsaXZlcnkgQ2hhbm5lbCBmb3VuZGApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBmcy5hcHBlbmRGaWxlU3luYyhyZXBvcnRGaWxlLCBgXFxuICBObyBBV1MgQ29uZmlnIHJlc291cmNlIGRpc2NvdmVyZWRgKTtcbiAgICB9XG4gICAgZnMuYXBwZW5kRmlsZVN5bmMocmVwb3J0RmlsZSwgYFxcblxcblxcbiAgRU5EIEFTU0VTU01FTlRgKTtcbn07XG5tYWluKCk7XG4iLCJpbXBvcnQgeyBFQzJDbGllbnQsIERlc2NyaWJlUmVnaW9uc0NvbW1hbmQgfSBmcm9tIFwiQGF3cy1zZGsvY2xpZW50LWVjMlwiO1xuYXN5bmMgZnVuY3Rpb24gZ2V0QWxsUmVnaW9ucygpIHtcbiAgICAvLyBncmFiYmluZyBhbGwgcmVnaW9ucyBmcm9tIHVzLWVhc3QtMVxuICAgIGNvbnN0IGVjMkNsaWVudCA9IG5ldyBFQzJDbGllbnQoeyByZWdpb246IFwidXMtZWFzdC0xXCIgfSk7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgZGVzY3JpYmVSZWdpb25zQ29tbWFuZCA9IG5ldyBEZXNjcmliZVJlZ2lvbnNDb21tYW5kKHt9KTtcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBlYzJDbGllbnQuc2VuZChkZXNjcmliZVJlZ2lvbnNDb21tYW5kKTtcbiAgICAgICAgY29uc3QgcmVnaW9ucyA9IFtdO1xuICAgICAgICBmb3IgKGNvbnN0IHJlZ2lvbiBvZiByZXNwb25zZS5SZWdpb25zIHx8IFtdKSB7XG4gICAgICAgICAgICByZWdpb25zLnB1c2gocmVnaW9uLlJlZ2lvbk5hbWUgfHwgXCJcIik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlZ2lvbnM7XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgcmV0cmlldmluZyByZWdpb25zOlwiLCBlcnJvcik7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gICAgZmluYWxseSB7XG4gICAgICAgIGVjMkNsaWVudC5kZXN0cm95KCk7XG4gICAgfVxufVxuZXhwb3J0IGRlZmF1bHQgZ2V0QWxsUmVnaW9ucztcbiIsImltcG9ydCB7IFNUU0NsaWVudCwgR2V0Q2FsbGVySWRlbnRpdHlDb21tYW5kIH0gZnJvbSBcIkBhd3Mtc2RrL2NsaWVudC1zdHNcIjtcbmltcG9ydCB7IE9yZ2FuaXphdGlvbnNDbGllbnQsIERlc2NyaWJlT3JnYW5pemF0aW9uQ29tbWFuZCwgfSBmcm9tIFwiQGF3cy1zZGsvY2xpZW50LW9yZ2FuaXphdGlvbnNcIjtcbmFzeW5jIGZ1bmN0aW9uIGdldEFjY291bnRJZChyZWdpb24pIHtcbiAgICBjb25zdCBzdHNDbGllbnQgPSBuZXcgU1RTQ2xpZW50KHsgcmVnaW9uIH0pO1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGdldENhbGxlcklkZW50aXR5Q29tbWFuZCA9IG5ldyBHZXRDYWxsZXJJZGVudGl0eUNvbW1hbmQoe30pO1xuICAgICAgICBjb25zdCBBY2NvdW50ID0gYXdhaXQgc3RzQ2xpZW50LnNlbmQoZ2V0Q2FsbGVySWRlbnRpdHlDb21tYW5kKTtcbiAgICAgICAgcmV0dXJuIEFjY291bnQuQWNjb3VudDtcbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBnZXR0aW5nIGFjY291bnQgSUQ6XCIsIGVycm9yKTtcbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxufVxuO1xuLy8gZnVuY3Rpb24gY2hlY2tpbmcgaWYgbWFuYWdlbWVudCBhY2NvdW50LCBtZW1iZXIgYWNjb3VudCwgb3Igc3RhbmRhbG9uZSBhY2NvdW50XG5leHBvcnQgY29uc3QgZGVmaW5lQWNjb3VudFR5cGUgPSBhc3luYyAocmVnaW9uKSA9PiB7XG4gICAgY29uc3Qgb3JnYW5pemF0aW9uc0NsaWVudCA9IG5ldyBPcmdhbml6YXRpb25zQ2xpZW50KHsgcmVnaW9uIH0pO1xuICAgIGxldCBpc0luT3JnYW5pemF0aW9uID0gZmFsc2U7XG4gICAgbGV0IGlzTWFuYWdlbWVudEFjY291bnQgPSBmYWxzZTtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCBjdXJyZW50QWNjb3VudElkID0gYXdhaXQgZ2V0QWNjb3VudElkKHJlZ2lvbik7XG4gICAgICAgIGlmIChjdXJyZW50QWNjb3VudElkKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhgY3VycmVudCBhY2NvdW50IGlzOiAke2N1cnJlbnRBY2NvdW50SWR9YCk7XG4gICAgICAgICAgICBjb25zdCBkZXNjcmliZU9yZ2FuaXphdGlvbkNvbW1hbmQgPSBuZXcgRGVzY3JpYmVPcmdhbml6YXRpb25Db21tYW5kKHt9KTtcbiAgICAgICAgICAgIGNvbnN0IGRlc2NyaWJlT3JnYW5pemF0aW9uUmVzcG9uc2UgPSBhd2FpdCBvcmdhbml6YXRpb25zQ2xpZW50LnNlbmQoZGVzY3JpYmVPcmdhbml6YXRpb25Db21tYW5kKTtcbiAgICAgICAgICAgIC8vIHRoZSBhY2NvdW50IGlzIG5vdCBzdGFuZGFsb25lIGFuZCBwYXJ0IG9mIEFXUyBPcmdhbml6YXRpb25cbiAgICAgICAgICAgIGlmIChkZXNjcmliZU9yZ2FuaXphdGlvblJlc3BvbnNlLk9yZ2FuaXphdGlvbj8uTWFzdGVyQWNjb3VudElkKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coYGN1cnJlbnQgbWFuYWdlbWVudCBhY2NvdW50IGlzOiAke2Rlc2NyaWJlT3JnYW5pemF0aW9uUmVzcG9uc2UuT3JnYW5pemF0aW9uPy5NYXN0ZXJBY2NvdW50SWR9YCk7XG4gICAgICAgICAgICAgICAgY29uc3QgbWFuYWdlbWVudEFjY291bnRJZCA9IGRlc2NyaWJlT3JnYW5pemF0aW9uUmVzcG9uc2UuT3JnYW5pemF0aW9uPy5NYXN0ZXJBY2NvdW50SWQ7XG4gICAgICAgICAgICAgICAgaWYgKG1hbmFnZW1lbnRBY2NvdW50SWQgPT0gY3VycmVudEFjY291bnRJZCkge1xuICAgICAgICAgICAgICAgICAgICAvLyB0aGlzIGlzIGFuIG9yZ2FuaXphdGlvbiBhbmQgdGhpcyBpcyB0aGUgbWFuYWdlbWVudCBhY2NvdW50XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiSXQgaXMsIGl0IGlzIGFsbCB0cnVlIVwiKTtcbiAgICAgICAgICAgICAgICAgICAgaXNNYW5hZ2VtZW50QWNjb3VudCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGlzSW5Pcmdhbml6YXRpb24gPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhlcmUgaXMgYW4gb3JnYW5pemF0aW9uLCBidXQgdGhpcyBpc24ndCB0aGUgbWFuYWdlbWVudCBhY2NvdW50XG4gICAgICAgICAgICAgICAgICAgIGlzSW5Pcmdhbml6YXRpb24gPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIHRoZXJlIGlzbid0IGFuIG9yZ2FuaXphdGlvbiBhbmQgdGhpcyBhY2NvdW50IGlzIHN0YW5kYWxvbmVcbiAgICAgICAgICAgICAgICBpc0luT3JnYW5pemF0aW9uID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvcjpcIiwgZXJyb3IpO1xuICAgIH1cbiAgICBmaW5hbGx5IHtcbiAgICAgICAgb3JnYW5pemF0aW9uc0NsaWVudC5kZXN0cm95KCk7XG4gICAgfVxuICAgIHJldHVybiB7IGlzSW5Pcmdhbml6YXRpb24sIGlzTWFuYWdlbWVudEFjY291bnQgfTtcbn07XG4iLCJpbXBvcnQgeyBDb3N0QW5kVXNhZ2VSZXBvcnRTZXJ2aWNlQ2xpZW50LCBEZXNjcmliZVJlcG9ydERlZmluaXRpb25zQ29tbWFuZCB9IGZyb20gXCJAYXdzLXNkay9jbGllbnQtY29zdC1hbmQtdXNhZ2UtcmVwb3J0LXNlcnZpY2VcIjtcbmNvbnN0IGNoZWNrTGVnYWN5Q3VyID0gYXN5bmMgKHJlZ2lvbikgPT4ge1xuICAgIC8vIFNldCB1cCBBV1MgU0RLIGNsaWVudCBmb3IgQ29zdCBFeHBsb3JlclxuICAgIGNvbnN0IGN1ckNsaWVudCA9IG5ldyBDb3N0QW5kVXNhZ2VSZXBvcnRTZXJ2aWNlQ2xpZW50KHsgcmVnaW9uIH0pO1xuICAgIGxldCBpc0xlZ2FjeUN1clNldHVwID0gZmFsc2U7XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gQ2hlY2sgaWYgQ29zdCBFeHBsb3JlciBpcyBzZXQgdXBcbiAgICAgICAgY29uc3QgaW5wdXQgPSB7fTtcbiAgICAgICAgY29uc3QgY29tbWFuZCA9IG5ldyBEZXNjcmliZVJlcG9ydERlZmluaXRpb25zQ29tbWFuZChpbnB1dCk7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgY3VyQ2xpZW50LnNlbmQoY29tbWFuZCk7XG4gICAgICAgIGlmIChyZXNwb25zZS5SZXBvcnREZWZpbml0aW9ucyAmJiByZXNwb25zZS5SZXBvcnREZWZpbml0aW9ucy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBpc0xlZ2FjeUN1clNldHVwID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyBpc0xlZ2FjeUN1clNldHVwIH07XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAvLyBDaGVjayBpZiB0aGUgZXJyb3IgaXMgcmVsYXRlZCB0byBDb3N0IEV4cGxvcmVyIHNldHVwXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoYEVycm9yOiAke2Vycm9yfWApO1xuICAgICAgICBpc0xlZ2FjeUN1clNldHVwID0gZmFsc2U7XG4gICAgICAgIHJldHVybiB7IGlzTGVnYWN5Q3VyU2V0dXAgfTtcbiAgICB9XG4gICAgZmluYWxseSB7XG4gICAgICAgIC8vIENsb3NlIHRoZSBBV1MgU0RLIGNsaWVudFxuICAgICAgICBjdXJDbGllbnQuZGVzdHJveSgpO1xuICAgIH1cbn07XG5leHBvcnQgZGVmYXVsdCBjaGVja0xlZ2FjeUN1cjtcbiIsImltcG9ydCB7IE9yZ2FuaXphdGlvbnNDbGllbnQsIExpc3RSb290c0NvbW1hbmQgfSBmcm9tIFwiQGF3cy1zZGsvY2xpZW50LW9yZ2FuaXphdGlvbnNcIjtcbmFzeW5jIGZ1bmN0aW9uIGdldEVuYWJsZWRPcmdQb2xpY3lUeXBlcyhyZWdpb24pIHtcbiAgICBjb25zdCBvcmdDbGllbnQgPSBuZXcgT3JnYW5pemF0aW9uc0NsaWVudCh7IHJlZ2lvbiB9KTtcbiAgICBsZXQgcG9saWN5VHlwZXNFbmFibGVkID0ge1xuICAgICAgICBzY3BFbmFibGVkOiBmYWxzZSxcbiAgICAgICAgdGFnUG9saWN5RW5hYmxlZDogZmFsc2UsXG4gICAgICAgIGJhY2t1cFBvbGljeUVuYWJsZWQ6IGZhbHNlXG4gICAgfTtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCBpbnB1dCA9IHt9O1xuICAgICAgICBjb25zdCBjb21tYW5kID0gbmV3IExpc3RSb290c0NvbW1hbmQoaW5wdXQpO1xuICAgICAgICBjb25zdCByb290cyA9IGF3YWl0IG9yZ0NsaWVudC5zZW5kKGNvbW1hbmQpO1xuICAgICAgICBpZiAocm9vdHMuUm9vdHMpIHtcbiAgICAgICAgICAgIGlmIChyb290cy5Sb290c1swXS5Qb2xpY3lUeXBlcykge1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgZW5hYmxlZFBvbGljeSBvZiByb290cy5Sb290c1swXS5Qb2xpY3lUeXBlcykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZW5hYmxlZFBvbGljeS5UeXBlID09ICdTRVJWSUNFX0NPTlRST0xfUE9MSUNZJyAmJiBlbmFibGVkUG9saWN5LlN0YXR1cyA9PSAnRU5BQkxFRCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvbGljeVR5cGVzRW5hYmxlZC5zY3BFbmFibGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoZW5hYmxlZFBvbGljeS5UeXBlID09ICdUQUdfUE9MSUNZJyAmJiBlbmFibGVkUG9saWN5LlN0YXR1cyA9PSAnRU5BQkxFRCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvbGljeVR5cGVzRW5hYmxlZC50YWdQb2xpY3lFbmFibGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoZW5hYmxlZFBvbGljeS5UeXBlID09ICdCQUNLVVBfUE9MSUNZJyAmJiBlbmFibGVkUG9saWN5LlN0YXR1cyA9PSAnRU5BQkxFRCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvbGljeVR5cGVzRW5hYmxlZC5iYWNrdXBQb2xpY3lFbmFibGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gLy8gZW5kIGZvclxuICAgICAgICAgICAgfSAvLyBlbmQgaWZcbiAgICAgICAgfSAvLyBlbmQgaWZcbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoYEFuIGVycm9yIG9jY3VycmVkOiAke2Vycm9yfWApO1xuICAgIH1cbiAgICBmaW5hbGx5IHtcbiAgICAgICAgb3JnQ2xpZW50LmRlc3Ryb3koKTtcbiAgICAgICAgcmV0dXJuIHBvbGljeVR5cGVzRW5hYmxlZDtcbiAgICB9XG59XG5leHBvcnQgZGVmYXVsdCBnZXRFbmFibGVkT3JnUG9saWN5VHlwZXM7XG4iLCJpbXBvcnQgeyBPcmdhbml6YXRpb25zQ2xpZW50LCBMaXN0QVdTU2VydmljZUFjY2Vzc0Zvck9yZ2FuaXphdGlvbkNvbW1hbmQgfSBmcm9tIFwiQGF3cy1zZGsvY2xpZW50LW9yZ2FuaXphdGlvbnNcIjtcbmFzeW5jIGZ1bmN0aW9uIGdldEVuYWJsZWRPcmdTZXJ2aWNlcyhyZWdpb24pIHtcbiAgICBjb25zdCBkaXNjb3ZlcmVkT3JnU2VydmljZXMgPSBbXTtcbiAgICBjb25zdCBvcmdDbGllbnQgPSBuZXcgT3JnYW5pemF0aW9uc0NsaWVudCh7IHJlZ2lvbiB9KTtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCBvcmdTZXJ2aWNlQWNjZXNzQ29tbWFuZCA9IG5ldyBMaXN0QVdTU2VydmljZUFjY2Vzc0Zvck9yZ2FuaXphdGlvbkNvbW1hbmQoe30pO1xuICAgICAgICBjb25zdCBvcmdTZXJ2aWNlQWNjZXNzUmVzcG9uc2UgPSBhd2FpdCBvcmdDbGllbnQuc2VuZChvcmdTZXJ2aWNlQWNjZXNzQ29tbWFuZCk7XG4gICAgICAgIGlmIChvcmdTZXJ2aWNlQWNjZXNzUmVzcG9uc2UuRW5hYmxlZFNlcnZpY2VQcmluY2lwYWxzICYmIG9yZ1NlcnZpY2VBY2Nlc3NSZXNwb25zZS5FbmFibGVkU2VydmljZVByaW5jaXBhbHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgb3JnU2VydmljZUFjY2Vzc1Jlc3BvbnNlLkVuYWJsZWRTZXJ2aWNlUHJpbmNpcGFscztcbiAgICAgICAgICAgIGZvciAoY29uc3Qgb3JnU2VydmljZSBvZiBvcmdTZXJ2aWNlQWNjZXNzUmVzcG9uc2UuRW5hYmxlZFNlcnZpY2VQcmluY2lwYWxzKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZm91bmRPcmdTZXJ2aWNlID0geyBzZXJ2aWNlOiBvcmdTZXJ2aWNlLlNlcnZpY2VQcmluY2lwYWwgPz8gXCJcIiB9O1xuICAgICAgICAgICAgICAgIGRpc2NvdmVyZWRPcmdTZXJ2aWNlcy5wdXNoKGZvdW5kT3JnU2VydmljZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGNoZWNraW5nIHNlcnZpY2UgYWNjZXNzOicsIGVycm9yKTtcbiAgICB9XG4gICAgZmluYWxseSB7XG4gICAgICAgIG9yZ0NsaWVudC5kZXN0cm95KCk7XG4gICAgICAgIHJldHVybiBkaXNjb3ZlcmVkT3JnU2VydmljZXM7XG4gICAgfVxufVxuO1xuZXhwb3J0IGRlZmF1bHQgZ2V0RW5hYmxlZE9yZ1NlcnZpY2VzO1xuIiwiaW1wb3J0IHsgT3JnYW5pemF0aW9uc0NsaWVudCwgTGlzdERlbGVnYXRlZEFkbWluaXN0cmF0b3JzQ29tbWFuZCwgTGlzdERlbGVnYXRlZFNlcnZpY2VzRm9yQWNjb3VudENvbW1hbmQgfSBmcm9tIFwiQGF3cy1zZGsvY2xpZW50LW9yZ2FuaXphdGlvbnNcIjtcbmFzeW5jIGZ1bmN0aW9uIGdldE9yZ0RhQWNjb3VudHMoKSB7XG4gICAgbGV0IG9yZ0RhRGV0YWlscyA9IFtdO1xuICAgIGNvbnN0IG9yZ0NsaWVudCA9IG5ldyBPcmdhbml6YXRpb25zQ2xpZW50KHsgcmVnaW9uOiAndXMtZWFzdC0xJyB9KTtcbiAgICBsZXQgb3JnRGFEZXRhaWwgPSB7fTtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCBjb21tYW5kID0gbmV3IExpc3REZWxlZ2F0ZWRBZG1pbmlzdHJhdG9yc0NvbW1hbmQoe30pO1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IG9yZ0NsaWVudC5zZW5kKGNvbW1hbmQpO1xuICAgICAgICBpZiAocmVzcG9uc2UuRGVsZWdhdGVkQWRtaW5pc3RyYXRvcnMpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgZGEgb2YgcmVzcG9uc2UuRGVsZWdhdGVkQWRtaW5pc3RyYXRvcnMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBpbnB1dCA9IHsgQWNjb3VudElkOiBkYS5JZCB9O1xuICAgICAgICAgICAgICAgIGNvbnN0IGNvbW1hbmQgPSBuZXcgTGlzdERlbGVnYXRlZFNlcnZpY2VzRm9yQWNjb3VudENvbW1hbmQoaW5wdXQpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGFjY291bnRSZXNwb25zZSA9IGF3YWl0IG9yZ0NsaWVudC5zZW5kKGNvbW1hbmQpO1xuICAgICAgICAgICAgICAgIGlmIChhY2NvdW50UmVzcG9uc2UuRGVsZWdhdGVkU2VydmljZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgb3JnRGFEZXRhaWwgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXJ2aWNlczogYWNjb3VudFJlc3BvbnNlLkRlbGVnYXRlZFNlcnZpY2VzLFxuICAgICAgICAgICAgICAgICAgICAgICAgYWNjb3VudE5hbWU6IGRhLk5hbWVcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgb3JnRGFEZXRhaWxzLnB1c2gob3JnRGFEZXRhaWwpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5sb2coYEVycm9yIGxvb2tpbmcgZm9yIGRlbGVnYXRlZCBzZXJ2aWNlcy5gKTtcbiAgICB9XG4gICAgZmluYWxseSB7XG4gICAgICAgIG9yZ0NsaWVudC5kZXN0cm95KCk7XG4gICAgfVxuICAgIHJldHVybiBvcmdEYURldGFpbHM7XG59XG47XG5leHBvcnQgZGVmYXVsdCBnZXRPcmdEYUFjY291bnRzO1xuIiwiaW1wb3J0IHsgQ2xvdWRGb3JtYXRpb25DbGllbnQsIERlc2NyaWJlT3JnYW5pemF0aW9uc0FjY2Vzc0NvbW1hbmQsIH0gZnJvbSBcIkBhd3Mtc2RrL2NsaWVudC1jbG91ZGZvcm1hdGlvblwiO1xuYXN5bmMgZnVuY3Rpb24gZ2V0T3JnQ2xvdWRGb3JtYXRpb24ocmVnaW9uKSB7XG4gICAgbGV0IG9yZ0NmblN0YXR1cyA9IHtcbiAgICAgICAgc3RhdHVzOiBcImRpc2FibGVkXCJcbiAgICB9O1xuICAgIGNvbnN0IGNsb3VkRm9ybWF0aW9uQ2xpZW50ID0gbmV3IENsb3VkRm9ybWF0aW9uQ2xpZW50KHsgcmVnaW9uIH0pO1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGRlc2NyaWJlT3JnQWNjZXNzSW5wdXQgPSB7fTtcbiAgICAgICAgY29uc3QgY29tbWFuZCA9IG5ldyBEZXNjcmliZU9yZ2FuaXphdGlvbnNBY2Nlc3NDb21tYW5kKGRlc2NyaWJlT3JnQWNjZXNzSW5wdXQpO1xuICAgICAgICBjb25zdCBjbG91ZEZvcm1hdGlvbk9yZ0FjY2VzcyA9IGF3YWl0IGNsb3VkRm9ybWF0aW9uQ2xpZW50LnNlbmQoY29tbWFuZCk7XG4gICAgICAgIC8vY29uc29sZS5sb2coXCJDbG91ZEZvcm1hdGlvbiBhY3RpdmF0aW9uIHN0YXR1czogXCIsIGNsb3VkRm9ybWF0aW9uT3JnQWNjZXNzLlN0YXR1cylcbiAgICAgICAgb3JnQ2ZuU3RhdHVzLnN0YXR1cyA9IGNsb3VkRm9ybWF0aW9uT3JnQWNjZXNzLlN0YXR1cyA/PyBcImRpc2FibGVkXCI7XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmxvZyhgRXJyb3I6ICR7ZXJyb3J9YCk7XG4gICAgICAgIC8vdGhyb3cgbmV3IEVycm9yKGBFcnJvcjogJHtlcnJvcn1gKTtcbiAgICB9XG4gICAgZmluYWxseSB7XG4gICAgICAgIGNsb3VkRm9ybWF0aW9uQ2xpZW50LmRlc3Ryb3koKTtcbiAgICAgICAgcmV0dXJuIG9yZ0NmblN0YXR1cztcbiAgICB9XG59XG47XG5leHBvcnQgZGVmYXVsdCBnZXRPcmdDbG91ZEZvcm1hdGlvbjtcbiIsImltcG9ydCB7IENvbnRyb2xUb3dlckNsaWVudCwgTGlzdExhbmRpbmdab25lc0NvbW1hbmQsIEdldExhbmRpbmdab25lQ29tbWFuZCB9IGZyb20gXCJAYXdzLXNkay9jbGllbnQtY29udHJvbHRvd2VyXCI7XG5hc3luYyBmdW5jdGlvbiBnZXRDb250cm9sVG93ZXIocmVnaW9uKSB7XG4gICAgbGV0IGNvbnRyb2xUb3dlckluZm8gPSB7fTtcbiAgICBjb25zdCBjb250cm9sVG93ZXJDbGllbnQgPSBuZXcgQ29udHJvbFRvd2VyQ2xpZW50KHsgcmVnaW9uIH0pO1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGNvbW1hbmQgPSBuZXcgTGlzdExhbmRpbmdab25lc0NvbW1hbmQoe30pO1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGNvbnRyb2xUb3dlckNsaWVudC5zZW5kKGNvbW1hbmQpO1xuICAgICAgICBjb25zb2xlLmxvZyhKU09OLnN0cmluZ2lmeShyZXNwb25zZS5sYW5kaW5nWm9uZXMsIG51bGwsIDIpKTtcbiAgICAgICAgaWYgKHJlc3BvbnNlLmxhbmRpbmdab25lcyAmJiByZXNwb25zZS5sYW5kaW5nWm9uZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgY29uc3QgaW5wdXQgPSB7XG4gICAgICAgICAgICAgICAgbGFuZGluZ1pvbmVJZGVudGlmaWVyOiByZXNwb25zZS5sYW5kaW5nWm9uZXNbMF0uYXJuLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IGx6UmVnaW9uID0gcmVzcG9uc2UubGFuZGluZ1pvbmVzWzBdLmFybj8udG9TdHJpbmcoKS5zcGxpdCgnOicpWzNdID8/IFwiXCI7XG4gICAgICAgICAgICBpZiAobHpSZWdpb24pIHtcbiAgICAgICAgICAgICAgICBjb250cm9sVG93ZXJJbmZvLmNvbnRyb2xUb3dlclJlZ2lvbiA9IGx6UmVnaW9uO1xuICAgICAgICAgICAgICAgIGNvbnN0IGNvbnRyb2xUb3dlckNsaWVudFJlZ2lvbiA9IG5ldyBDb250cm9sVG93ZXJDbGllbnQoeyByZWdpb246IGx6UmVnaW9uIH0pO1xuICAgICAgICAgICAgICAgIGNvbnN0IGNvbW1hbmQgPSBuZXcgR2V0TGFuZGluZ1pvbmVDb21tYW5kKGlucHV0KTtcbiAgICAgICAgICAgICAgICBjb25zdCBselJlc3BvbnNlID0gYXdhaXQgY29udHJvbFRvd2VyQ2xpZW50UmVnaW9uLnNlbmQoY29tbWFuZCk7XG4gICAgICAgICAgICAgICAgaWYgKGx6UmVzcG9uc2UubGFuZGluZ1pvbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coSlNPTi5zdHJpbmdpZnkobHpSZXNwb25zZS5sYW5kaW5nWm9uZSwgbnVsbCwgMikpO1xuICAgICAgICAgICAgICAgICAgICBjb250cm9sVG93ZXJJbmZvLnN0YXR1cyA9IGx6UmVzcG9uc2UubGFuZGluZ1pvbmUuc3RhdHVzO1xuICAgICAgICAgICAgICAgICAgICBjb250cm9sVG93ZXJJbmZvLmxhdGVzdEF2YWlsYWJsZVZlcnNpb24gPSBselJlc3BvbnNlLmxhbmRpbmdab25lLmxhdGVzdEF2YWlsYWJsZVZlcnNpb247XG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xUb3dlckluZm8uZGVwbG95ZWRWZXJzaW9uID0gbHpSZXNwb25zZS5sYW5kaW5nWm9uZS52ZXJzaW9uO1xuICAgICAgICAgICAgICAgICAgICBjb250cm9sVG93ZXJJbmZvLmRyaWZ0U3RhdHVzID0gbHpSZXNwb25zZS5sYW5kaW5nWm9uZS5kcmlmdFN0YXR1cz8uc3RhdHVzO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihgRXJyb3IgY2hlY2tpbmcgQ29udHJvbCBUb3dlciBpbiAke3JlZ2lvbn06YCwgZXJyb3IpO1xuICAgIH1cbiAgICBmaW5hbGx5IHtcbiAgICAgICAgY29udHJvbFRvd2VyQ2xpZW50LmRlc3Ryb3koKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRyb2xUb3dlckluZm87XG59XG5leHBvcnQgZGVmYXVsdCBnZXRDb250cm9sVG93ZXI7XG4iLCJpbXBvcnQgeyBTU09BZG1pbkNsaWVudCwgTGlzdEluc3RhbmNlc0NvbW1hbmQgfSBmcm9tIFwiQGF3cy1zZGsvY2xpZW50LXNzby1hZG1pblwiO1xuYXN5bmMgZnVuY3Rpb24gZ2V0SWRjSW5mbyhyZWdpb25MaXN0KSB7XG4gICAgbGV0IGlkY0RldGFpbHMgPSB7IGZvdW5kOiBmYWxzZSB9O1xuICAgIGZvciAoY29uc3QgcmVnaW9uIG9mIHJlZ2lvbkxpc3QpIHtcbiAgICAgICAgY29uc3Qgc3NvQWRtaW5DbGllbnQgPSBuZXcgU1NPQWRtaW5DbGllbnQoeyByZWdpb24gfSk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBzc29JbnB1dCA9IHtcbiAgICAgICAgICAgICAgICBNYXhSZXN1bHRzOiBOdW1iZXIoXCIxMDBcIilcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCBjb21tYW5kID0gbmV3IExpc3RJbnN0YW5jZXNDb21tYW5kKHNzb0lucHV0KTtcbiAgICAgICAgICAgIGNvbnN0IHNzb0luc3RhbmNlUmVzcG9uc2UgPSBhd2FpdCBzc29BZG1pbkNsaWVudC5zZW5kKGNvbW1hbmQpO1xuICAgICAgICAgICAgaWYgKHNzb0luc3RhbmNlUmVzcG9uc2UuSW5zdGFuY2VzICYmIHNzb0luc3RhbmNlUmVzcG9uc2UuSW5zdGFuY2VzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBjb25zdCBzc29JbnN0YW5jZSA9IHNzb0luc3RhbmNlUmVzcG9uc2UuSW5zdGFuY2VzWzBdO1xuICAgICAgICAgICAgICAgIGlkY0RldGFpbHMuZm91bmQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGlkY0RldGFpbHMucmVnaW9uID0gcmVnaW9uO1xuICAgICAgICAgICAgICAgIGlkY0RldGFpbHMuYXJuID0gc3NvSW5zdGFuY2UuSW5zdGFuY2VBcm47XG4gICAgICAgICAgICAgICAgaWRjRGV0YWlscy5pZCA9IHNzb0luc3RhbmNlLklkZW50aXR5U3RvcmVJZDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGBFcnJvciBsb29raW5nIGZvciBBV1MgSWRlbnRpdHkgQ2VudGVyIGRldGFpbHMgaW4gcmVnaW9uICR7cmVnaW9ufWApO1xuICAgICAgICB9XG4gICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgc3NvQWRtaW5DbGllbnQuZGVzdHJveSgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBpZGNEZXRhaWxzO1xufVxuO1xuZXhwb3J0IGRlZmF1bHQgZ2V0SWRjSW5mbztcbiIsImltcG9ydCB7IE9yZ2FuaXphdGlvbnNDbGllbnQsIERlc2NyaWJlT3JnYW5pemF0aW9uQ29tbWFuZCwgTGlzdFJvb3RzQ29tbWFuZCB9IGZyb20gXCJAYXdzLXNkay9jbGllbnQtb3JnYW5pemF0aW9uc1wiO1xuYXN5bmMgZnVuY3Rpb24gZ2V0T3JnRGV0YWlscyhyZWdpb24pIHtcbiAgICBjb25zdCBvcmdDbGllbnQgPSBuZXcgT3JnYW5pemF0aW9uc0NsaWVudCh7IHJlZ2lvbiB9KTtcbiAgICBsZXQgb3JnRGV0YWlscyA9IHt9O1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IG9yZ0Rlc2NyaWJlQ29tbWFuZCA9IG5ldyBEZXNjcmliZU9yZ2FuaXphdGlvbkNvbW1hbmQoe30pO1xuICAgICAgICBjb25zdCBvcmdEYXRhID0gYXdhaXQgb3JnQ2xpZW50LnNlbmQob3JnRGVzY3JpYmVDb21tYW5kKTtcbiAgICAgICAgaWYgKG9yZ0RhdGEuT3JnYW5pemF0aW9uKSB7XG4gICAgICAgICAgICBvcmdEZXRhaWxzLmlkID0gb3JnRGF0YS5Pcmdhbml6YXRpb24uSWQgPz8gXCJcIjtcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGBPcmdhbml6YXRpb24gSUQ6ICR7b3JnRGV0YWlscy5pZH1gICk7XG4gICAgICAgICAgICBvcmdEZXRhaWxzLmFybiA9IG9yZ0RhdGEuT3JnYW5pemF0aW9uLkFybiA/PyBcIlwiO1xuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coYE9yZ2FuaXphdGlvbiBBUk46ICR7b3JnRGV0YWlscy5hcm59YCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY29tbWFuZCA9IG5ldyBMaXN0Um9vdHNDb21tYW5kKHt9KTtcbiAgICAgICAgY29uc3Qgcm9vdHMgPSBhd2FpdCBvcmdDbGllbnQuc2VuZChjb21tYW5kKTtcbiAgICAgICAgaWYgKHJvb3RzLlJvb3RzKSB7XG4gICAgICAgICAgICBvcmdEZXRhaWxzLnJvb3RPdUlkID0gcm9vdHMuUm9vdHNbMF0uSWQ7XG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhgQVdTIE9yZyByb290IG91IGlkOiAke29yZ0RldGFpbHMucm9vdE91SWR9YClcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdObyBpbmZvIGZvdW5kIGZvciB5b3VyIEFXUyBPcmdhbml6YXRpb24uJyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoYEFuIGVycm9yIG9jY3VycmVkOiAke2Vycm9yfWApO1xuICAgIH1cbiAgICBmaW5hbGx5IHtcbiAgICAgICAgb3JnQ2xpZW50LmRlc3Ryb3koKTtcbiAgICAgICAgcmV0dXJuIG9yZ0RldGFpbHM7XG4gICAgfVxufVxuZXhwb3J0IGRlZmF1bHQgZ2V0T3JnRGV0YWlscztcbiIsImltcG9ydCB7IE9yZ2FuaXphdGlvbnNDbGllbnQsIExpc3RPcmdhbml6YXRpb25hbFVuaXRzRm9yUGFyZW50Q29tbWFuZCwgTGlzdEFjY291bnRzRm9yUGFyZW50Q29tbWFuZCB9IGZyb20gXCJAYXdzLXNkay9jbGllbnQtb3JnYW5pemF0aW9uc1wiO1xuYXN5bmMgZnVuY3Rpb24gZ2V0T3JnVG9wTGV2ZWxPdXMocmVnaW9uLCByb290T3VJZCkge1xuICAgIGNvbnN0IG9yZ0NsaWVudCA9IG5ldyBPcmdhbml6YXRpb25zQ2xpZW50KHsgcmVnaW9uIH0pO1xuICAgIGxldCB0b3BMZXZlbE91cyA9IFtdO1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGxpc3RPVXNDb21tYW5kID0gbmV3IExpc3RPcmdhbml6YXRpb25hbFVuaXRzRm9yUGFyZW50Q29tbWFuZCh7XG4gICAgICAgICAgICBQYXJlbnRJZDogcm9vdE91SWQsXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBsaXN0T1VzUmVzcG9uc2UgPSBhd2FpdCBvcmdDbGllbnQuc2VuZChsaXN0T1VzQ29tbWFuZCk7XG4gICAgICAgIGlmIChsaXN0T1VzUmVzcG9uc2UuT3JnYW5pemF0aW9uYWxVbml0cykge1xuICAgICAgICAgICAgZm9yIChjb25zdCBvdSBvZiBsaXN0T1VzUmVzcG9uc2UuT3JnYW5pemF0aW9uYWxVbml0cykge1xuICAgICAgICAgICAgICAgIGxldCB0b3BMZXZlbE91ID0ge1xuICAgICAgICAgICAgICAgICAgICBpZDogb3UuSWQsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IG91Lk5hbWVcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGNvbnN0IGFjY291bnRSZXNwb25zZSA9IGF3YWl0IG9yZ0NsaWVudC5zZW5kKG5ldyBMaXN0QWNjb3VudHNGb3JQYXJlbnRDb21tYW5kKHsgUGFyZW50SWQ6IG91LklkIH0pKTtcbiAgICAgICAgICAgICAgICBpZiAoYWNjb3VudFJlc3BvbnNlLkFjY291bnRzICYmIGFjY291bnRSZXNwb25zZS5BY2NvdW50cy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHRvcExldmVsT3UuYWNjb3VudHMgPSBhY2NvdW50UmVzcG9uc2UuQWNjb3VudHM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRvcExldmVsT3VzLnB1c2godG9wTGV2ZWxPdSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGNoZWNraW5nIHNlcnZpY2UgYWNjZXNzOicsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgICBmaW5hbGx5IHtcbiAgICAgICAgb3JnQ2xpZW50LmRlc3Ryb3koKTtcbiAgICB9XG4gICAgcmV0dXJuIHRvcExldmVsT3VzO1xufVxuO1xuZXhwb3J0IGRlZmF1bHQgZ2V0T3JnVG9wTGV2ZWxPdXM7XG4iLCJpbXBvcnQgeyBPcmdhbml6YXRpb25zQ2xpZW50LCBMaXN0QWNjb3VudHNDb21tYW5kIH0gZnJvbSAnQGF3cy1zZGsvY2xpZW50LW9yZ2FuaXphdGlvbnMnO1xuYXN5bmMgZnVuY3Rpb24gZ2V0T3JnTWVtYmVyQWNjb3VudHMoKSB7XG4gICAgbGV0IG9yZ01lbWJlckFjY291bnRJbmZvID0gW107XG4gICAgY29uc3Qgb3Jnc0NsaWVudCA9IG5ldyBPcmdhbml6YXRpb25zQ2xpZW50KHsgcmVnaW9uOiAndXMtZWFzdC0xJyB9KTtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IG9yZ3NDbGllbnQuc2VuZChuZXcgTGlzdEFjY291bnRzQ29tbWFuZCh7fSkpO1xuICAgICAgICBpZiAocmVzcG9uc2UuQWNjb3VudHMgJiYgcmVzcG9uc2UuQWNjb3VudHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgZm9yIChjb25zdCBhY2NvdW50IG9mIHJlc3BvbnNlLkFjY291bnRzKSB7XG4gICAgICAgICAgICAgICAgbGV0IG9yZ01lbWJlckFjY291bnQgPSB7XG4gICAgICAgICAgICAgICAgICAgIGFjY291bnROYW1lOiBhY2NvdW50Lk5hbWUsXG4gICAgICAgICAgICAgICAgICAgIGFjY291bnRFbWFpbDogYWNjb3VudC5FbWFpbCxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIG9yZ01lbWJlckFjY291bnRJbmZvLnB1c2gob3JnTWVtYmVyQWNjb3VudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGxpc3RpbmcgQVdTIGFjY291bnRzOicsIGVycm9yKTtcbiAgICB9XG4gICAgZmluYWxseSB7XG4gICAgICAgIG9yZ3NDbGllbnQuZGVzdHJveSgpO1xuICAgIH1cbiAgICByZXR1cm4gb3JnTWVtYmVyQWNjb3VudEluZm87XG59XG5leHBvcnQgZGVmYXVsdCBnZXRPcmdNZW1iZXJBY2NvdW50cztcbiIsImltcG9ydCB7IElBTUNsaWVudCwgTGlzdFVzZXJzQ29tbWFuZCwgTGlzdEFjY2Vzc0tleXNDb21tYW5kLCBHZXRBY2Nlc3NLZXlMYXN0VXNlZENvbW1hbmQgfSBmcm9tIFwiQGF3cy1zZGsvY2xpZW50LWlhbVwiO1xuLy8gZnVuY3Rpb24gbGlzdCBhbGwgSUFNIHVzZXJzIGFuZCBpZiB0aGV5IGhhdmUga2V5cyBpbiB0aGUgbWFuYWdlbWVudCBhY2NvdW50XG5jb25zdCBjaGVja0lhbVVzZXJzID0gYXN5bmMgKCkgPT4ge1xuICAgIC8vIFNldCB0byB1cy1lYXN0LTEgYXMgSUFNIGlzIGdsb2JhbCBhbmQgcmVnaW9uIGlzbid0IGEgY29uY2VyblxuICAgIGNvbnN0IGlhbUNsaWVudCA9IG5ldyBJQU1DbGllbnQoeyByZWdpb246ICd1cy1lYXN0LTEnIH0pO1xuICAgIGNvbnN0IGlhbVVzZXJJbmZvID0gW107XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgbGlzdFVzZXJzQ29tbWFuZCA9IG5ldyBMaXN0VXNlcnNDb21tYW5kKHt9KTtcbiAgICAgICAgY29uc3QgbGlzdFVzZXJzUmVzcG9uc2UgPSBhd2FpdCBpYW1DbGllbnQuc2VuZChsaXN0VXNlcnNDb21tYW5kKTtcbiAgICAgICAgZm9yIChjb25zdCB1c2VyIG9mIGxpc3RVc2Vyc1Jlc3BvbnNlLlVzZXJzIHx8IFtdKSB7XG4gICAgICAgICAgICBjb25zdCB1c2VyTmFtZSA9IHVzZXIuVXNlck5hbWUgfHwgXCJcIjtcbiAgICAgICAgICAgIGNvbnN0IGxpc3RBY2Nlc3NLZXlzQ29tbWFuZCA9IG5ldyBMaXN0QWNjZXNzS2V5c0NvbW1hbmQoe1xuICAgICAgICAgICAgICAgIFVzZXJOYW1lOiB1c2VyTmFtZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY29uc3QgbGlzdEFjY2Vzc0tleXNSZXNwb25zZSA9IGF3YWl0IGlhbUNsaWVudC5zZW5kKGxpc3RBY2Nlc3NLZXlzQ29tbWFuZCk7XG4gICAgICAgICAgICBjb25zdCBhY2Nlc3NLZXlzID0gbGlzdEFjY2Vzc0tleXNSZXNwb25zZS5BY2Nlc3NLZXlNZXRhZGF0YSB8fCBbXTtcbiAgICAgICAgICAgIGlmIChhY2Nlc3NLZXlzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGFjY2Vzc0tleSBvZiBhY2Nlc3NLZXlzKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGFjY2Vzc0tleUlkID0gYWNjZXNzS2V5LkFjY2Vzc0tleUlkIHx8IFwiXCI7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGdldExhc3RVc2VkQ29tbWFuZCA9IG5ldyBHZXRBY2Nlc3NLZXlMYXN0VXNlZENvbW1hbmQoe1xuICAgICAgICAgICAgICAgICAgICAgICAgQWNjZXNzS2V5SWQ6IGFjY2Vzc0tleUlkLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbGFzdFVzZWRSZXNwb25zZSA9IGF3YWl0IGlhbUNsaWVudC5zZW5kKGdldExhc3RVc2VkQ29tbWFuZCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGZvdW5kVXNlckluZm8gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB1c2VyTmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjY2Vzc0tleUlkLFxuICAgICAgICAgICAgICAgICAgICAgICAgbGFzdFVzZWQ6IGxhc3RVc2VkUmVzcG9uc2UgJiYgbGFzdFVzZWRSZXNwb25zZS5BY2Nlc3NLZXlMYXN0VXNlZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gYCR7bGFzdFVzZWRSZXNwb25zZS5BY2Nlc3NLZXlMYXN0VXNlZC5MYXN0VXNlZERhdGV9YCB8fCBcIk5vdCBhdmFpbGFibGVcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogXCJOb3QgYXZhaWxhYmxlXCIsXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIGlhbVVzZXJJbmZvLnB1c2goZm91bmRVc2VySW5mbyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZm91bmRVc2VySW5mbyA9IHtcbiAgICAgICAgICAgICAgICAgICAgdXNlck5hbWVcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGlhbVVzZXJJbmZvLnB1c2goZm91bmRVc2VySW5mbyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvcjpcIiwgZXJyb3IpO1xuICAgIH1cbiAgICBmaW5hbGx5IHtcbiAgICAgICAgaWFtQ2xpZW50LmRlc3Ryb3koKTtcbiAgICB9XG4gICAgcmV0dXJuIGlhbVVzZXJJbmZvO1xufTtcbmV4cG9ydCBkZWZhdWx0IGNoZWNrSWFtVXNlcnM7XG4iLCJpbXBvcnQgeyBFQzJDbGllbnQsIERlc2NyaWJlSW5zdGFuY2VzQ29tbWFuZCB9IGZyb20gXCJAYXdzLXNkay9jbGllbnQtZWMyXCI7XG5hc3luYyBmdW5jdGlvbiBjaGVja0VjMkV4aXN0cyhyZWdpb25zKSB7XG4gICAgbGV0IGVjMlZhbGlkYXRpb24gPSBbXTtcbiAgICBmb3IgKGNvbnN0IHJlZ2lvbiBvZiByZWdpb25zKSB7XG4gICAgICAgIGNvbnN0IGVjMkNsaWVudCA9IG5ldyBFQzJDbGllbnQoeyByZWdpb24gfSk7XG4gICAgICAgIGNvbnN0IGNvbW1hbmQgPSBuZXcgRGVzY3JpYmVJbnN0YW5jZXNDb21tYW5kKHt9KTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZWMyQ2xpZW50LnNlbmQoY29tbWFuZCk7XG4gICAgICAgICAgICBpZiAocmVzcG9uc2UuUmVzZXJ2YXRpb25zKSB7XG4gICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLlJlc2VydmF0aW9ucy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coYFdBUk5JTkc6IEluc3RhbmNlKHMpIGV4aXN0cyBpbiByZWdpb246ICR7cmVnaW9ufWApO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBlYzJGb3VuZCA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlZ2lvbjogcmVnaW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgZWMyRm91bmQ6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgZWMyVmFsaWRhdGlvbi5wdXNoKGVjMkZvdW5kKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGVjMkZvdW5kID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVnaW9uOiByZWdpb24sXG4gICAgICAgICAgICAgICAgICAgICAgICBlYzJGb3VuZDogZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgZWMyVmFsaWRhdGlvbi5wdXNoKGVjMkZvdW5kKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCBlYzJGb3VuZCA9IHtcbiAgICAgICAgICAgICAgICAgICAgcmVnaW9uOiByZWdpb24sXG4gICAgICAgICAgICAgICAgICAgIGVjMkZvdW5kOiBmYWxzZVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgZWMyVmFsaWRhdGlvbi5wdXNoKGVjMkZvdW5kKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGBFcnJvciBjaGVja2luZyBpbnN0YW5jZTogJHtlcnJvcn1gKTtcbiAgICAgICAgfVxuICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgIGVjMkNsaWVudC5kZXN0cm95KCk7XG4gICAgICAgIH1cbiAgICB9IC8vIGVuZCBmb3JcbiAgICByZXR1cm4gZWMyVmFsaWRhdGlvbjtcbn1cbjtcbmV4cG9ydCBkZWZhdWx0IGNoZWNrRWMyRXhpc3RzO1xuIiwiaW1wb3J0IHsgRUMyQ2xpZW50LCBEZXNjcmliZVZwY3NDb21tYW5kIH0gZnJvbSBcIkBhd3Mtc2RrL2NsaWVudC1lYzJcIjtcbmFzeW5jIGZ1bmN0aW9uIGNoZWNrVnBjRXhpc3RzKHJlZ2lvbnMpIHtcbiAgICBsZXQgdnBjVmFsaWRhdGlvbiA9IFtdO1xuICAgIGZvciAoY29uc3QgcmVnaW9uIG9mIHJlZ2lvbnMpIHtcbiAgICAgICAgY29uc3QgZWMyQ2xpZW50ID0gbmV3IEVDMkNsaWVudCh7IHJlZ2lvbiB9KTtcbiAgICAgICAgY29uc3QgY29tbWFuZCA9IG5ldyBEZXNjcmliZVZwY3NDb21tYW5kKHt9KTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZWMyQ2xpZW50LnNlbmQoY29tbWFuZCk7XG4gICAgICAgICAgICBpZiAocmVzcG9uc2UuVnBjcykge1xuICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5WcGNzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhgV0FSTklORzogVlBDKHMpIGV4aXN0cyBpbiByZWdpb246ICR7cmVnaW9ufWApO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB2cGNGb3VuZCA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlZ2lvbjogcmVnaW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgdnBjRm91bmQ6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgdnBjVmFsaWRhdGlvbi5wdXNoKHZwY0ZvdW5kKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHZwY0ZvdW5kID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVnaW9uOiByZWdpb24sXG4gICAgICAgICAgICAgICAgICAgICAgICB2cGNGb3VuZDogZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgdnBjVmFsaWRhdGlvbi5wdXNoKHZwY0ZvdW5kKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCB2cGNGb3VuZCA9IHtcbiAgICAgICAgICAgICAgICAgICAgcmVnaW9uOiByZWdpb24sXG4gICAgICAgICAgICAgICAgICAgIHZwY0ZvdW5kOiBmYWxzZVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgdnBjVmFsaWRhdGlvbi5wdXNoKHZwY0ZvdW5kKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGBFcnJvciBjaGVja2luZyBpbnN0YW5jZTogJHtlcnJvcn1gKTtcbiAgICAgICAgfVxuICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgIGVjMkNsaWVudC5kZXN0cm95KCk7XG4gICAgICAgIH1cbiAgICB9IC8vIGVuZCBmb3JcbiAgICByZXR1cm4gdnBjVmFsaWRhdGlvbjtcbn1cbjtcbmV4cG9ydCBkZWZhdWx0IGNoZWNrVnBjRXhpc3RzO1xuIiwiaW1wb3J0IHsgQ2xvdWRUcmFpbENsaWVudCwgRGVzY3JpYmVUcmFpbHNDb21tYW5kIH0gZnJvbSAnQGF3cy1zZGsvY2xpZW50LWNsb3VkdHJhaWwnO1xuYXN5bmMgZnVuY3Rpb24gY2hlY2tDbG91ZFRyYWlsRXhpc3RzKHJlZ2lvbnMpIHtcbiAgICBsZXQgY2xvdWRUcmFpbFZhbGlkYXRpb24gPSBbXTtcbiAgICBmb3IgKGNvbnN0IHJlZ2lvbiBvZiByZWdpb25zKSB7XG4gICAgICAgIGNvbnN0IGNsb3VkVHJhaWxDbGllbnQgPSBuZXcgQ2xvdWRUcmFpbENsaWVudCh7IHJlZ2lvbiB9KTtcbiAgICAgICAgY29uc3QgY2xvdWRUcmFpbERlc2NyaWJlQ29tbWFuZCA9IG5ldyBEZXNjcmliZVRyYWlsc0NvbW1hbmQoe30pO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgY2xvdWRUcmFpbFJlc3BvbnNlID0gYXdhaXQgY2xvdWRUcmFpbENsaWVudC5zZW5kKGNsb3VkVHJhaWxEZXNjcmliZUNvbW1hbmQpO1xuICAgICAgICAgICAgaWYgKGNsb3VkVHJhaWxSZXNwb25zZS50cmFpbExpc3QpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHRyYWlsIG9mIGNsb3VkVHJhaWxSZXNwb25zZS50cmFpbExpc3QpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHRyYWlsSW5mbyA9IHt9O1xuICAgICAgICAgICAgICAgICAgICBpZiAodHJhaWwuSG9tZVJlZ2lvbiA9PSByZWdpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coYHRyYWlsIGZvdW5kIGluICR7cmVnaW9ufWApXG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFpbEluZm8gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVnaW9uOiByZWdpb24sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhaWxGb3VuZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc09yZ1RyYWlsOiB0cmFpbC5Jc011bHRpUmVnaW9uVHJhaWwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNNdWx0aVJlZ2lvbjogdHJhaWwuSXNNdWx0aVJlZ2lvblRyYWlsXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJhaWxJbmZvID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZ2lvbjogcmVnaW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYWlsRm91bmQ6IGZhbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNsb3VkVHJhaWxWYWxpZGF0aW9uLnB1c2godHJhaWxJbmZvKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhgRXJyb3IgY2hlY2tpbmcgaW5zdGFuY2U6ICR7ZXJyb3J9YCk7XG4gICAgICAgIH1cbiAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICBjbG91ZFRyYWlsQ2xpZW50LmRlc3Ryb3koKTtcbiAgICAgICAgfVxuICAgIH0gLy8gZW5kIGZvciByZWdpb25zXG4gICAgcmV0dXJuIGNsb3VkVHJhaWxWYWxpZGF0aW9uO1xufVxuO1xuZXhwb3J0IGRlZmF1bHQgY2hlY2tDbG91ZFRyYWlsRXhpc3RzO1xuIiwiaW1wb3J0IHsgQ29uZmlnU2VydmljZUNsaWVudCwgRGVzY3JpYmVDb25maWd1cmF0aW9uUmVjb3JkZXJTdGF0dXNDb21tYW5kLCBEZXNjcmliZURlbGl2ZXJ5Q2hhbm5lbHNDb21tYW5kIH0gZnJvbSAnQGF3cy1zZGsvY2xpZW50LWNvbmZpZy1zZXJ2aWNlJztcbmFzeW5jIGZ1bmN0aW9uIGNoZWNrQ29uZmlnRXhpc3RzKHJlZ2lvbnMpIHtcbiAgICBsZXQgY29uZmlnRGV0YWlscyA9IFtdO1xuICAgIGZvciAoY29uc3QgcmVnaW9uIG9mIHJlZ2lvbnMpIHtcbiAgICAgICAgY29uc3QgY29uZmlnU2VydmljZUNsaWVudCA9IG5ldyBDb25maWdTZXJ2aWNlQ2xpZW50KHsgcmVnaW9uIH0pO1xuICAgICAgICBsZXQgY29uZmlnRGV0YWlsID0ge1xuICAgICAgICAgICAgcmVnaW9uOiByZWdpb24sXG4gICAgICAgICAgICBjb25maWdSZWNvcmRlckZvdW5kOiBmYWxzZSxcbiAgICAgICAgICAgIGNvbmZpZ0RlbGl2ZXJ5Q2hhbm5lbEZvdW5kOiBmYWxzZVxuICAgICAgICB9O1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gQ2hlY2sgaWYgQ29uZmlnIHJlY29yZGVyIGV4aXN0c1xuICAgICAgICAgICAgY29uc3QgcmVjb3JkZXJSZXNwb25zZSA9IGF3YWl0IGNvbmZpZ1NlcnZpY2VDbGllbnQuc2VuZChuZXcgRGVzY3JpYmVDb25maWd1cmF0aW9uUmVjb3JkZXJTdGF0dXNDb21tYW5kKHt9KSk7XG4gICAgICAgICAgICBjb25zdCByZWNvcmRlckV4aXN0cyA9IHJlY29yZGVyUmVzcG9uc2UuQ29uZmlndXJhdGlvblJlY29yZGVyc1N0YXR1cz8ubGVuZ3RoICE9PSAwO1xuICAgICAgICAgICAgaWYgKHJlY29yZGVyRXhpc3RzKSB7XG4gICAgICAgICAgICAgICAgY29uZmlnRGV0YWlsLmNvbmZpZ1JlY29yZGVyRm91bmQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gQ2hlY2sgaWYgQ29uZmlnIGRlbGl2ZXJ5IGNoYW5uZWwgZXhpc3RzXG4gICAgICAgICAgICBjb25zdCBjaGFubmVsUmVzcG9uc2UgPSBhd2FpdCBjb25maWdTZXJ2aWNlQ2xpZW50LnNlbmQobmV3IERlc2NyaWJlRGVsaXZlcnlDaGFubmVsc0NvbW1hbmQoe30pKTtcbiAgICAgICAgICAgIGNvbnN0IGNoYW5uZWxFeGlzdHMgPSBjaGFubmVsUmVzcG9uc2UuRGVsaXZlcnlDaGFubmVscz8ubGVuZ3RoICE9PSAwO1xuICAgICAgICAgICAgaWYgKGNoYW5uZWxFeGlzdHMpIHtcbiAgICAgICAgICAgICAgICBjb25maWdEZXRhaWwuY29uZmlnRGVsaXZlcnlDaGFubmVsRm91bmQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uZmlnRGV0YWlscy5wdXNoKGNvbmZpZ0RldGFpbCk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGBFcnJvciBjaGVja2luZyBBV1MgQ29uZmlnIGluICR7cmVnaW9ufTpgLCBlcnJvcik7XG4gICAgICAgIH1cbiAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICBjb25maWdTZXJ2aWNlQ2xpZW50LmRlc3Ryb3koKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gY29uZmlnRGV0YWlscztcbn1cbmV4cG9ydCBkZWZhdWx0IGNoZWNrQ29uZmlnRXhpc3RzO1xuIl0sIm5hbWVzIjpbInJlcXVpcmUiLCJhc3luYyIsInJlcG9ydEZpbGUiLCJkYXRlVGltZSIsIkRhdGUiLCJ0b1VUQ1N0cmluZyIsInJlZ2lvbiIsInByb2Nlc3MiLCJlbnYiLCJBV1NfUkVHSU9OIiwiYWxsUmVnaW9ucyIsImVjMkNsaWVudCIsIkVDMkNsaWVudCIsImRlc2NyaWJlUmVnaW9uc0NvbW1hbmQiLCJEZXNjcmliZVJlZ2lvbnNDb21tYW5kIiwicmVzcG9uc2UiLCJzZW5kIiwicmVnaW9ucyIsIlJlZ2lvbnMiLCJwdXNoIiwiUmVnaW9uTmFtZSIsImVycm9yIiwiY29uc29sZSIsImRlc3Ryb3kiLCJhY2NvdW50VHlwZSIsIm9yZ2FuaXphdGlvbnNDbGllbnQiLCJPcmdhbml6YXRpb25zQ2xpZW50IiwiaXNJbk9yZ2FuaXphdGlvbiIsImlzTWFuYWdlbWVudEFjY291bnQiLCJjdXJyZW50QWNjb3VudElkIiwic3RzQ2xpZW50IiwiU1RTQ2xpZW50IiwiZ2V0Q2FsbGVySWRlbnRpdHlDb21tYW5kIiwiR2V0Q2FsbGVySWRlbnRpdHlDb21tYW5kIiwiQWNjb3VudCIsImdldEFjY291bnRJZCIsImxvZyIsImRlc2NyaWJlT3JnYW5pemF0aW9uQ29tbWFuZCIsIkRlc2NyaWJlT3JnYW5pemF0aW9uQ29tbWFuZCIsImRlc2NyaWJlT3JnYW5pemF0aW9uUmVzcG9uc2UiLCJPcmdhbml6YXRpb24iLCJNYXN0ZXJBY2NvdW50SWQiLCJtYW5hZ2VtZW50QWNjb3VudElkIiwiZGVmaW5lQWNjb3VudFR5cGUiLCJkaXIiLCJkZXB0aCIsImNvbG9ycyIsImxlZ2FjeUN1ckNoZWNrIiwiY3VyQ2xpZW50IiwiQ29zdEFuZFVzYWdlUmVwb3J0U2VydmljZUNsaWVudCIsImlzTGVnYWN5Q3VyU2V0dXAiLCJpbnB1dCIsImNvbW1hbmQiLCJEZXNjcmliZVJlcG9ydERlZmluaXRpb25zQ29tbWFuZCIsIlJlcG9ydERlZmluaXRpb25zIiwibGVuZ3RoIiwiZW5hYmxlT3JnUG9saWNpZXNDaGVjayIsIm9yZ0NsaWVudCIsInBvbGljeVR5cGVzRW5hYmxlZCIsInNjcEVuYWJsZWQiLCJ0YWdQb2xpY3lFbmFibGVkIiwiYmFja3VwUG9saWN5RW5hYmxlZCIsIkxpc3RSb290c0NvbW1hbmQiLCJyb290cyIsIlJvb3RzIiwiUG9saWN5VHlwZXMiLCJlbmFibGVkUG9saWN5IiwiVHlwZSIsIlN0YXR1cyIsIm9yZ0VuYWJsZWRTZXJ2aWNlcyIsImRpc2NvdmVyZWRPcmdTZXJ2aWNlcyIsIm9yZ1NlcnZpY2VBY2Nlc3NDb21tYW5kIiwiTGlzdEFXU1NlcnZpY2VBY2Nlc3NGb3JPcmdhbml6YXRpb25Db21tYW5kIiwib3JnU2VydmljZUFjY2Vzc1Jlc3BvbnNlIiwiRW5hYmxlZFNlcnZpY2VQcmluY2lwYWxzIiwib3JnU2VydmljZSIsImZvdW5kT3JnU2VydmljZSIsInNlcnZpY2UiLCJTZXJ2aWNlUHJpbmNpcGFsIiwib3JnRGVsQWRtaW5EZXRhaWxzIiwib3JnRGFEZXRhaWxzIiwib3JnRGFEZXRhaWwiLCJMaXN0RGVsZWdhdGVkQWRtaW5pc3RyYXRvcnNDb21tYW5kIiwiRGVsZWdhdGVkQWRtaW5pc3RyYXRvcnMiLCJkYSIsIkFjY291bnRJZCIsIklkIiwiTGlzdERlbGVnYXRlZFNlcnZpY2VzRm9yQWNjb3VudENvbW1hbmQiLCJhY2NvdW50UmVzcG9uc2UiLCJEZWxlZ2F0ZWRTZXJ2aWNlcyIsInNlcnZpY2VzIiwiYWNjb3VudE5hbWUiLCJOYW1lIiwiYWNjb3VudCIsInNydiIsImNmbk9yZ1N0YXR1cyIsIm9yZ0NmblN0YXR1cyIsInN0YXR1cyIsImNsb3VkRm9ybWF0aW9uQ2xpZW50IiwiQ2xvdWRGb3JtYXRpb25DbGllbnQiLCJkZXNjcmliZU9yZ0FjY2Vzc0lucHV0IiwiRGVzY3JpYmVPcmdhbml6YXRpb25zQWNjZXNzQ29tbWFuZCIsImNsb3VkRm9ybWF0aW9uT3JnQWNjZXNzIiwiY29udHJvbFRvd2VyRGV0YWlscyIsImNvbnRyb2xUb3dlckluZm8iLCJjb250cm9sVG93ZXJDbGllbnQiLCJDb250cm9sVG93ZXJDbGllbnQiLCJMaXN0TGFuZGluZ1pvbmVzQ29tbWFuZCIsIkpTT04iLCJzdHJpbmdpZnkiLCJsYW5kaW5nWm9uZXMiLCJsYW5kaW5nWm9uZUlkZW50aWZpZXIiLCJhcm4iLCJselJlZ2lvbiIsInRvU3RyaW5nIiwic3BsaXQiLCJjb250cm9sVG93ZXJSZWdpb24iLCJjb250cm9sVG93ZXJDbGllbnRSZWdpb24iLCJHZXRMYW5kaW5nWm9uZUNvbW1hbmQiLCJselJlc3BvbnNlIiwibGFuZGluZ1pvbmUiLCJsYXRlc3RBdmFpbGFibGVWZXJzaW9uIiwiZGVwbG95ZWRWZXJzaW9uIiwidmVyc2lvbiIsImRyaWZ0U3RhdHVzIiwiaWRjSW5mb3JtYXRpb24iLCJyZWdpb25MaXN0IiwiaWRjRGV0YWlscyIsImZvdW5kIiwic3NvQWRtaW5DbGllbnQiLCJTU09BZG1pbkNsaWVudCIsInNzb0lucHV0IiwiTWF4UmVzdWx0cyIsIk51bWJlciIsIkxpc3RJbnN0YW5jZXNDb21tYW5kIiwic3NvSW5zdGFuY2VSZXNwb25zZSIsIkluc3RhbmNlcyIsInNzb0luc3RhbmNlIiwiSW5zdGFuY2VBcm4iLCJpZCIsIklkZW50aXR5U3RvcmVJZCIsIm9yZ0RldGFpbHMiLCJvcmdEZXNjcmliZUNvbW1hbmQiLCJvcmdEYXRhIiwiQXJuIiwicm9vdE91SWQiLCJvcmdPdXMiLCJ0b3BMZXZlbE91cyIsImxpc3RPVXNDb21tYW5kIiwiTGlzdE9yZ2FuaXphdGlvbmFsVW5pdHNGb3JQYXJlbnRDb21tYW5kIiwiUGFyZW50SWQiLCJsaXN0T1VzUmVzcG9uc2UiLCJPcmdhbml6YXRpb25hbFVuaXRzIiwib3UiLCJ0b3BMZXZlbE91IiwibmFtZSIsIkxpc3RBY2NvdW50c0ZvclBhcmVudENvbW1hbmQiLCJBY2NvdW50cyIsImFjY291bnRzIiwib3JnTWVtYmVyQWNjb3VudERldGFpbHMiLCJvcmdNZW1iZXJBY2NvdW50SW5mbyIsIm9yZ3NDbGllbnQiLCJMaXN0QWNjb3VudHNDb21tYW5kIiwib3JnTWVtYmVyQWNjb3VudCIsImFjY291bnRFbWFpbCIsIkVtYWlsIiwibWVtYmVyQWNjb3VudCIsIm1lc3NhZ2UiLCJ3YXJuIiwiaWFtVXNlclJlc3VsdCIsImlhbUNsaWVudCIsIklBTUNsaWVudCIsImlhbVVzZXJJbmZvIiwibGlzdFVzZXJzQ29tbWFuZCIsIkxpc3RVc2Vyc0NvbW1hbmQiLCJsaXN0VXNlcnNSZXNwb25zZSIsInVzZXIiLCJVc2VycyIsInVzZXJOYW1lIiwiVXNlck5hbWUiLCJsaXN0QWNjZXNzS2V5c0NvbW1hbmQiLCJMaXN0QWNjZXNzS2V5c0NvbW1hbmQiLCJhY2Nlc3NLZXlzIiwiQWNjZXNzS2V5TWV0YWRhdGEiLCJhY2Nlc3NLZXkiLCJhY2Nlc3NLZXlJZCIsIkFjY2Vzc0tleUlkIiwiZ2V0TGFzdFVzZWRDb21tYW5kIiwiR2V0QWNjZXNzS2V5TGFzdFVzZWRDb21tYW5kIiwibGFzdFVzZWRSZXNwb25zZSIsImZvdW5kVXNlckluZm8iLCJsYXN0VXNlZCIsIkFjY2Vzc0tleUxhc3RVc2VkIiwiTGFzdFVzZWREYXRlIiwiaWFtVXNlciIsImVjMkNoZWNrIiwiZWMyVmFsaWRhdGlvbiIsIkRlc2NyaWJlSW5zdGFuY2VzQ29tbWFuZCIsIlJlc2VydmF0aW9ucyIsImVjMkZvdW5kIiwiZmluZCIsInBhcmFtIiwiZWMyIiwidnBjQ2hlY2siLCJ2cGNWYWxpZGF0aW9uIiwiRGVzY3JpYmVWcGNzQ29tbWFuZCIsIlZwY3MiLCJ2cGNGb3VuZCIsInZwY0ZpbmQiLCJjbG91ZFRyYWlsQ2hlY2siLCJjbG91ZFRyYWlsVmFsaWRhdGlvbiIsImNsb3VkVHJhaWxDbGllbnQiLCJDbG91ZFRyYWlsQ2xpZW50IiwiY2xvdWRUcmFpbERlc2NyaWJlQ29tbWFuZCIsIkRlc2NyaWJlVHJhaWxzQ29tbWFuZCIsImNsb3VkVHJhaWxSZXNwb25zZSIsInRyYWlsTGlzdCIsInRyYWlsIiwidHJhaWxJbmZvIiwiSG9tZVJlZ2lvbiIsInRyYWlsRm91bmQiLCJpc09yZ1RyYWlsIiwiSXNNdWx0aVJlZ2lvblRyYWlsIiwiaXNNdWx0aVJlZ2lvbiIsImN0RmluZCIsImNvbmZpZ0NoZWNrIiwiY29uZmlnRGV0YWlscyIsImNvbmZpZ1NlcnZpY2VDbGllbnQiLCJDb25maWdTZXJ2aWNlQ2xpZW50IiwiY29uZmlnRGV0YWlsIiwiY29uZmlnUmVjb3JkZXJGb3VuZCIsImNvbmZpZ0RlbGl2ZXJ5Q2hhbm5lbEZvdW5kIiwicmVjb3JkZXJSZXNwb25zZSIsIkRlc2NyaWJlQ29uZmlndXJhdGlvblJlY29yZGVyU3RhdHVzQ29tbWFuZCIsIkNvbmZpZ3VyYXRpb25SZWNvcmRlcnNTdGF0dXMiLCJjaGFubmVsUmVzcG9uc2UiLCJEZXNjcmliZURlbGl2ZXJ5Q2hhbm5lbHNDb21tYW5kIiwiRGVsaXZlcnlDaGFubmVscyIsImNvbmZpZ0ZpbmQiLCJtYWluIl0sInNvdXJjZVJvb3QiOiIifQ==