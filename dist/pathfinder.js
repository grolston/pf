(()=>{"use strict";const n=require("@aws-sdk/client-sts"),e=require("@aws-sdk/client-organizations"),a=require("@aws-sdk/client-iam"),i=require("@aws-sdk/client-cloudformation"),o=require("@aws-sdk/client-sso-admin"),c=require("@aws-sdk/client-ec2"),t=require("@aws-sdk/client-cloudtrail"),s=require("@aws-sdk/client-config-service"),r=require("@aws-sdk/client-controltower"),l=require("@aws-sdk/client-cost-and-usage-report-service");async function d(n,e,a){return`${e} - Task ${n} - Deploy top-level OU ${a}.`}async function p(n,e,a){return`${e} - Task ${n} - Remove IAM user ${a}`}async function y(n,e,a,i){return`${e} - Task ${n} - Remove IAM user ${a} API key: ${i}`}async function S(n,e,a){return`${e} - Task ${n} - Delete VPC in the ${a} region.`}async function u(n,e,a){return`${e} - Task ${n} - Delete VPC in the ${a} region.`}async function f(n,e,a){return`${e} - Task ${n} - Enable the AWS service ${a} within your AWS Organization`}async function g(n,e,a){return`${e} - Task ${n} - Delegate the AWS service ${a} within your AWS Organization to a member account`}async function A(n,e,a){return`${e} - Task ${n} - Enable the policy type ${a} within your AWS Organization.`}const F=require("fs");(async()=>{const w="./Pathfinder.txt";let m=new Date;const C=process.env.AWS_REGION||"us-east-1",E=await async function(){const n=new c.EC2Client({region:"us-east-1"});try{const e=new c.DescribeRegionsCommand({}),a=await n.send(e),i=[];for(const n of a.Regions||[])i.push(n.RegionName||"");return i}catch(n){return console.error("Error retrieving regions:",n),[]}finally{n.destroy()}}();console.log("Discovering your AWS environment....");const I=await(async a=>{const i=new e.OrganizationsClient({region:a});let o=!1,c=!1;try{const t=await async function(e){const a=new n.STSClient({region:e});try{const e=new n.GetCallerIdentityCommand({});return(await a.send(e)).Account}catch(n){throw console.error("Error getting account ID:",n),n}}(a);if(t){const n=new e.DescribeOrganizationCommand({}),a=await i.send(n);if(a.Organization?.MasterAccountId){const n=a.Organization?.MasterAccountId;n==t?(c=!0,o=!0):o=!0}else o=!1}}catch(n){console.error("Error:",n)}finally{i.destroy()}return{isInOrganization:o,isManagementAccount:c}})(C);F.writeFileSync(w,"Cloud Foundations - Pathfinder"),F.appendFileSync(w,`\nGenerated on: ${m.toUTCString()} \n\n`),F.appendFileSync(w,"\n*********************************************************"),F.appendFileSync(w,"\n                   MANAGEMENT ACCOUNT"),F.appendFileSync(w,"\n*********************************************************"),F.appendFileSync(w,"\n\nAWS ACCOUNT TYPE\n"),I&&(console.dir(I,{depth:null,colors:!0}),F.appendFileSync(w,`\n  Is in AWS Organization: ${I.isInOrganization}`),F.appendFileSync(w,`\n  Assessing AWS Management Account: ${I.isManagementAccount}`)),console.log("Discovering IAM Users....");const $=await(async()=>{const n=new a.IAMClient({region:"us-east-1"}),e=[];try{const i=new a.ListUsersCommand({}),o=await n.send(i);for(const i of o.Users||[]){const o=i.UserName||"",c=new a.ListAccessKeysCommand({UserName:o}),t=(await n.send(c)).AccessKeyMetadata||[];if(t.length>0)for(const i of t){const c=i.AccessKeyId||"",t=new a.GetAccessKeyLastUsedCommand({AccessKeyId:c}),s=await n.send(t),r={userName:o,accessKeyId:c,lastUsed:s&&s.AccessKeyLastUsed&&`${s.AccessKeyLastUsed.LastUsedDate}`||"Not available"};e.push(r)}else{const n={userName:o};e.push(n)}}}catch(n){console.error("Error:",n)}finally{n.destroy()}return e})();if(F.appendFileSync(w,"\n\nIAM USERS CHECK\n"),$&&$.length>0){console.dir($,{depth:null,colors:!0});for(const n of $)F.appendFileSync(w,`\n  IAM User: ${n.userName}`),n.accessKeyId&&F.appendFileSync(w,`\n    User API Key ID: ${n.accessKeyId}`),F.appendFileSync(w,"\n")}else F.appendFileSync(w,"\n  No IAM Users found.");console.log("Discovering EC2 instances across all AWS Regions....");const N=await async function(n){let e=[];for(const a of n){const n=new c.EC2Client({region:a}),i=new c.DescribeInstancesCommand({});try{const o=await n.send(i);if(o.Reservations)if(o.Reservations.length>0){const n={region:a,ec2Found:!0};e.push(n)}else{const n={region:a,ec2Found:!1};e.push(n)}else{const n={region:a,ec2Found:!1};e.push(n)}}catch(n){console.log(`Error checking instance: ${n}`)}finally{n.destroy()}}return e}(E);if(F.appendFileSync(w,"\n\nEC2 INSTANCE CHECK\n"),N&&N.find((n=>!0===n.ec2Found))){console.dir(N,{depth:null,colors:!0});for(const n of N)n.ec2Found&&F.appendFileSync(w,`\n  ${n.region} - found EC2 Instance(s).`)}else F.appendFileSync(w,"\n  No EC2 instances found.");console.log("Discovering VPCs across all AWS Regions....");const O=await async function(n){let e=[];for(const a of n){const n=new c.EC2Client({region:a}),i=new c.DescribeVpcsCommand({});try{const o=await n.send(i);if(o.Vpcs)if(o.Vpcs.length>0){const n={region:a,vpcFound:!0};e.push(n)}else{const n={region:a,vpcFound:!1};e.push(n)}else{const n={region:a,vpcFound:!1};e.push(n)}}catch(n){console.log(`Error checking instance: ${n}`)}finally{n.destroy()}}return e}(E);if(F.appendFileSync(w,"\n\nVPC CHECK\n"),O&&O.length>0){console.dir(O,{depth:null,colors:!0});for(const n of O)n.vpcFound&&F.appendFileSync(w,`\n  ${n.region} - found VPC(s).`)}else F.appendFileSync(w,"\n  No VPCs found.");console.log("Discovering AWS Config configurations across all AWS Regions....");const T=await async function(n){let e=[];for(const a of n){const n=new t.CloudTrailClient({region:a}),i=new t.DescribeTrailsCommand({});try{const o=await n.send(i);if(o.trailList)for(const n of o.trailList){let i={};i=n.HomeRegion==a?{region:a,trailFound:!0,isOrgTrail:n.IsMultiRegionTrail,isMultiRegion:n.IsMultiRegionTrail}:{region:a,trailFound:!1},e.push(i)}}catch(n){console.log(`Error checking instance: ${n}`)}finally{n.destroy()}}return e}(E),h=await async function(n){let e=[];for(const a of n){const n=new s.ConfigServiceClient({region:a});let i={region:a,configRecorderFound:!1,configDeliveryChannelFound:!1};try{const a=await n.send(new s.DescribeConfigurationRecorderStatusCommand({}));0!==a.ConfigurationRecordersStatus?.length&&(i.configRecorderFound=!0);const o=await n.send(new s.DescribeDeliveryChannelsCommand({}));0!==o.DeliveryChannels?.length&&(i.configDeliveryChannelFound=!0),e.push(i)}catch(n){console.error(`Error checking AWS Config in ${a}:`,n)}finally{n.destroy()}}return e}(E);if(F.appendFileSync(w,"\n\nAWS CONFIG CHECK\n"),h&&h.find((n=>!0===n.configRecorderFound))){console.dir(h,{depth:null,colors:!0});for(const n of h)n.configRecorderFound&&F.appendFileSync(w,`\n  ${n.region} - Config Recorder found`),n.configDeliveryChannelFound&&F.appendFileSync(w,`\n  ${n.region} - Config Delivery Channel found`)}else F.appendFileSync(w,"\n  No AWS Config resource discovered");if(I.isInOrganization&&I.isManagementAccount){const n=await async function(n){const a=new e.OrganizationsClient({region:n});let i={};try{const n=new e.DescribeOrganizationCommand({}),o=await a.send(n);o.Organization&&(i.id=o.Organization.Id??"",i.arn=o.Organization.Arn??"");const c=new e.ListRootsCommand({}),t=await a.send(c);t.Roots?i.rootOuId=t.Roots[0].Id:console.log("No info found for your AWS Organization.")}catch(n){console.error(`An error occurred: ${n}`)}finally{return a.destroy(),i}}("us-east-1");console.dir(n,{depth:null,colors:!0});const a=await(async n=>{const e=new l.CostAndUsageReportServiceClient({region:n});let a=!1;try{const n={},i=new l.DescribeReportDefinitionsCommand(n),o=await e.send(i);return o.ReportDefinitions&&o.ReportDefinitions.length>0&&(a=!0),{isLegacyCurSetup:a}}catch(n){return console.error(`Error: ${n}`),a=!1,{isLegacyCurSetup:a}}finally{e.destroy()}})("us-east-1"),c=await async function(n){const a=new e.OrganizationsClient({region:n});let i={scpEnabled:!1,tagPolicyEnabled:!1,backupPolicyEnabled:!1};try{const n={},o=new e.ListRootsCommand(n),c=await a.send(o);if(c.Roots&&c.Roots[0].PolicyTypes)for(const n of c.Roots[0].PolicyTypes)"SERVICE_CONTROL_POLICY"==n.Type&&"ENABLED"==n.Status&&(i.scpEnabled=!0),"TAG_POLICY"==n.Type&&"ENABLED"==n.Status&&(i.tagPolicyEnabled=!0),"BACKUP_POLICY"==n.Type&&"ENABLED"==n.Status&&(i.backupPolicyEnabled=!0)}catch(n){console.error(`An error occurred: ${n}`)}finally{return a.destroy(),i}}("us-east-1");console.dir(c,{depth:null,colors:!0});const t=await async function(n){const a=[],i=new e.OrganizationsClient({region:n});try{const n=new e.ListAWSServiceAccessForOrganizationCommand({}),o=await i.send(n);if(o.EnabledServicePrincipals&&o.EnabledServicePrincipals.length>0){o.EnabledServicePrincipals;for(const n of o.EnabledServicePrincipals){const e={service:n.ServicePrincipal??""};a.push(e)}}}catch(n){console.error("Error checking service access:",n)}finally{return i.destroy(),a}}("us-east-1");console.dir(t,{depth:null,colors:!0});const s=await async function(n){let e={status:"disabled"};const a=new i.CloudFormationClient({region:n});try{const n={},o=new i.DescribeOrganizationsAccessCommand(n),c=await a.send(o);e.status=c.Status??"disabled"}catch(n){console.log(`Error: ${n}`)}finally{return a.destroy(),e}}(C);console.dir(s,{depth:null,colors:!0});const m=await async function(n){let e={};const a=new r.ControlTowerClient({region:n});try{const n=new r.ListLandingZonesCommand({}),i=await a.send(n);if(console.log(JSON.stringify(i.landingZones,null,2)),i.landingZones&&i.landingZones.length>0){const n={landingZoneIdentifier:i.landingZones[0].arn},a=i.landingZones[0].arn?.toString().split(":")[3]??"";if(a){e.controlTowerRegion=a;const i=new r.ControlTowerClient({region:a}),o=new r.GetLandingZoneCommand(n),c=await i.send(o);c.landingZone&&(console.log(JSON.stringify(c.landingZone,null,2)),e.status=c.landingZone.status,e.latestAvailableVersion=c.landingZone.latestAvailableVersion,e.deployedVersion=c.landingZone.version,e.driftStatus=c.landingZone.driftStatus?.status)}}}catch(e){console.error(`Error checking Control Tower in ${n}:`,e)}finally{a.destroy()}return e}(C),I=await async function(n){let e={found:!1};for(const a of n){const n=new o.SSOAdminClient({region:a});try{const i={MaxResults:Number("100")},c=new o.ListInstancesCommand(i),t=await n.send(c);if(t.Instances&&t.Instances.length>0){const n=t.Instances[0];e.found=!0,e.region=a,e.arn=n.InstanceArn,e.id=n.IdentityStoreId;break}}catch(n){console.log(`Error looking for AWS Identity Center details in region ${a}`)}finally{n.destroy()}}return e}(E);console.dir(I,{depth:null,colors:!0});const h=await async function(){let n=[];const a=new e.OrganizationsClient({region:"us-east-1"});let i={};try{const o=new e.ListDelegatedAdministratorsCommand({}),c=await a.send(o);if(c.DelegatedAdministrators)for(const o of c.DelegatedAdministrators){const c={AccountId:o.Id},t=new e.ListDelegatedServicesForAccountCommand(c),s=await a.send(t);s.DelegatedServices&&(i={services:s.DelegatedServices,accountName:o.Name},n.push(i))}}catch(n){console.log("Error looking for delegated services.")}finally{a.destroy()}return n}();console.dir(h,{depth:null,colors:!0});const v=await async function(){let n=[];const a=new e.OrganizationsClient({region:"us-east-1"}),i={MaxResults:Number("2000")};try{const o=await a.send(new e.ListAccountsCommand(i));if(o.Accounts&&o.Accounts.length>0)for(const e of o.Accounts){let a={accountName:e.Name,accountEmail:e.Email};n.push(a)}}catch(n){console.error("Error listing AWS accounts:",n)}finally{a.destroy()}return n}();console.dir(v,{depth:null,colors:!0}),F.appendFileSync(w,"\n\nMANAGEMENT ACCOUNT RECOMMENDED TASKS:");let R=1;const D="Management Account";if($&&$.length>0)for(const n of $){const e=await p(R,D,n.userName);if(F.appendFileSync(w,`\n  ${e}`),R++,n.accessKeyId){const e=await y(R,D,n.userName,n.accessKeyId);F.appendFileSync(w,`\n  ${e}`),R++}}if(N&&N.find((n=>!0===n.ec2Found)))for(const n of N)if(n.ec2Found&&n.region){const e=await u(R,D,n.region);F.appendFileSync(w,`\n  ${e}`),R++}if(O&&O.length>0)for(const n of O)if(n.vpcFound&&n.region){const e=await S(R,D,n.region);F.appendFileSync(w,`\n  ${e}`),R++}if(F.appendFileSync(w,"\n\n*********************************************************"),F.appendFileSync(w,"\n                    GOVERNANCE"),F.appendFileSync(w,"\n*********************************************************"),F.appendFileSync(w,"\n\nAWS ORGANIZATION POLICY TYPES\n"),F.appendFileSync(w,`\n  Service Control Policies (SCP) enabled: ${c.scpEnabled}`),F.appendFileSync(w,`\n  Tag Policies enabled: ${c.tagPolicyEnabled}`),F.appendFileSync(w,`\n  Backup Policies enabled: ${c.backupPolicyEnabled}`),F.appendFileSync(w,"\n\nAWS ORGANIZATION CLOUDFORMATION\n"),F.appendFileSync(w,`\n  AWS CloudFormation Organization stack sets status : ${s.status}`),F.appendFileSync(w,"\n\nCLOUDTRAIL CHECK\n"),T&&T.length>0){console.dir(T,{depth:null,colors:!0});for(const n of T)n.trailFound&&(F.appendFileSync(w,`\n  CloudTrail found in ${n.region}`),F.appendFileSync(w,`\n    Is Organization Trail: ${n.isOrgTrail}`),F.appendFileSync(w,`\n    Is MultiRegion: ${n.isMultiRegion}`),F.appendFileSync(w,"\n"))}else F.appendFileSync(w,"\n  No AWS CloudTrail resource discovered");F.appendFileSync(w,"\n\nGOVERNANCE SERVICES ENABLED IN AWS ORGANIZATION:\n"),t.find((n=>"cloudtrail.amazonaws.com"===n.service))&&F.appendFileSync(w,"\n  AWS CloudTrail"),t.find((n=>"config.amazonaws.com"===n.service))&&F.appendFileSync(w,"\n  AWS Config"),F.appendFileSync(w,"\n\nGOVERNANCE RECOMMENDED TASKS:");const z="Governance";let W=1;if(!t.find((n=>"cloudtrail.amazonaws.com"===n.service))){const n=await f(W,z,"AWS CloudTrail");F.appendFileSync(w,`\n  ${n}`),W++}if(!t.find((n=>"config.amazonaws.com"===n.service))){const n=await f(W,z,"AWS Config");F.appendFileSync(w,`\n  ${n}`),W++}if(!c.scpEnabled){const n=await A(W,z,"Service Control Policy");F.appendFileSync(w,`\n  ${n}`),W++}if(!c.tagPolicyEnabled){const n=await A(W,z,"Tag Policy");F.appendFileSync(w,`\n  ${n}`),W++}if(!c.backupPolicyEnabled){const n=await A(W,z,"Backup Policy");F.appendFileSync(w,`\n  ${n}`),W++}F.appendFileSync(w,"\n\n*********************************************************"),F.appendFileSync(w,"\n                FINANCIAL MANAGEMENT"),F.appendFileSync(w,"\n*********************************************************"),F.appendFileSync(w,"\n\nLegacy CUR"),F.appendFileSync(w,`\n  Is legacy CUR setup: ${a.isLegacyCurSetup}`),F.appendFileSync(w,"\n\nCLOUD FINANCIAL MANAGEMENT RECOMMENDED TASKS:");let b=1;const M="Cloud Financial Management";if(!a.isLegacyCurSetup){const n=await async function(n,e){return`${e} - Task ${n} - Enable and create a Cost and Utilization Report (CUR) in the billing console.`}(b,M);F.appendFileSync(w,`\n  ${n}`)}F.appendFileSync(w,"\n\n*********************************************************"),F.appendFileSync(w,"\n                MULTI-ACCOUNT STRATEGY"),F.appendFileSync(w,"\n*********************************************************"),F.appendFileSync(w,"\n\nAWS ORGANIZATION DETAILS\n"),F.appendFileSync(w,`\n  AWS Organization Id: ${n.id}`),F.appendFileSync(w,`\n  AWS Organization ARN: ${n.arn}`),F.appendFileSync(w,`\n  AWS Organization Root OU Id: ${n.rootOuId}`),F.appendFileSync(w,"\n\nAWS ORGANIZATION CLOUDFORMATION\n"),F.appendFileSync(w,`\n  AWS CloudFormation Organization stack sets status : ${s.status}`);let P,L,k,U=!1;if(n.rootOuId){const a=await async function(n,a){const i=new e.OrganizationsClient({region:n});let o=[];try{const n=new e.ListOrganizationalUnitsForParentCommand({ParentId:a}),c=await i.send(n);if(c.OrganizationalUnits)for(const n of c.OrganizationalUnits){let a={id:n.Id,name:n.Name};const c=await i.send(new e.ListAccountsForParentCommand({ParentId:n.Id}));c.Accounts&&c.Accounts.length>0&&(a.accounts=c.Accounts),o.push(a)}}catch(n){return console.error("Error checking service access:",n),[]}finally{i.destroy()}return o}("us-east-1",n.rootOuId);if(console.dir(a,{depth:null,colors:!0}),F.appendFileSync(w,"\n\nAWS ORGANIZATION TOP-LEVEL ORGANIZATION UNITS\n"),F.appendFileSync(w,"\n  List of Organization's top-level OUs and AWS accounts:"),a&&a.length>0)for(const n of a)if("suspended"===n.name?.toLowerCase()&&(L=!0),"transitional"===n.name?.toLowerCase()&&(P=!0),"workloads"===n.name?.toLowerCase()&&(k=!0),"security"===n.name?.toLowerCase()&&(U=!0),F.appendFileSync(w,`\n    Organizational Unit: ${n.name}`),F.appendFileSync(w,`\n      Organizational Unit Id: ${n.id}`),n.accounts&&n.accounts.length>0){F.appendFileSync(w,"\n      AWS Accounts:");for(const e of n.accounts)F.appendFileSync(w,`\n        ${e.Name}`);F.appendFileSync(w,"\n")}else F.appendFileSync(w,"\n      AWS Accounts: None"),F.appendFileSync(w,"\n");else F.appendFileSync(w,"\n  No top level OUs found.")}if(F.appendFileSync(w,"\n\nAWS ORGANIZATION MEMBER ACCOUNTS\n"),v&&v.length>0)for(const n of v)F.appendFileSync(w,`\n  Account: ${n.accountName}`),F.appendFileSync(w,`\n  Account Email: ${n.accountEmail}\n`);else F.appendFileSync(w,"No member accounts found which is amazing as this is running from one.");F.appendFileSync(w,"\n\nAWS ORGANIZATION ENABLED SERVICES\n"),F.appendFileSync(w,"\n  The following AWS Services are enabled within your AWS Organization:");for(const n of t)F.appendFileSync(w,`\n    ${n.service}`);let G=!1,K=!1,V=!1,Z=!1,B=!1,Y=!1,q=!1,H=!1,_=!1;if(F.appendFileSync(w,"\n\nAWS ORGANIZATION INTEGRATED SERVICE REGISTERED DELEGATED ADMINS\n"),h&&h.length>0)for(const n of h){if(F.appendFileSync(w,`\n  Account: ${n.accountName}`),n.services&&n.services.length>0){F.appendFileSync(w,"\n  Delegated Services:");for(const e of n.services)F.appendFileSync(w,`\n    ${e.ServicePrincipal}`),"securityhub.amazonaws.com"===e.ServicePrincipal&&(K=!0),"guardduty.amazonaws.com"===e.ServicePrincipal&&(V=!0),"sso.amazonaws.com"===e.ServicePrincipal&&(G=!0),"config.amazonaws.com"===e.ServicePrincipal&&(Z=!0),"access-analyzer.amazonaws.com"===e.ServicePrincipal&&(B=!0),"storage-lens.s3.amazonaws.com"===e.ServicePrincipal&&(Y=!0),"ipam.amazonaws.com"===e.ServicePrincipal&&(q=!0),"account.amazonaws.com"===e.ServicePrincipal&&(H=!0),"backup.amazonaws.com"===e.ServicePrincipal&&(_=!0)}F.appendFileSync(w,"\n ")}else F.appendFileSync(w,"\n  No delegated admin accounts in AWS Organization");F.appendFileSync(w,"\n\nMULTI-ACCOUNT STRATEGY RECOMMENDED TASKS:");let x=1,J="Multi-Account Strategy";const j=await async function(n,e){return`${e} - Task ${n} - Review and validate your email addresses and their domains for the root user administrator for management and all member accounts.`}(x,J);if(F.appendFileSync(w,`\n  ${j}`),x++,!c.scpEnabled){const n=await A(x,J,"Service Control Policy");F.appendFileSync(w,`\n  ${n}`),x++}if(!P){const n=await d(x,J,"Transitional");F.appendFileSync(w,`\n  ${n}`),x++}if(!L){const n=await d(x,J,"Suspended");F.appendFileSync(w,`\n  ${n}`),x++}if(!k){const n=await d(x,J,"Workloads");F.appendFileSync(w,`\n  ${n}`),x++}if(!U){const n=await d(x,J,"Security");F.appendFileSync(w,`\n  ${n}`),x++}F.appendFileSync(w,"\n\n*********************************************************"),F.appendFileSync(w,"\n                  LANDING ZONE"),F.appendFileSync(w,"\n*********************************************************"),F.appendFileSync(w,"\n\nAWS CONTROL TOWER\n"),m.controlTowerRegion?(console.dir(m,{depth:null,colors:!0}),F.appendFileSync(w,`\n  Control Tower home region: ${m.controlTowerRegion}`),F.appendFileSync(w,`\n  Control Tower status: ${m.status}`),F.appendFileSync(w,`\n  Control Tower Landing Zone version: ${m.deployedVersion}`),F.appendFileSync(w,`\n  Latest available version: ${m.latestAvailableVersion}`),F.appendFileSync(w,`\n  Drift Status: ${m.driftStatus}`)):F.appendFileSync(w,"\n  AWS Control Tower is not deployed in the AWS Organization"),F.appendFileSync(w,"\n\nLANDING ZONE RECOMMENDED TASKS:");let Q=1;const X="Landing Zone";if(void 0===m.controlTowerRegion){const n=await async function(n,e){return`${e} - Task ${n} - Deploy AWS Control Tower in your home AWS Region.`}(Q,X);F.appendFileSync(w,`\n  ${n}`),Q++}if("DRIFTED"===m.driftStatus){const n=await async function(n,e){return`${e} - Task ${n} - Fix drift in deployed landing zone.`}(Q,X);F.appendFileSync(w,`\n  ${n}`),Q++}if(m.deployedVersion!==m.latestAvailableVersion){const n=m.deployedVersion??"",e=m.latestAvailableVersion??"",a=await async function(n,e,a,i){return`${e} - Task ${n} - Update your AWS Control Tower Landing Zone from ${a} to ${i}.`}(Q,X,n,e);F.appendFileSync(w,`\n  ${a}`),Q++}if(!t.find((n=>"member.org.stacksets.cloudformation.amazonaws.com"===n.service))){const n=await f(Q,X,"AWS CloudFormation");F.appendFileSync(w,`\n  ${n}`),Q++}F.appendFileSync(w,"\n\n*********************************************************"),F.appendFileSync(w,"\n                    IDENTITY"),F.appendFileSync(w,"\n*********************************************************"),F.appendFileSync(w,"\n\nAWS IAM IDENTITY CENTER\n"),F.appendFileSync(w,`\n  IdC Region: ${I.region}`),F.appendFileSync(w,`\n  IdC ARN: ${I.arn}`),F.appendFileSync(w,`\n  IdC Instance Id: ${I.id}`),F.appendFileSync(w,"\n\nIDENTITY RECOMMENDED TASKS:");let nn=1;const en="Identity";if(!t.find((n=>"sso.amazonaws.com"===n.service))){const n=await f(nn,en,"AWS IAM Identity Center");F.appendFileSync(w,`\n  ${n}`),nn++}if(!G){const n=await g(nn,en,"AWS IAM Identity Center");F.appendFileSync(w,`\n  ${n}`),nn++}if(!c.scpEnabled){const n=await A(nn,en,"Service Control Policy");F.appendFileSync(w,`\n  ${n}`),nn++}F.appendFileSync(w,"\n\n*********************************************************"),F.appendFileSync(w,"\n                    SECURITY"),F.appendFileSync(w,"\n*********************************************************"),F.appendFileSync(w,"\n\nAWS SECURITY SERVICES ENABLED IN AWS ORGANIZATION:\n"),t.find((n=>"guardduty.amazonaws.com"===n.service))&&F.appendFileSync(w,"\n  AWS GuardDuty"),t.find((n=>"securityhub.amazonaws.com"===n.service))&&F.appendFileSync(w,"\n  AWS Security Hub"),t.find((n=>"access-analyzer.amazonaws.com"===n.service))&&F.appendFileSync(w,"\n  IAM Access Analyzer"),t.find((n=>"macie.amazonaws.com"===n.service))&&F.appendFileSync(w,"\n  Macie"),t.find((n=>"storage-lens.s3.amazonaws.com"===n.service))&&F.appendFileSync(w,"\n  Amazon S3 Storage Lens"),t.find((n=>"inspector2.amazonaws.com"===n.service))&&F.appendFileSync(w,"\n  Amazon Inspector"),t.find((n=>"cloudtrail.amazonaws.com"===n.service))&&F.appendFileSync(w,"\n  AWS CloudTrail"),t.find((n=>"config.amazonaws.com"===n.service))&&F.appendFileSync(w,"\n  AWS Config"),F.appendFileSync(w,"\n\nSECURITY RECOMMENDED TASKS:");let an=1;const on="Security";if(!c.scpEnabled){const n=await A(an,on,"Service Control Policy");F.appendFileSync(w,`\n  ${n}`),an++}if(!t.find((n=>"guardduty.amazonaws.com"===n.service))){const n=await f(an,on,"AWS GuardDuty");F.appendFileSync(w,`\n  ${n}`),an++}if(!t.find((n=>"securityhub.amazonaws.com"===n.service))){const n=await f(an,on,"AWS SecurityHub");F.appendFileSync(w,`\n  ${n}`),an++}if(!t.find((n=>"access-analyzer.amazonaws.com"===n.service))){const n=await f(an,on,"AWS IAM Access Analyzer");F.appendFileSync(w,`\n  ${n}`),an++}if(!t.find((n=>"cloudtrail.amazonaws.com"===n.service))){const n=await f(an,on,"AWS CloudTrail");F.appendFileSync(w,`\n  ${n}`),an++}if(!t.find((n=>"config.amazonaws.com"===n.service))){const n=await f(an,on,"AWS Config");F.appendFileSync(w,`\n  ${n}`),an++}if(!K){const n=await g(an,on,"Security Hub");F.appendFileSync(w,`\n  ${n}`),an++}if(!V){const n=await g(an,on,"GuardDuty");F.appendFileSync(w,`\n  ${n}`),an++}if(!Z){const n=await g(an,on,"AWS Config");F.appendFileSync(w,`\n  ${n}`),an++}if(!B){const n=await g(an,on,"AWS IAM Access Analyzer");F.appendFileSync(w,`\n  ${n}`),an++}if(!Y){const n=await g(an,on,"S3 Storage Lens");F.appendFileSync(w,`\n  ${n}`),an++}F.appendFileSync(w,"\n\n*********************************************************"),F.appendFileSync(w,"\n                    NETWORK"),F.appendFileSync(w,"\n*********************************************************"),F.appendFileSync(w,"\n\nNETWORK RECOMMENDED TASKS:");let cn=1;const tn="Network";if(!t.find((n=>"guardduty.amazonaws.com"===n.service))){const n=await f(cn,tn,"AWS GuardDuty");F.appendFileSync(w,`\n  ${n}`),cn++}if(!t.find((n=>"ipam.amazonaws.com"===n.service))){const n=await f(cn,tn,"AWS IPAM");F.appendFileSync(w,`\n  ${n}`),cn++}if(!t.find((n=>"ram.amazonaws.com"===n.service))){const n=await f(cn,tn,"AWS Resource Access Manager");F.appendFileSync(w,`\n  ${n}`),cn++}if(!q){const n=await g(cn,tn,"AWS IPAM");F.appendFileSync(w,`\n  ${n}`),cn++}if(!c.scpEnabled){const n=await A(cn,tn,"Service Control Policy");F.appendFileSync(w,`\n  ${n}`),cn++}F.appendFileSync(w,"\n\n*********************************************************"),F.appendFileSync(w,"\n                  OBSERVABILITY"),F.appendFileSync(w,"\n*********************************************************"),F.appendFileSync(w,"\n\nOBSERVABILITY RECOMMENDED TASKS:");let sn=1;const rn="Observability";if(!t.find((n=>"account.amazonaws.com"===n.service))){const n=await f(sn,rn,"Account Manager");F.appendFileSync(w,`\n  ${n}`),sn++}if(!H){const n=await g(sn,rn,"Account Manager");F.appendFileSync(w,`\n  ${n}`),sn++}F.appendFileSync(w,"\n\n*********************************************************"),F.appendFileSync(w,"\n               BACKUP AND RECOVERY"),F.appendFileSync(w,"\n*********************************************************"),F.appendFileSync(w,"\n\nBACKUP AND RECOVERY RECOMMENDED TASKS:");let ln=1;const dn="Backup and Recovery";if(!t.find((n=>"backup.amazonaws.com"===n.service))){const n=await f(ln,dn,"AWS Backup");F.appendFileSync(w,`\n  ${n}`),ln++}if(!_){const n=await g(ln,dn,"AWS Backup");F.appendFileSync(w,`\n  ${n}`),ln++}if(!c.backupPolicyEnabled){const n=await A(ln,dn,"Backup Policy");F.appendFileSync(w,`\n  ${n}`),ln++}if(!c.scpEnabled){const n=await A(ln,dn,"Service Control Policy");F.appendFileSync(w,`\n  ${n}`),ln++}}else if(I.isInOrganization&&!I.isManagementAccount){const n="\nWARNING: You are running Pathfinder from an account that is a member of your AWS Organization. Please run the solution from your AWS Management account.";console.warn(n),F.appendFileSync(w,n)}else{const n="\nWARNING: You are running Pathfinder from an account that not part of an AWS Organization. This account will be treated as a standalone account.";console.warn(n),F.appendFileSync(w,n)}F.appendFileSync(w,"\n\n\n  END REVIEW")})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,