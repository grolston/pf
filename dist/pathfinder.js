(()=>{"use strict";const n=require("@aws-sdk/client-sts"),e=require("@aws-sdk/client-organizations"),a=require("@aws-sdk/client-iam"),o=require("@aws-sdk/client-cloudformation"),i=require("@aws-sdk/client-sso-admin"),c=require("@aws-sdk/client-ec2"),t=require("@aws-sdk/client-cloudtrail"),s=require("@aws-sdk/client-config-service"),r=require("@aws-sdk/client-controltower"),l=require("@aws-sdk/client-cost-and-usage-report-service");var d,p;async function u(n,e,a){return`${e} - Task ${n} - Deploy top-level OU ${a}.`}async function S(n,e,a){return`${e} - Task ${n} - Remove IAM user ${a}`}async function y(n,e,a,o){return`${e} - Task ${n} - Remove IAM user ${a} API key: ${o}`}async function f(n,e,a){return`${e} - Task ${n} - Delete VPC in the ${a} region.`}async function g(n,e,a){return`${e} - Task ${n} - Delete VPC in the ${a} region.`}async function A(n,e,a){return`${e} - Task ${n} - Enable the AWS service ${a} within your AWS Organization`}async function F(n,e,a){return`${e} - Task ${n} - Delegate the AWS service ${a} within your AWS Organization to a member account`}!function(n){n[n["Management Account"]=0]="Management Account",n[n.Governance=1]="Governance",n[n["Financial Management"]=2]="Financial Management",n[n["Multi-Account Strategy"]=3]="Multi-Account Strategy",n[n["Landing Zone"]=4]="Landing Zone",n[n.Identity=5]="Identity",n[n.Security=6]="Security",n[n.Network=7]="Network",n[n.Observability=8]="Observability",n[n["Backup and Recovery"]=9]="Backup and Recovery"}(d||(d={})),function(n){n[n.Workloads=0]="Workloads",n[n.Security=1]="Security",n[n.Transitional=2]="Transitional",n[n.Suspended=3]="Suspended",n[n.Exceptions=4]="Exceptions"}(p||(p={}));const w=require("fs");(async()=>{const d="./Pathfinder.txt";let p=new Date;const m=process.env.AWS_REGION||"us-east-1",C=await async function(){const n=new c.EC2Client({region:"us-east-1"});try{const e=new c.DescribeRegionsCommand({}),a=await n.send(e),o=[];for(const n of a.Regions||[])o.push(n.RegionName||"");return o}catch(n){return console.error("Error retrieving regions:",n),[]}finally{n.destroy()}}();console.log("Discovering your AWS environment....");const E=await(async a=>{const o=new e.OrganizationsClient({region:a});let i=!1,c=!1;try{const t=await async function(e){const a=new n.STSClient({region:e});try{const e=new n.GetCallerIdentityCommand({});return(await a.send(e)).Account}catch(n){throw console.error("Error getting account ID:",n),n}}(a);if(t){const n=new e.DescribeOrganizationCommand({}),a=await o.send(n);if(a.Organization?.MasterAccountId){const n=a.Organization?.MasterAccountId;n==t?(c=!0,i=!0):i=!0}else i=!1}}catch(n){console.error("Error:",n)}finally{o.destroy()}return{isInOrganization:i,isManagementAccount:c}})(m);w.writeFileSync(d,"Cloud Foundations - Pathfinder"),w.appendFileSync(d,`\nGenerated on: ${p.toUTCString()} \n\n`),w.appendFileSync(d,"\n*********************************************************"),w.appendFileSync(d,"\n                   MANAGEMENT ACCOUNT"),w.appendFileSync(d,"\n*********************************************************"),w.appendFileSync(d,"\n\nAWS ACCOUNT TYPE\n"),E&&(console.dir(E,{depth:null,colors:!0}),w.appendFileSync(d,`\n  Is in AWS Organization: ${E.isInOrganization}`),w.appendFileSync(d,`\n  Assessing AWS Management Account: ${E.isManagementAccount}`)),console.log("Discovering IAM Users....");const I=await(async()=>{const n=new a.IAMClient({region:"us-east-1"}),e=[];try{const o=new a.ListUsersCommand({}),i=await n.send(o);for(const o of i.Users||[]){const i=o.UserName||"",c=new a.ListAccessKeysCommand({UserName:i}),t=(await n.send(c)).AccessKeyMetadata||[];if(t.length>0)for(const o of t){const c=o.AccessKeyId||"",t=new a.GetAccessKeyLastUsedCommand({AccessKeyId:c}),s=await n.send(t),r={userName:i,accessKeyId:c,lastUsed:s&&s.AccessKeyLastUsed&&`${s.AccessKeyLastUsed.LastUsedDate}`||"Not available"};e.push(r)}else{const n={userName:i};e.push(n)}}}catch(n){console.error("Error:",n)}finally{n.destroy()}return e})();if(w.appendFileSync(d,"\n\nIAM USERS CHECK\n"),I&&I.length>0){console.dir(I,{depth:null,colors:!0});for(const n of I)w.appendFileSync(d,`\n  IAM User: ${n.userName}`),n.accessKeyId&&w.appendFileSync(d,`\n    User API Key ID: ${n.accessKeyId}`),w.appendFileSync(d,"\n")}else w.appendFileSync(d,"\n  No IAM Users found.");console.log("Discovering EC2 instances across all AWS Regions....");const N=await async function(n){let e=[];for(const a of n){const n=new c.EC2Client({region:a}),o=new c.DescribeInstancesCommand({});try{const i=await n.send(o);if(i.Reservations)if(i.Reservations.length>0){const n={region:a,ec2Found:!0};e.push(n)}else{const n={region:a,ec2Found:!1};e.push(n)}else{const n={region:a,ec2Found:!1};e.push(n)}}catch(n){console.log(`Error checking instance: ${n}`)}finally{n.destroy()}}return e}(C);if(w.appendFileSync(d,"\n\nEC2 INSTANCE CHECK\n"),N&&N.find((n=>!0===n.ec2Found))){console.dir(N,{depth:null,colors:!0});for(const n of N)n.ec2Found&&w.appendFileSync(d,`\n  ${n.region} - found EC2 Instance(s).`)}else w.appendFileSync(d,"\n  No EC2 instances found.");console.log("Discovering VPCs across all AWS Regions....");const O=await async function(n){let e=[];for(const a of n){const n=new c.EC2Client({region:a}),o=new c.DescribeVpcsCommand({});try{const i=await n.send(o);if(i.Vpcs)if(i.Vpcs.length>0){const n={region:a,vpcFound:!0};e.push(n)}else{const n={region:a,vpcFound:!1};e.push(n)}else{const n={region:a,vpcFound:!1};e.push(n)}}catch(n){console.log(`Error checking instance: ${n}`)}finally{n.destroy()}}return e}(C);if(w.appendFileSync(d,"\n\nVPC CHECK\n"),O&&O.length>0){console.dir(O,{depth:null,colors:!0});for(const n of O)n.vpcFound&&w.appendFileSync(d,`\n  ${n.region} - found VPC(s).`)}else w.appendFileSync(d,"\n  No VPCs found.");console.log("Discovering AWS Config configurations across all AWS Regions....");const T=await async function(n){let e=[];for(const a of n){const n=new t.CloudTrailClient({region:a}),o=new t.DescribeTrailsCommand({});try{const i=await n.send(o);if(i.trailList)for(const n of i.trailList){let o={};o=n.HomeRegion==a?{region:a,trailFound:!0,isOrgTrail:n.IsMultiRegionTrail,isMultiRegion:n.IsMultiRegionTrail}:{region:a,trailFound:!1},e.push(o)}}catch(n){console.log(`Error checking instance: ${n}`)}finally{n.destroy()}}return e}(C),$=await async function(n){let e=[];for(const a of n){const n=new s.ConfigServiceClient({region:a});let o={region:a,configRecorderFound:!1,configDeliveryChannelFound:!1};try{const a=await n.send(new s.DescribeConfigurationRecorderStatusCommand({}));0!==a.ConfigurationRecordersStatus?.length&&(o.configRecorderFound=!0);const i=await n.send(new s.DescribeDeliveryChannelsCommand({}));0!==i.DeliveryChannels?.length&&(o.configDeliveryChannelFound=!0),e.push(o)}catch(n){console.error(`Error checking AWS Config in ${a}:`,n)}finally{n.destroy()}}return e}(C);if(w.appendFileSync(d,"\n\nAWS CONFIG CHECK\n"),$&&$.find((n=>!0===n.configRecorderFound))){console.dir($,{depth:null,colors:!0});for(const n of $)n.configRecorderFound&&w.appendFileSync(d,`\n  ${n.region} - Config Recorder found`),n.configDeliveryChannelFound&&w.appendFileSync(d,`\n  ${n.region} - Config Delivery Channel found`)}else w.appendFileSync(d,"\n  No AWS Config resource discovered");if(E.isInOrganization&&E.isManagementAccount){const n=await async function(n){const a=new e.OrganizationsClient({region:n});let o={};try{const n=new e.DescribeOrganizationCommand({}),i=await a.send(n);i.Organization&&(o.id=i.Organization.Id??"",o.arn=i.Organization.Arn??"");const c=new e.ListRootsCommand({}),t=await a.send(c);t.Roots?o.rootOuId=t.Roots[0].Id:console.log("No info found for your AWS Organization.")}catch(n){console.error(`An error occurred: ${n}`)}finally{return a.destroy(),o}}("us-east-1");console.dir(n,{depth:null,colors:!0});const a=await(async n=>{const e=new l.CostAndUsageReportServiceClient({region:n});let a=!1;try{const n={},o=new l.DescribeReportDefinitionsCommand(n),i=await e.send(o);return i.ReportDefinitions&&i.ReportDefinitions.length>0&&(a=!0),{isLegacyCurSetup:a}}catch(n){return console.error(`Error: ${n}`),a=!1,{isLegacyCurSetup:a}}finally{e.destroy()}})("us-east-1"),c=await async function(n){const a=new e.OrganizationsClient({region:n});let o={scpEnabled:!1,tagPolicyEnabled:!1,backupPolicyEnabled:!1};try{const n={},i=new e.ListRootsCommand(n),c=await a.send(i);if(c.Roots&&c.Roots[0].PolicyTypes)for(const n of c.Roots[0].PolicyTypes)"SERVICE_CONTROL_POLICY"==n.Type&&"ENABLED"==n.Status&&(o.scpEnabled=!0),"TAG_POLICY"==n.Type&&"ENABLED"==n.Status&&(o.tagPolicyEnabled=!0),"BACKUP_POLICY"==n.Type&&"ENABLED"==n.Status&&(o.backupPolicyEnabled=!0)}catch(n){console.error(`An error occurred: ${n}`)}finally{return a.destroy(),o}}("us-east-1");console.dir(c,{depth:null,colors:!0});const t=await async function(n){const a=[],o=new e.OrganizationsClient({region:n});try{const n=new e.ListAWSServiceAccessForOrganizationCommand({}),i=await o.send(n);if(i.EnabledServicePrincipals&&i.EnabledServicePrincipals.length>0){i.EnabledServicePrincipals;for(const n of i.EnabledServicePrincipals){const e={service:n.ServicePrincipal??""};a.push(e)}}}catch(n){console.error("Error checking service access:",n)}finally{return o.destroy(),a}}("us-east-1");console.dir(t,{depth:null,colors:!0});const s=await async function(n){let e={status:"disabled"};const a=new o.CloudFormationClient({region:n});try{const n={},i=new o.DescribeOrganizationsAccessCommand(n),c=await a.send(i);e.status=c.Status??"disabled"}catch(n){console.log(`Error: ${n}`)}finally{return a.destroy(),e}}(m);console.dir(s,{depth:null,colors:!0});const p=await async function(n){let e={};const a=new r.ControlTowerClient({region:n});try{const n=new r.ListLandingZonesCommand({}),o=await a.send(n);if(console.log(JSON.stringify(o.landingZones,null,2)),o.landingZones&&o.landingZones.length>0){const n={landingZoneIdentifier:o.landingZones[0].arn},a=o.landingZones[0].arn?.toString().split(":")[3]??"";if(a){e.controlTowerRegion=a;const o=new r.ControlTowerClient({region:a}),i=new r.GetLandingZoneCommand(n),c=await o.send(i);c.landingZone&&(console.log(JSON.stringify(c.landingZone,null,2)),e.status=c.landingZone.status,e.latestAvailableVersion=c.landingZone.latestAvailableVersion,e.deployedVersion=c.landingZone.version,e.driftStatus=c.landingZone.driftStatus?.status)}}}catch(e){console.error(`Error checking Control Tower in ${n}:`,e)}finally{a.destroy()}return e}(m),E=await async function(n){let e={found:!1};for(const a of n){const n=new i.SSOAdminClient({region:a});try{const o={MaxResults:Number("100")},c=new i.ListInstancesCommand(o),t=await n.send(c);if(t.Instances&&t.Instances.length>0){const n=t.Instances[0];e.found=!0,e.region=a,e.arn=n.InstanceArn,e.id=n.IdentityStoreId;break}}catch(n){console.log(`Error looking for AWS Identity Center details in region ${a}`)}finally{n.destroy()}}return e}(C);console.dir(E,{depth:null,colors:!0});const $=await async function(){let n=[];const a=new e.OrganizationsClient({region:"us-east-1"});let o={};try{const i=new e.ListDelegatedAdministratorsCommand({}),c=await a.send(i);if(c.DelegatedAdministrators)for(const i of c.DelegatedAdministrators){const c={AccountId:i.Id},t=new e.ListDelegatedServicesForAccountCommand(c),s=await a.send(t);s.DelegatedServices&&(o={services:s.DelegatedServices,accountName:i.Name},n.push(o))}}catch(n){console.log("Error looking for delegated services.")}finally{a.destroy()}return n}();console.dir($,{depth:null,colors:!0});const h=await async function(){let n=[];const a=new e.OrganizationsClient({region:"us-east-1"});try{const o=await a.send(new e.ListAccountsCommand({}));if(o.Accounts&&o.Accounts.length>0)for(const e of o.Accounts){let a={accountName:e.Name,accountEmail:e.Email};n.push(a)}}catch(n){console.error("Error listing AWS accounts:",n)}finally{a.destroy()}return n}();console.dir(h,{depth:null,colors:!0}),w.appendFileSync(d,"\n\nMANAGEMENT ACCOUNT RECOMMENDED TASKS:");let v=1;const R="Management Account";if(I&&I.length>0)for(const n of I){const e=await S(v,R,n.userName);if(w.appendFileSync(d,`\n  ${e}`),v++,n.accessKeyId){const e=await y(v,R,n.userName,n.accessKeyId);w.appendFileSync(d,`\n  ${e}`),v++}}if(N&&N.find((n=>!0===n.ec2Found)))for(const n of N)if(n.ec2Found&&n.region){const e=await g(v,R,n.region);w.appendFileSync(d,`\n  ${e}`),v++}if(O&&O.length>0)for(const n of O)if(n.vpcFound&&n.region){const e=await f(v,R,n.region);w.appendFileSync(d,`\n  ${e}`),v++}if(w.appendFileSync(d,"\n\n*********************************************************"),w.appendFileSync(d,"\n                    GOVERNANCE"),w.appendFileSync(d,"\n*********************************************************"),w.appendFileSync(d,"\n\nAWS ORGANIZATION POLICY TYPES\n"),w.appendFileSync(d,`\n  Service Control Policies (SCP) enabled: ${c.scpEnabled}`),w.appendFileSync(d,`\n  Tag Policies enabled: ${c.tagPolicyEnabled}`),w.appendFileSync(d,`\n  Backup Policies enabled: ${c.backupPolicyEnabled}`),w.appendFileSync(d,"\n\nAWS ORGANIZATION CLOUDFORMATION\n"),w.appendFileSync(d,`\n  AWS CloudFormation Organization stack sets status : ${s.status}`),w.appendFileSync(d,"\n\nCLOUDTRAIL CHECK\n"),T&&T.length>0){console.dir(T,{depth:null,colors:!0});for(const n of T)n.trailFound&&(w.appendFileSync(d,`\n  CloudTrail found in ${n.region}`),w.appendFileSync(d,`\n    Is Organization Trail: ${n.isOrgTrail}`),w.appendFileSync(d,`\n    Is MultiRegion: ${n.isMultiRegion}`),w.appendFileSync(d,"\n"))}else w.appendFileSync(d,"\n  No AWS CloudTrail resource discovered");w.appendFileSync(d,"\n\nGOVERNANCE SERVICES ENABLED IN AWS ORGANIZATION:\n"),t.find((n=>"cloudtrail.amazonaws.com"===n.service))&&w.appendFileSync(d,"\n  AWS CloudTrail"),t.find((n=>"config.amazonaws.com"===n.service))&&w.appendFileSync(d,"\n  AWS Config"),w.appendFileSync(d,"\n\nGOVERNANCE RECOMMENDED TASKS:");const D="Governance";let z=1;if(!t.find((n=>"cloudtrail.amazonaws.com"===n.service))){const n=await A(z,D,"AWS CloudTrail");w.appendFileSync(d,`\n  ${n}`),z++}if(!t.find((n=>"config.amazonaws.com"===n.service))){const n=await A(z,D,"AWS Config");w.appendFileSync(d,`\n  ${n}`),z++}w.appendFileSync(d,"\n\n*********************************************************"),w.appendFileSync(d,"\n                FINANCIAL MANAGEMENT"),w.appendFileSync(d,"\n*********************************************************"),w.appendFileSync(d,"\n\nLegacy CUR"),w.appendFileSync(d,`\n  Is legacy CUR setup: ${a.isLegacyCurSetup}`),w.appendFileSync(d,"\n\nCLOUD FINANCIAL MANAGEMENT RECOMMENDED TASKS:");let W=1;const M="Cloud Financial Management";if(!a.isLegacyCurSetup){const n=await async function(n,e){return`${e} - Task ${n} - Enable and create an Cost and Utilization Report in the billing console.`}(W,M);w.appendFileSync(d,`\n  ${n}`)}w.appendFileSync(d,"\n\n*********************************************************"),w.appendFileSync(d,"\n                MULTI-ACCOUNT STRATEGY"),w.appendFileSync(d,"\n*********************************************************"),w.appendFileSync(d,"\n\nAWS ORGANIZATION DETAILS\n"),w.appendFileSync(d,`\n  AWS Organization Id: ${n.id}`),w.appendFileSync(d,`\n  AWS Organization ARN: ${n.arn}`),w.appendFileSync(d,`\n  AWS Organization Root OU Id: ${n.rootOuId}`),w.appendFileSync(d,"\n\nAWS ORGANIZATION CLOUDFORMATION\n"),w.appendFileSync(d,`\n  AWS CloudFormation Organization stack sets status : ${s.status}`);let L,b,P,k=!1;if(n.rootOuId){const a=await async function(n,a){const o=new e.OrganizationsClient({region:n});let i=[];try{const n=new e.ListOrganizationalUnitsForParentCommand({ParentId:a}),c=await o.send(n);if(c.OrganizationalUnits)for(const n of c.OrganizationalUnits){let a={id:n.Id,name:n.Name};const c=await o.send(new e.ListAccountsForParentCommand({ParentId:n.Id}));c.Accounts&&c.Accounts.length>0&&(a.accounts=c.Accounts),i.push(a)}}catch(n){return console.error("Error checking service access:",n),[]}finally{o.destroy()}return i}("us-east-1",n.rootOuId);if(console.dir(a,{depth:null,colors:!0}),w.appendFileSync(d,"\n\nAWS ORGANIZATION TOP-LEVEL ORGANIZATION UNITS\n"),w.appendFileSync(d,"\n  List of Organization's top-level OUs and AWS accounts:"),a&&a.length>0)for(const n of a)if("suspended"===n.name?.toLowerCase()&&(b=!0),"transitional"===n.name?.toLowerCase()&&(L=!0),"workloads"===n.name?.toLowerCase()&&(P=!0),"security"===n.name?.toLowerCase()&&(k=!0),w.appendFileSync(d,`\n    Organizational Unit: ${n.name}`),w.appendFileSync(d,`\n      Organizational Unit Id: ${n.id}`),n.accounts&&n.accounts.length>0){w.appendFileSync(d,"\n      AWS Accounts:");for(const e of n.accounts)w.appendFileSync(d,`\n        ${e.Name}`);w.appendFileSync(d,"\n")}else w.appendFileSync(d,"\n      AWS Accounts: None"),w.appendFileSync(d,"\n");else w.appendFileSync(d,"\n  No top level OUs found.")}if(w.appendFileSync(d,"\n\nAWS ORGANIZATION MEMBER ACCOUNTS\n"),h&&h.length>0)for(const n of h)w.appendFileSync(d,`\n  Account: ${n.accountName}`),w.appendFileSync(d,`\n  Account Email: ${n.accountEmail}\n`);else w.appendFileSync(d,"No member accounts found which is amazing as this is running from one.");w.appendFileSync(d,"\n\nAWS ORGANIZATION ENABLED SERVICES\n"),w.appendFileSync(d,"\n  The following AWS Services are enabled within your AWS Organization:");for(const n of t)w.appendFileSync(d,`\n    ${n.service}`);let U=!1,G=!1,K=!1,V=!1,Z=!1,B=!1,Y=!1,q=!1,H=!1;if(w.appendFileSync(d,"\n\nAWS ORGANIZATION INTEGRATED SERVICE REGISTERED DELEGATED ADMINS\n"),$&&$.length>0)for(const n of $){if(w.appendFileSync(d,`\n  Account: ${n.accountName}`),n.services&&n.services.length>0){w.appendFileSync(d,"\n  Delegated Services:");for(const e of n.services)w.appendFileSync(d,`\n    ${e.ServicePrincipal}`),"securityhub.amazonaws.com"===e.ServicePrincipal&&(G=!0),"guardduty.amazonaws.com"===e.ServicePrincipal&&(K=!0),"sso.amazonaws.com"===e.ServicePrincipal&&(U=!0),"config.amazonaws.com"===e.ServicePrincipal&&(V=!0),"access-analyzer.amazonaws.com"===e.ServicePrincipal&&(Z=!0),"storage-lens.s3.amazonaws.com"===e.ServicePrincipal&&(B=!0),"ipam.amazonaws.com"===e.ServicePrincipal&&(Y=!0),"account.amazonaws.com"===e.ServicePrincipal&&(q=!0),"backup.amazonaws.com"===e.ServicePrincipal&&(H=!0)}w.appendFileSync(d,"\n ")}else w.appendFileSync(d,"\n  No delegated admin accounts in AWS Organization");w.appendFileSync(d,"\n\nMULTI-ACCOUNT STRATEGY RECOMMENDED TASKS:");let x=1,_="Multi-Account Strategy";const J=await async function(n,e){return`${e} - Task ${n} - Review and validate your email addresses and email domains for the root user administrator for the account is up to date.`}(x,_);if(w.appendFileSync(d,`\n  ${J}`),x++,!L){const n=await u(x,_,"Transitional");w.appendFileSync(d,`\n  ${n}`),x++}if(!b){const n=await u(x,_,"Suspended");w.appendFileSync(d,`\n  ${n}`),x++}if(!P){const n=await u(x,_,"Workloads");w.appendFileSync(d,`\n  ${n}`),x++}if(!k){const n=await u(x,_,"Security");w.appendFileSync(d,`\n  ${n}`),x++}w.appendFileSync(d,"\n\n*********************************************************"),w.appendFileSync(d,"\n                  LANDING ZONE"),w.appendFileSync(d,"\n*********************************************************"),w.appendFileSync(d,"\n\nAWS CONTROL TOWER\n"),p.controlTowerRegion?(console.dir(p,{depth:null,colors:!0}),w.appendFileSync(d,`\n  Control Tower home region: ${p.controlTowerRegion}`),w.appendFileSync(d,`\n  Control Tower status: ${p.status}`),w.appendFileSync(d,`\n  Control Tower Landing Zone version: ${p.deployedVersion}`),w.appendFileSync(d,`\n  Latest available version: ${p.latestAvailableVersion}`),w.appendFileSync(d,`\n  Drift Status: ${p.driftStatus}`)):w.appendFileSync(d,"\n  AWS Control Tower is not deployed in the AWS Organization"),w.appendFileSync(d,"\n\nLANDING ZONE RECOMMENDED TASKS:");let j=1;const Q="Landing Zone";if(void 0===p.controlTowerRegion){const n=await async function(n,e){return`${e} - Task ${n} - Deploy AWS Control Tower in your home AWS Region.`}(j,Q);w.appendFileSync(d,`\n  ${n}`),j++}if("DRIFTED"===p.driftStatus){const n=await async function(n,e){return`${e} - Task ${n} - Fix drift in deployed landing zone.`}(j,Q);w.appendFileSync(d,`\n  ${n}`),j++}if(p.deployedVersion!==p.latestAvailableVersion){const n=p.deployedVersion??"",e=p.latestAvailableVersion??"",a=await async function(n,e,a,o){return`${e} - Task ${n} - Update your AWS Control Tower Landing Zone from ${a} to ${o}.`}(j,Q,n,e);w.appendFileSync(d,`\n  ${a}`),j++}w.appendFileSync(d,"\n\n*********************************************************"),w.appendFileSync(d,"\n                    IDENTITY"),w.appendFileSync(d,"\n*********************************************************"),w.appendFileSync(d,"\n\nAWS IAM IDENTITY CENTER\n"),w.appendFileSync(d,`\n  IdC Region: ${E.region}`),w.appendFileSync(d,`\n  IdC ARN: ${E.arn}`),w.appendFileSync(d,`\n  IdC Instance Id: ${E.id}`),w.appendFileSync(d,"\n\nIDENTITY RECOMMENDED TASKS:");let X=1;const nn="Identity";if(!t.find((n=>"sso.amazonaws.com"===n.service))){const n=await A(X,nn,"AWS IAM Identity Center");w.appendFileSync(d,`\n  ${n}`),X++}if(!U){const n=await F(X,nn,"AWS IAM Identity Center");w.appendFileSync(d,`\n  ${n}`),X++}w.appendFileSync(d,"\n\n*********************************************************"),w.appendFileSync(d,"\n                    SECURITY"),w.appendFileSync(d,"\n*********************************************************"),w.appendFileSync(d,"\n\nAWS SECURITY SERVICES ENABLED IN AWS ORGANIZATION:\n"),t.find((n=>"guardduty.amazonaws.com"===n.service))&&w.appendFileSync(d,"\n  AWS GuardDuty"),t.find((n=>"securityhub.amazonaws.com"===n.service))&&w.appendFileSync(d,"\n  AWS Security Hub"),t.find((n=>"access-analyzer.amazonaws.com"===n.service))&&w.appendFileSync(d,"\n  IAM Access Analyzer"),t.find((n=>"macie.amazonaws.com"===n.service))&&w.appendFileSync(d,"\n  Macie"),t.find((n=>"storage-lens.s3.amazonaws.com"===n.service))&&w.appendFileSync(d,"\n  Amazon S3 Storage Lens"),t.find((n=>"inspector2.amazonaws.com"===n.service))&&w.appendFileSync(d,"\n  Amazon Inspector"),t.find((n=>"cloudtrail.amazonaws.com"===n.service))&&w.appendFileSync(d,"\n  AWS CloudTrail"),t.find((n=>"config.amazonaws.com"===n.service))&&w.appendFileSync(d,"\n  AWS Config"),w.appendFileSync(d,"\n\nSECURITY RECOMMENDED TASKS:");let en=1;const an="Security";if(!t.find((n=>"guardduty.amazonaws.com"===n.service))){const n=await A(en,an,"AWS GuardDuty");w.appendFileSync(d,`\n  ${n}`),en++}if(!t.find((n=>"securityhub.amazonaws.com"===n.service))){const n=await A(en,an,"AWS SecurityHub");w.appendFileSync(d,`\n  ${n}`),en++}if(!t.find((n=>"access-analyzer.amazonaws.com"===n.service))){const n=await A(en,an,"AWS IAM Access Analyzer");w.appendFileSync(d,`\n  ${n}`),en++}if(!t.find((n=>"cloudtrail.amazonaws.com"===n.service))){const n=await A(en,an,"AWS CloudTrail");w.appendFileSync(d,`\n  ${n}`),en++}if(!t.find((n=>"config.amazonaws.com"===n.service))){const n=await A(en,an,"AWS Config");w.appendFileSync(d,`\n  ${n}`),en++}if(!G){const n=await F(en,an,"Security Hub");w.appendFileSync(d,`\n  ${n}`),en++}if(!K){const n=await F(en,an,"GuardDuty");w.appendFileSync(d,`\n  ${n}`),en++}if(!V){const n=await F(en,an,"AWS Config");w.appendFileSync(d,`\n  ${n}`),en++}if(!Z){const n=await F(en,an,"AWS IAM Access Analyzer");w.appendFileSync(d,`\n  ${n}`),en++}if(!B){const n=await F(en,an,"S3 Storage Lens");w.appendFileSync(d,`\n  ${n}`),en++}w.appendFileSync(d,"\n\n*********************************************************"),w.appendFileSync(d,"\n                    NETWORK"),w.appendFileSync(d,"\n*********************************************************"),w.appendFileSync(d,"\n\nNETWORK RECOMMENDED TASKS:");let on=1;const cn="Network";if(!t.find((n=>"guardduty.amazonaws.com"===n.service))){const n=await A(on,cn,"AWS GuardDuty");w.appendFileSync(d,`\n  ${n}`),on++}if(!t.find((n=>"ipam.amazonaws.com"===n.service))){const n=await A(on,cn,"AWS IPAM");w.appendFileSync(d,`\n  ${n}`),on++}if(!t.find((n=>"ram.amazonaws.com"===n.service))){const n=await A(on,cn,"AWS Resource Access Manager");w.appendFileSync(d,`\n  ${n}`),on++}if(!Y){const n=await F(on,cn,"AWS IPAM");w.appendFileSync(d,`\n  ${n}`),on++}w.appendFileSync(d,"\n\n*********************************************************"),w.appendFileSync(d,"\n                  OBSERVABILITY"),w.appendFileSync(d,"\n*********************************************************"),w.appendFileSync(d,"\n\nOBSERVABILITY RECOMMENDED TASKS:");let tn=1;const sn="Observability";if(!t.find((n=>"account.amazonaws.com"===n.service))){const n=await A(tn,sn,"Account Manager");w.appendFileSync(d,`\n  ${n}`),tn++}if(!q){const n=await F(tn,sn,"Account Manager");w.appendFileSync(d,`\n  ${n}`),tn++}w.appendFileSync(d,"\n\n*********************************************************"),w.appendFileSync(d,"\n               BACKUP AND RECOVERY"),w.appendFileSync(d,"\n*********************************************************"),w.appendFileSync(d,"\n\nBACKUP AND RECOVERY RECOMMENDED TASKS:");let rn=1;const ln="Backup and Recovery";if(!t.find((n=>"backup.amazonaws.com"===n.service))){const n=await A(rn,ln,"AWS Backup");w.appendFileSync(d,`\n  ${n}`),rn++}if(!H){const n=await F(rn,ln,"AWS Backup");w.appendFileSync(d,`\n  ${n}`),rn++}}else if(E.isInOrganization&&!E.isManagementAccount){const n="\nWARNING: You are running Pathfinder from an account that is a member of your AWS Organization. Please run the solution from your AWS Management account.";console.warn(n),w.appendFileSync(d,n)}else{const n="\nWARNING: You are running Pathfinder from an account that not part of an AWS Organization. This account will be treated as a standalone account.";console.warn(n),w.appendFileSync(d,n)}w.appendFileSync(d,"\n\n\n  END REVIEW")})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,