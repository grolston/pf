(()=>{"use strict";const n=require("@aws-sdk/client-organizations"),e=require("@aws-sdk/client-iam"),o=require("@aws-sdk/client-cloudformation"),i=require("@aws-sdk/client-sso-admin"),t=require("@aws-sdk/client-ec2"),a=require("@aws-sdk/client-cloudtrail"),s=require("@aws-sdk/client-config-service"),c=require("@aws-sdk/client-controltower"),r=require("@aws-sdk/client-cost-and-usage-report-service"),l=require("fs");(async()=>{const d="./Pathfinder.txt";let p=new Date;l.writeFileSync(d,"Cloud Foundations - Pathfinder"),l.appendFileSync(d,`\nGenerated on: ${p.toUTCString()} \n\n`),l.appendFileSync(d,"\n---------------------------------------------------------");const u=process.env.AWS_REGION||"us-east-1",y=await async function(){const n=new t.EC2Client({region:"us-east-1"});try{const e=new t.DescribeRegionsCommand({}),o=await n.send(e),i=[];for(const n of o.Regions||[])i.push(n.RegionName||"");return i}catch(n){return console.error("Error retrieving regions:",n),[]}finally{n.destroy()}}(),g=await(async e=>{const o=new n.OrganizationsClient({region:e});try{const e=new n.DescribeOrganizationCommand({}),i=await o.send(e),t=!!i.Organization;return i.Organization?.MasterAccountId?{isInOrganization:t,isManagementAccount:i.Organization?.MasterAccountId==i.Organization?.MasterAccountId}:{isInOrganization:t}}catch(n){return console.error("Error:",n),{isInOrganization:!1}}finally{o.destroy()}})(u);if(l.appendFileSync(d,"\n\nAWS ACCOUNT TYPE\n"),g&&(console.dir(g,{depth:null,colors:!0}),l.appendFileSync(d,`\n  Is in AWS Organization: ${g.isInOrganization}`),l.appendFileSync(d,`\n  Assessing AWS Management Account: ${g.isManagementAccount}`)),g.isInOrganization&&g.isManagementAccount){l.appendFileSync(d,"\n\n---------------------------------------------------------"),l.appendFileSync(d,"\n\nLegacy CUR\n");const e=await(async n=>{const e=new r.CostAndUsageReportServiceClient({region:n});let o=!1;try{const n={},i=new r.DescribeReportDefinitionsCommand(n),t=await e.send(i);return t.ReportDefinitions&&t.ReportDefinitions.length>0&&(o=!0),{isLegacyCurSetup:o}}catch(n){return console.error(`Error: ${n}`),o=!1,{isLegacyCurSetup:o}}finally{e.destroy()}})(u);console.dir(e,{depth:null,colors:!0}),l.appendFileSync(d,`\n  Is legacy CUR setup: ${e.isLegacyCurSetup}`),l.appendFileSync(d,"\n\n---------------------------------------------------------"),l.appendFileSync(d,"\n\nAWS ORGANIZATION POLICY TYPES\n");const t=await async function(e){const o=new n.OrganizationsClient({region:e});let i={scpEnabled:!1,tagPolicyEnabled:!1,backupPolicyEnabled:!1};try{const e={},t=new n.ListRootsCommand(e),a=await o.send(t);if(a.Roots&&a.Roots[0].PolicyTypes)for(const n of a.Roots[0].PolicyTypes)"SERVICE_CONTROL_POLICY"==n.Type&&"ENABLED"==n.Status&&(i.scpEnabled=!0),"TAG_POLICY"==n.Type&&"ENABLED"==n.Status&&(i.tagPolicyEnabled=!0),"BACKUP_POLICY"==n.Type&&"ENABLED"==n.Status&&(i.backupPolicyEnabled=!0)}catch(n){console.error(`An error occurred: ${n}`)}finally{return o.destroy(),i}}(u);console.dir(t,{depth:null,colors:!0}),l.appendFileSync(d,`\n  Service Control Policies (SCP) enabled: ${t.scpEnabled}`),l.appendFileSync(d,`\n  Tag Policies enabled: ${t.tagPolicyEnabled}`),l.appendFileSync(d,`\n  Backup Policies enabled: ${t.backupPolicyEnabled}`),l.appendFileSync(d,"\n\n---------------------------------------------------------"),l.appendFileSync(d,"\n\nAWS ORGANIZATION ENABLED SERVICES\n");const a=await async function(e){const o=[],i=new n.OrganizationsClient({region:e});try{const e=new n.ListAWSServiceAccessForOrganizationCommand({}),t=await i.send(e);if(t.EnabledServicePrincipals&&t.EnabledServicePrincipals.length>0){t.EnabledServicePrincipals;for(const n of t.EnabledServicePrincipals){const e={service:n.ServicePrincipal??""};o.push(e)}}}catch(n){console.error("Error checking service access:",n)}finally{return i.destroy(),o}}(u);console.dir(a,{depth:null,colors:!0}),l.appendFileSync(d,"\n  The following AWS Services are enabled within your AWS Organization:");for(const n of a)l.appendFileSync(d,`\n    ${n.service}`);l.appendFileSync(d,"\n\n---------------------------------------------------------"),l.appendFileSync(d,"\n\nAWS ORGANIZATION INTEGRATED SERVICE REGISTERED DELEGATED ADMINS\n");const s=await async function(){let e=[];const o=new n.OrganizationsClient({region:"us-east-1"});let i={};try{const t=new n.ListDelegatedAdministratorsCommand({}),a=await o.send(t);if(a.DelegatedAdministrators)for(const t of a.DelegatedAdministrators){const a={AccountId:t.Id},s=new n.ListDelegatedServicesForAccountCommand(a),c=await o.send(s);c.DelegatedServices&&(i={services:c.DelegatedServices,accountName:t.Name},e.push(i))}}catch(n){console.log("Error looking for delegated services.")}finally{o.destroy()}return e}();if(console.dir(s,{depth:null,colors:!0}),s&&s.length>0)for(const n of s){if(l.appendFileSync(d,`\n  Account: ${n.accountName}`),n.services&&n.services.length>0){l.appendFileSync(d,"\n  Delegated Services:");for(const e of n.services)l.appendFileSync(d,`\n    ${e.ServicePrincipal}`)}l.appendFileSync(d,"\n ")}else l.appendFileSync(d,"\n  No delegated admin accounts in AWS Organization");l.appendFileSync(d,"\n\n---------------------------------------------------------"),l.appendFileSync(d,"\n\nAWS ORGANIZATION CLOUDFORMATION\n");const p=await async function(n){let e={status:"disabled"};const i=new o.CloudFormationClient({region:n});try{const n={},t=new o.DescribeOrganizationsAccessCommand(n),a=await i.send(t);e.status=a.Status??"disabled"}catch(n){console.log(`Error: ${n}`)}finally{return i.destroy(),e}}(u);console.dir(p,{depth:null,colors:!0}),l.appendFileSync(d,`\n  AWS CloudFormation Organization stack sets status : ${p.status}`),l.appendFileSync(d,"\n\n---------------------------------------------------------"),l.appendFileSync(d,"\n\nAWS CONTROL TOWER\n");const g=await async function(n){let e={};const o=new c.ControlTowerClient({region:n});try{const n=new c.ListLandingZonesCommand({}),i=await o.send(n);if(console.log(JSON.stringify(i.landingZones,null,2)),i.landingZones&&i.landingZones.length>0){const n={landingZoneIdentifier:i.landingZones[0].arn},o=i.landingZones[0].arn?.toString().split(":")[3]??"";if(o){e.controlTowerRegion=o;const i=new c.ControlTowerClient({region:o}),t=new c.GetLandingZoneCommand(n),a=await i.send(t);a.landingZone&&(console.log(JSON.stringify(a.landingZone,null,2)),e.status=a.landingZone.status,e.latestAvailableVersion=a.landingZone.latestAvailableVersion,e.deployedVersion=a.landingZone.version,e.driftStatus=a.landingZone.driftStatus?.status)}}}catch(e){console.error(`Error checking Control Tower in ${n}:`,e)}finally{o.destroy()}return e}(u);g?(console.dir(g,{depth:null,colors:!0}),l.appendFileSync(d,`\n  Control Tower home region: ${g.controlTowerRegion}`),l.appendFileSync(d,`\n  Control Tower status: ${g.status}`),l.appendFileSync(d,`\n  Control Tower Landing Zone version: ${g.deployedVersion}`),l.appendFileSync(d,`\n  Latest available version: ${g.deployedVersion}`),l.appendFileSync(d,`\n  Drift Status: ${g.driftStatus}`)):l.appendFileSync(d,"\n  AWS Control Tower is not deployed in the AWS Organization"),l.appendFileSync(d,"\n\n---------------------------------------------------------"),l.appendFileSync(d,"\n\nAWS IAM IDENTITY CENTER\n");const S=await async function(n){let e={found:!1};for(const o of n){const n=new i.SSOAdminClient({region:o});try{const t={MaxResults:Number("100")},a=new i.ListInstancesCommand(t),s=await n.send(a);if(s.Instances&&s.Instances.length>0){const n=s.Instances[0];e.found=!0,e.region=o,e.arn=n.InstanceArn,e.id=n.IdentityStoreId;break}}catch(n){console.log(`Error looking for AWS Identity Center details in region ${o}`)}finally{n.destroy()}}return e}(y);console.dir(S,{depth:null,colors:!0}),l.appendFileSync(d,`\n  IdC Region: ${S.region}`),l.appendFileSync(d,`\n  IdC ARN: ${S.arn}`),l.appendFileSync(d,`\n  IdC Instance Id: ${S.id}`),l.appendFileSync(d,"\n\n---------------------------------------------------------"),l.appendFileSync(d,"\n\nAWS ORGANIZATION DETAILS\n");const f=await async function(e){const o=new n.OrganizationsClient({region:e});let i={};try{const e=new n.DescribeOrganizationCommand({}),t=await o.send(e);t.Organization&&(i.id=t.Organization.Id??"",i.arn=t.Organization.Arn??"");const a=new n.ListRootsCommand({}),s=await o.send(a);s.Roots?i.rootOuId=s.Roots[0].Id:console.log("No info found for your AWS Organization.")}catch(n){console.error(`An error occurred: ${n}`)}finally{return o.destroy(),i}}(u);if(console.dir(f,{depth:null,colors:!0}),l.appendFileSync(d,`\n  AWS Organization Id: ${f.id}`),l.appendFileSync(d,`\n  AWS Organization ARN: ${f.arn}`),l.appendFileSync(d,`\n  AWS Organization Root OU Id: ${f.rootOuId}`),f.rootOuId){l.appendFileSync(d,"\n\n---------------------------------------------------------"),l.appendFileSync(d,"\n\nAWS ORGANIZATION TOP-LEVEL ORGANIZATION UNITS\n");const e=await async function(e,o){const i=new n.OrganizationsClient({region:e});let t=[];try{const e=new n.ListOrganizationalUnitsForParentCommand({ParentId:o}),a=await i.send(e);if(a.OrganizationalUnits)for(const e of a.OrganizationalUnits){let o={id:e.Id,name:e.Name};const a=await i.send(new n.ListAccountsForParentCommand({ParentId:e.Id}));a.Accounts&&a.Accounts.length>0&&(o.accounts=a.Accounts),t.push(o)}}catch(n){return console.error("Error checking service access:",n),[]}finally{i.destroy()}return t}(u,f.rootOuId);if(console.dir(e,{depth:null,colors:!0}),l.appendFileSync(d,"\n  List of Organization's top-level OUs and AWS accounts:"),e&&e.length>0)for(const n of e){if(l.appendFileSync(d,`\n    Organizational Unit: ${n.name}`),l.appendFileSync(d,`\n      Organizational Unit Id: ${n.id}`),n.accounts&&n.accounts.length>0){l.appendFileSync(d,"\n      AWS Accounts:");for(const e of n.accounts)l.appendFileSync(d,`\n        ${e.Name}`);l.appendFileSync(d,"\n")}else l.appendFileSync(d,"\n      AWS Accounts: None");l.appendFileSync(d,"\n")}else l.appendFileSync(d,"\n  No top level OUs found.")}l.appendFileSync(d,"\n\n---------------------------------------------------------"),l.appendFileSync(d,"\n\nAWS ORGANIZATION MEMBER ACCOUNTS\n");const A=await async function(){let e=[];const o=new n.OrganizationsClient({region:"us-east-1"});try{const i=await o.send(new n.ListAccountsCommand({}));if(i.Accounts&&i.Accounts.length>0)for(const n of i.Accounts){let o={accountName:n.Name,accountEmail:n.Email};e.push(o)}}catch(n){console.error("Error listing AWS accounts:",n)}finally{o.destroy()}return e}();if(console.dir(A,{depth:null,colors:!0}),A&&A.length>0)for(const n of A)l.appendFileSync(d,`\n  Account: ${n.accountName}`),l.appendFileSync(d,`\n  Account Email: ${n.accountEmail}\n`);else l.appendFileSync(d,"No member accounts found which is amazing as this is running from one.")}else if(g.isInOrganization&&!g.isManagementAccount){const n="\nWARNING: You are running PAAT from an account that is a member of your AWS Organization. Please run the solution from your AWS Management account.";console.warn(n),l.appendFileSync(d,n)}else{const n="\nWARNING: You are running PAAT from an account that not part of an AWS Organization. This account will be treated as a standalone account.";console.warn(n),l.appendFileSync(d,n)}l.appendFileSync(d,"\n\n\n---------------------------------------------------------"),l.appendFileSync(d,"\n---------------------------------------------------------"),l.appendFileSync(d,"\nAWS MANAGEMENT ACCOUNT CHECKS"),l.appendFileSync(d,"\n---------------------------------------------------------"),l.appendFileSync(d,"\n---------------------------------------------------------\n");const S=await(async()=>{const n=new e.IAMClient({region:"us-east-1"}),o=[];try{const i=new e.ListUsersCommand({}),t=await n.send(i);for(const i of t.Users||[]){const t=i.UserName||"",a=new e.ListAccessKeysCommand({UserName:t}),s=(await n.send(a)).AccessKeyMetadata||[];if(s.length>0)for(const i of s){const a=i.AccessKeyId||"",s=new e.GetAccessKeyLastUsedCommand({AccessKeyId:a}),c=await n.send(s),r={userName:t,accessKeyId:a,lastUsed:c&&c.AccessKeyLastUsed&&`${c.AccessKeyLastUsed.LastUsedDate}`||"Not available"};o.push(r)}else{const n={userName:t};o.push(n)}}}catch(n){console.error("Error:",n)}finally{n.destroy()}return o})();if(l.appendFileSync(d,"\n\nIAM USERS CHECK\n"),S&&S.length>0){console.dir(S,{depth:null,colors:!0});for(const n of S)l.appendFileSync(d,`\n  IAM User: ${n.userName}`),n.accessKeyId&&l.appendFileSync(d,`\n    User API Key ID: ${n.accessKeyId}`),l.appendFileSync(d,"\n")}else l.appendFileSync(d,"\n  No IAM Users found.");l.appendFileSync(d,"\n\n---------------------------------------------------------");const f=await async function(n){let e=[];for(const o of n){const n=new t.EC2Client({region:o}),i=new t.DescribeInstancesCommand({});try{const t=await n.send(i);if(t.Reservations)if(t.Reservations.length>0){const n={region:o,ec2Found:!0};e.push(n)}else{const n={region:o,ec2Found:!1};e.push(n)}else{const n={region:o,ec2Found:!1};e.push(n)}}catch(n){console.log(`Error checking instance: ${n}`)}finally{n.destroy()}}return e}(y);if(l.appendFileSync(d,"\n\nEC2 INSTANCE CHECK\n"),f&&f.find((n=>!0===n.ec2Found))){console.dir(f,{depth:null,colors:!0});for(const n of f)n.ec2Found&&l.appendFileSync(d,`\n  ${n.region} - found EC2 Instance(s).`)}else l.appendFileSync(d,"\n  No EC2 instances found.");l.appendFileSync(d,"\n\n---------------------------------------------------------");const A=await async function(n){let e=[];for(const o of n){const n=new t.EC2Client({region:o}),i=new t.DescribeVpcsCommand({});try{const t=await n.send(i);if(t.Vpcs)if(t.Vpcs.length>0){const n={region:o,vpcFound:!0};e.push(n)}else{const n={region:o,vpcFound:!1};e.push(n)}else{const n={region:o,vpcFound:!1};e.push(n)}}catch(n){console.log(`Error checking instance: ${n}`)}finally{n.destroy()}}return e}(y);if(l.appendFileSync(d,"\n\nVPC CHECK\n"),A&&A.length>0){console.dir(A,{depth:null,colors:!0});for(const n of A)n.vpcFound&&l.appendFileSync(d,`\n  ${n.region} - found VPC(s).`)}else l.appendFileSync(d,"\n  No VPCs found.");l.appendFileSync(d,"\n\n---------------------------------------------------------");const F=await async function(n){let e=[];for(const o of n){const n=new a.CloudTrailClient({region:o}),i=new a.DescribeTrailsCommand({});try{const t=await n.send(i);if(t.trailList)for(const n of t.trailList){let i={};i=n.HomeRegion==o?{region:o,trailFound:!0,isOrgTrail:n.IsMultiRegionTrail,isMultiRegion:n.IsMultiRegionTrail}:{region:o,trailFound:!1},e.push(i)}}catch(n){console.log(`Error checking instance: ${n}`)}finally{n.destroy()}}return e}(y);if(l.appendFileSync(d,"\n\nCLOUDTRAIL CHECK\n"),F&&F.length>0){console.dir(F,{depth:null,colors:!0});for(const n of F)n.trailFound&&(l.appendFileSync(d,`\n  CloudTrail found in ${n.region}`),l.appendFileSync(d,`\n    Is Organization Trail: ${n.isOrgTrail}`),l.appendFileSync(d,`\n    Is MultiRegion: ${n.isMultiRegion}`),l.appendFileSync(d,"\n"))}else l.appendFileSync(d,"\n  No AWS CloudTrail resource discovered");l.appendFileSync(d,"\n"),l.appendFileSync(d,"\n\n---------------------------------------------------------");const C=await async function(n){let e=[];for(const o of n){const n=new s.ConfigServiceClient({region:o});let i={region:o,configRecorderFound:!1,configDeliveryChannelFound:!1};try{const o=await n.send(new s.DescribeConfigurationRecorderStatusCommand({}));0!==o.ConfigurationRecordersStatus?.length&&(i.configRecorderFound=!0);const t=await n.send(new s.DescribeDeliveryChannelsCommand({}));0!==t.DeliveryChannels?.length&&(i.configDeliveryChannelFound=!0),e.push(i)}catch(n){console.error(`Error checking AWS Config in ${o}:`,n)}finally{n.destroy()}}return e}(y);if(l.appendFileSync(d,"\n\nAWS CONFIG CHECK\n"),C&&C.find((n=>!0===n.configRecorderFound))){console.dir(C,{depth:null,colors:!0});for(const n of C)n.configRecorderFound&&l.appendFileSync(d,`\n  ${n.region} - Config Recorder found`),n.configDeliveryChannelFound&&l.appendFileSync(d,`\n  ${n.region} - Config Delivery Channel found`)}else l.appendFileSync(d,"\n  No AWS Config resource discovered");l.appendFileSync(d,"\n\n\n  END ASSESSMENT")})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,