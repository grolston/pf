(()=>{"use strict";const n=require("@aws-sdk/client-organizations"),e=require("@aws-sdk/client-iam"),o=require("@aws-sdk/client-cloudformation"),i=require("@aws-sdk/client-sso-admin"),t=require("@aws-sdk/client-ec2"),a=require("@aws-sdk/client-cloudtrail"),s=require("@aws-sdk/client-config-service"),c=require("@aws-sdk/client-controltower"),r=require("@aws-sdk/client-cost-and-usage-report-service"),l=require("fs");(async()=>{const d="./Pathfinder.txt";let p=new Date;l.writeFileSync(d,"Cloud Foundations - Pathfinder"),l.appendFileSync(d,`\nGenerated on: ${p.toUTCString()} \n\n`),l.appendFileSync(d,"\n---------------------------------------------------------");const u=process.env.AWS_REGION||"us-east-1",y=await async function(){const n=new t.EC2Client({region:"us-east-1"});try{const e=new t.DescribeRegionsCommand({}),o=await n.send(e),i=[];for(const n of o.Regions||[])i.push(n.RegionName||"");return i}catch(n){return console.error("Error retrieving regions:",n),[]}finally{n.destroy()}}(),g=await(async e=>{const o=new n.OrganizationsClient({region:e});try{const e=new n.DescribeOrganizationCommand({}),i=await o.send(e),t=!!i.Organization;return i.Organization?.MasterAccountId?{isInOrganization:t,isManagementAccount:i.Organization?.MasterAccountId==i.Organization?.MasterAccountId}:{isInOrganization:t}}catch(n){return console.error("Error:",n),{isInOrganization:!1}}finally{o.destroy()}})(u);if(l.appendFileSync(d,"\n\nAWS ACCOUNT TYPE\n"),g&&(console.dir(g,{depth:null,colors:!0}),l.appendFileSync(d,`\n  Is in AWS Organization: ${g.isInOrganization}`),l.appendFileSync(d,`\n  Assessing AWS Management Account: ${g.isManagementAccount}`)),g.isInOrganization&&g.isManagementAccount){l.appendFileSync(d,"\n\n---------------------------------------------------------"),l.appendFileSync(d,"\n\nLegacy CUR\n");const e=await(async n=>{const e=new r.CostAndUsageReportServiceClient({region:n});let o=!1;try{const n={},i=new r.DescribeReportDefinitionsCommand(n),t=await e.send(i);return console.log(JSON.stringify(t,null,2)),t.ReportDefinitions&&t.ReportDefinitions.length>0&&(o=!0),{isLegacyCurSetup:o}}catch(n){return console.error(`Error: ${n}`),o=!1,{isLegacyCurSetup:o}}finally{e.destroy()}})(u);console.dir(e,{depth:null,colors:!0}),l.appendFileSync(d,`\n  Is legacy CUR setup: ${e.isLegacyCurSetup}`),l.appendFileSync(d,"\n\n---------------------------------------------------------"),l.appendFileSync(d,"\n\nAWS ORGANIZATION POLICY TYPES\n");const t=await async function(e){const o=new n.OrganizationsClient({region:e});let i={scpEnabled:!1,tagPolicyEnabled:!1,backupPolicyEnabled:!1};try{const e={},t=new n.ListRootsCommand(e),a=await o.send(t);if(a.Roots&&a.Roots[0].PolicyTypes)for(const n of a.Roots[0].PolicyTypes)"SERVICE_CONTROL_POLICY"==n.Type&&"ENABLED"==n.Status&&(i.scpEnabled=!0),"TAG_POLICY"==n.Type&&"ENABLED"==n.Status&&(i.tagPolicyEnabled=!0),"BACKUP_POLICY"==n.Type&&"ENABLED"==n.Status&&(i.backupPolicyEnabled=!0)}catch(n){console.error(`An error occurred: ${n}`)}finally{return o.destroy(),i}}(u);console.dir(t,{depth:null,colors:!0}),l.appendFileSync(d,`\n  Service Control Policies (SCP) enabled: ${t.scpEnabled}`),l.appendFileSync(d,`\n  Tag Policies enabled: ${t.tagPolicyEnabled}`),l.appendFileSync(d,`\n  Backup Policies enabled: ${t.backupPolicyEnabled}`),l.appendFileSync(d,"\n\n---------------------------------------------------------"),l.appendFileSync(d,"\n\nAWS ORGANIZATION ENABLED SERVICES\n");const a=await async function(e){const o=[],i=new n.OrganizationsClient({region:e});try{const e=new n.ListAWSServiceAccessForOrganizationCommand({}),t=await i.send(e);if(t.EnabledServicePrincipals&&t.EnabledServicePrincipals.length>0){t.EnabledServicePrincipals;for(const n of t.EnabledServicePrincipals){const e={service:n.ServicePrincipal??""};o.push(e)}}}catch(n){console.error("Error checking service access:",n)}finally{return i.destroy(),o}}(u);console.dir(a,{depth:null,colors:!0}),l.appendFileSync(d,"\n  The following AWS Services are enabled within your AWS Organization:");for(const n of a)l.appendFileSync(d,`\n    ${n.service}`);l.appendFileSync(d,"\n\n---------------------------------------------------------"),l.appendFileSync(d,"\n\nAWS ORGANIZATION INTEGRATED SERVICE REGISTERED DELEGATED ADMINS\n");const s=await async function(){let e=[];const o=new n.OrganizationsClient({region:"us-east-1"});let i={};try{const t=new n.ListDelegatedAdministratorsCommand({}),a=await o.send(t);if(a.DelegatedAdministrators)for(const t of a.DelegatedAdministrators){const a={AccountId:t.Id},s=new n.ListDelegatedServicesForAccountCommand(a),c=await o.send(s);c.DelegatedServices&&(i={services:c.DelegatedServices,accountName:t.Name},e.push(i))}}catch(n){console.log("Error looking for delegated services.")}finally{o.destroy()}return e}();if(console.dir(s,{depth:null,colors:!0}),s&&s.length>0)for(const n of s){if(l.appendFileSync(d,`\n  Account: ${n.accountName}`),n.services&&n.services.length>0){l.appendFileSync(d,"\n  Delegated Services:");for(const e of n.services)l.appendFileSync(d,`\n    ${e.ServicePrincipal}`)}l.appendFileSync(d,"\n ")}else l.appendFileSync(d,"\n  No delegated admin accounts in AWS Organization");l.appendFileSync(d,"\n\n---------------------------------------------------------"),l.appendFileSync(d,"\n\nAWS ORGANIZATION CLOUDFORMATION\n");const p=await async function(n){let e={status:"disabled"};const i=new o.CloudFormationClient({region:n});try{const n={},t=new o.DescribeOrganizationsAccessCommand(n),a=await i.send(t);e.status=a.Status??"disabled"}catch(n){console.log(`Error: ${n}`)}finally{return i.destroy(),e}}(u);console.dir(p,{depth:null,colors:!0}),l.appendFileSync(d,`\n  AWS CloudFormation Organization stack sets status : ${p.status}`),l.appendFileSync(d,"\n\n---------------------------------------------------------"),l.appendFileSync(d,"\n\nAWS CONTROL TOWER\n");const g=await async function(n){let e={};const o=new c.ControlTowerClient({region:n});try{const n=new c.ListLandingZonesCommand({}),i=await o.send(n);if(console.log(JSON.stringify(i.landingZones,null,2)),i.landingZones&&i.landingZones.length>0){const n={landingZoneIdentifier:i.landingZones[0].arn},o=i.landingZones[0].arn?.toString().split(":")[3]??"";if(o){e.controlTowerRegion=o;const i=new c.ControlTowerClient({region:o}),t=new c.GetLandingZoneCommand(n),a=await i.send(t);a.landingZone&&(console.log(JSON.stringify(a.landingZone,null,2)),e.status=a.landingZone.status,e.latestAvailableVersion=a.landingZone.latestAvailableVersion,e.deployedVersion=a.landingZone.version,e.driftStatus=a.landingZone.driftStatus?.status)}}}catch(e){console.error(`Error checking Control Tower in ${n}:`,e)}finally{o.destroy()}return e}(u);g?(console.dir(g,{depth:null,colors:!0}),l.appendFileSync(d,`\n  Control Tower home region: ${g.controlTowerRegion}`),l.appendFileSync(d,`\n  Control Tower status: ${g.status}`),l.appendFileSync(d,`\n  Control Tower Landing Zone version: ${g.deployedVersion}`),l.appendFileSync(d,`\n  Latest available version: ${g.deployedVersion}`),l.appendFileSync(d,`\n  Drift Status: ${g.driftStatus}`)):l.appendFileSync(d,"\n  AWS Control Tower is not deployed in the AWS Organization"),l.appendFileSync(d,"\n\n---------------------------------------------------------"),l.appendFileSync(d,"\n\nAWS IAM IDENTITY CENTER\n");const S=await async function(n){let e={found:!1};for(const o of n){const n=new i.SSOAdminClient({region:o});try{const t={MaxResults:Number("100")},a=new i.ListInstancesCommand(t),s=await n.send(a);if(s.Instances&&s.Instances.length>0){const n=s.Instances[0];e.found=!0,e.region=o,e.arn=n.InstanceArn,e.id=n.IdentityStoreId;break}}catch(n){console.log(`Error looking for AWS Identity Center details in region ${o}`)}finally{n.destroy()}}return e}(y);console.dir(S,{depth:null,colors:!0}),l.appendFileSync(d,`\n  IdC Region: ${S.region}`),l.appendFileSync(d,`\n  IdC ARN: ${S.arn}`),l.appendFileSync(d,`\n  IdC Instance Id: ${S.id}`),l.appendFileSync(d,"\n\n---------------------------------------------------------"),l.appendFileSync(d,"\n\nAWS ORGANIZATION DETAILS\n");const f=await async function(e){const o=new n.OrganizationsClient({region:e});let i={};try{const e=new n.DescribeOrganizationCommand({}),t=await o.send(e);t.Organization&&(i.id=t.Organization.Id??"",i.arn=t.Organization.Arn??"");const a=new n.ListRootsCommand({}),s=await o.send(a);s.Roots?i.rootOuId=s.Roots[0].Id:console.log("No info found for your AWS Organization.")}catch(n){console.error(`An error occurred: ${n}`)}finally{return o.destroy(),i}}(u);if(console.dir(f,{depth:null,colors:!0}),l.appendFileSync(d,`\n  AWS Organization Id: ${f.id}`),l.appendFileSync(d,`\n  AWS Organization ARN: ${f.arn}`),l.appendFileSync(d,`\n  AWS Organization Root OU Id: ${f.rootOuId}`),f.rootOuId){l.appendFileSync(d,"\n\n---------------------------------------------------------"),l.appendFileSync(d,"\n\nAWS ORGANIZATION TOP-LEVEL ORGANIZATION UNITS\n");const e=await async function(e,o){const i=new n.OrganizationsClient({region:e});let t=[];try{const e=new n.ListOrganizationalUnitsForParentCommand({ParentId:o}),a=await i.send(e);if(a.OrganizationalUnits)for(const e of a.OrganizationalUnits){let o={id:e.Id,name:e.Name};const a=await i.send(new n.ListAccountsForParentCommand({ParentId:e.Id}));a.Accounts&&a.Accounts.length>0&&(o.accounts=a.Accounts),t.push(o)}}catch(n){return console.error("Error checking service access:",n),[]}finally{i.destroy()}return t}(u,f.rootOuId);if(console.dir(e,{depth:null,colors:!0}),l.appendFileSync(d,"\n  List of Organization's top-level OUs and AWS accounts:"),e&&e.length>0)for(const n of e){if(l.appendFileSync(d,`\n    Organizational Unit: ${n.name}`),l.appendFileSync(d,`\n      Organizational Unit Id: ${n.id}`),n.accounts&&n.accounts.length>0){l.appendFileSync(d,"\n      AWS Accounts:");for(const e of n.accounts)l.appendFileSync(d,`\n        ${e.Name}`);l.appendFileSync(d,"\n")}else l.appendFileSync(d,"\n      AWS Accounts: None");l.appendFileSync(d,"\n")}else l.appendFileSync(d,"\n  No top level OUs found.")}l.appendFileSync(d,"\n\n---------------------------------------------------------"),l.appendFileSync(d,"\n\nAWS ORGANIZATION MEMBER ACCOUNTS\n");const A=await async function(){let e=[];const o=new n.OrganizationsClient({region:"us-east-1"});try{const i=await o.send(new n.ListAccountsCommand({}));if(i.Accounts&&i.Accounts.length>0)for(const n of i.Accounts){let o={accountName:n.Name,accountEmail:n.Email};e.push(o)}}catch(n){console.error("Error listing AWS accounts:",n)}finally{o.destroy()}return e}();if(console.dir(A,{depth:null,colors:!0}),A&&A.length>0)for(const n of A)l.appendFileSync(d,`\n  Account: ${n.accountName}`),l.appendFileSync(d,`\n  Account Email: ${n.accountEmail}\n`);else l.appendFileSync(d,"No member accounts found which is amazing as this is running from one.")}else if(g.isInOrganization&&!g.isManagementAccount){const n="\nWARNING: You are running PAAT from an account that is a member of your AWS Organization. Please run the solution from your AWS Management account.";console.warn(n),l.appendFileSync(d,n)}else{const n="\nWARNING: You are running PAAT from an account that not part of an AWS Organization. This account will be treated as a standalone account.";console.warn(n),l.appendFileSync(d,n)}l.appendFileSync(d,"\n\n\n---------------------------------------------------------"),l.appendFileSync(d,"\n---------------------------------------------------------"),l.appendFileSync(d,"\nAWS MANAGEMENT ACCOUNT CHECKS"),l.appendFileSync(d,"\n---------------------------------------------------------"),l.appendFileSync(d,"\n---------------------------------------------------------\n");const S=await(async()=>{const n=new e.IAMClient({region:"us-east-1"}),o=[];try{const i=new e.ListUsersCommand({}),t=await n.send(i);for(const i of t.Users||[]){const t=i.UserName||"",a=new e.ListAccessKeysCommand({UserName:t}),s=(await n.send(a)).AccessKeyMetadata||[];if(s.length>0)for(const i of s){const a=i.AccessKeyId||"",s=new e.GetAccessKeyLastUsedCommand({AccessKeyId:a}),c=await n.send(s),r={userName:t,accessKeyId:a,lastUsed:c&&c.AccessKeyLastUsed&&`${c.AccessKeyLastUsed.LastUsedDate}`||"Not available"};o.push(r)}else{const n={userName:t};o.push(n)}}}catch(n){console.error("Error:",n)}finally{n.destroy()}return o})();if(l.appendFileSync(d,"\n\nIAM USERS CHECK\n"),S&&S.length>0){console.dir(S,{depth:null,colors:!0});for(const n of S)l.appendFileSync(d,`\n  IAM User: ${n.userName}`),n.accessKeyId&&l.appendFileSync(d,`\n    User API Key ID: ${n.accessKeyId}`),l.appendFileSync(d,"\n")}else l.appendFileSync(d,"\n  No IAM Users found.");l.appendFileSync(d,"\n\n---------------------------------------------------------");const f=await async function(n){let e=[];for(const o of n){const n=new t.EC2Client({region:o}),i=new t.DescribeInstancesCommand({});try{const t=await n.send(i);if(t.Reservations)if(t.Reservations.length>0){const n={region:o,ec2Found:!0};e.push(n)}else{const n={region:o,ec2Found:!1};e.push(n)}else{const n={region:o,ec2Found:!1};e.push(n)}}catch(n){console.log(`Error checking instance: ${n}`)}finally{n.destroy()}}return e}(y);if(l.appendFileSync(d,"\n\nEC2 INSTANCE CHECK\n"),f&&f.find((n=>!0===n.ec2Found))){console.dir(f,{depth:null,colors:!0});for(const n of f)n.ec2Found&&l.appendFileSync(d,`\n  ${n.region} - found EC2 Instance(s).`)}else l.appendFileSync(d,"\n  No EC2 instances found.");l.appendFileSync(d,"\n\n---------------------------------------------------------");const A=await async function(n){let e=[];for(const o of n){const n=new t.EC2Client({region:o}),i=new t.DescribeVpcsCommand({});try{const t=await n.send(i);if(t.Vpcs)if(t.Vpcs.length>0){const n={region:o,vpcFound:!0};e.push(n)}else{const n={region:o,vpcFound:!1};e.push(n)}else{const n={region:o,vpcFound:!1};e.push(n)}}catch(n){console.log(`Error checking instance: ${n}`)}finally{n.destroy()}}return e}(y);if(l.appendFileSync(d,"\n\nVPC CHECK\n"),A&&A.length>0){console.dir(A,{depth:null,colors:!0});for(const n of A)n.vpcFound&&l.appendFileSync(d,`\n  ${n.region} - found VPC(s).`)}else l.appendFileSync(d,"\n  No VPCs found.");l.appendFileSync(d,"\n\n---------------------------------------------------------");const F=await async function(n){let e=[];for(const o of n){const n=new a.CloudTrailClient({region:o}),i=new a.DescribeTrailsCommand({});try{const t=await n.send(i);if(t.trailList)for(const n of t.trailList){let i={};i=n.HomeRegion==o?{region:o,trailFound:!0,isOrgTrail:n.IsMultiRegionTrail,isMultiRegion:n.IsMultiRegionTrail}:{region:o,trailFound:!1},e.push(i)}}catch(n){console.log(`Error checking instance: ${n}`)}finally{n.destroy()}}return e}(y);if(l.appendFileSync(d,"\n\nCLOUDTRAIL CHECK\n"),F&&F.length>0){console.dir(F,{depth:null,colors:!0});for(const n of F)n.trailFound&&(l.appendFileSync(d,`\n  CloudTrail found in ${n.region}`),l.appendFileSync(d,`\n    Is Organization Trail: ${n.isOrgTrail}`),l.appendFileSync(d,`\n    Is MultiRegion: ${n.isMultiRegion}`),l.appendFileSync(d,"\n"))}else l.appendFileSync(d,"\n  No AWS CloudTrail resource discovered");l.appendFileSync(d,"\n"),l.appendFileSync(d,"\n\n---------------------------------------------------------");const C=await async function(n){let e=[];for(const o of n){const n=new s.ConfigServiceClient({region:o});let i={region:o,configRecorderFound:!1,configDeliveryChannelFound:!1};try{const o=await n.send(new s.DescribeConfigurationRecorderStatusCommand({}));0!==o.ConfigurationRecordersStatus?.length&&(i.configRecorderFound=!0);const t=await n.send(new s.DescribeDeliveryChannelsCommand({}));0!==t.DeliveryChannels?.length&&(i.configDeliveryChannelFound=!1),e.push(i)}catch(n){console.error(`Error checking AWS Config in ${o}:`,n)}finally{n.destroy()}}return e}(y);if(l.appendFileSync(d,"\n\nAWS CONFIG CHECK\n"),C&&C.find((n=>!0===n.configRecorderFound))){console.dir(C,{depth:null,colors:!0});for(const n of C)n.configRecorderFound&&l.appendFileSync(d,`\n  ${n.region} - Config Recorder found`),n.configDeliveryChannelFound&&l.appendFileSync(d,`\n  ${n.region} - Config Delivery Channel found`)}else l.appendFileSync(d,"\n  No AWS Config resource discovered");l.appendFileSync(d,"\n\n\n  END ASSESSMENT")})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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ZXh0ZXJuYWwgY29tbW9uanMgXCJAYXdzLXNkay9jbGllbnQtb3JnYW5pemF0aW9uc1wiIiwid2VicGFjazovLy9leHRlcm5hbCBjb21tb25qcyBcIkBhd3Mtc2RrL2NsaWVudC1pYW1cIiIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgY29tbW9uanMgXCJAYXdzLXNkay9jbGllbnQtY2xvdWRmb3JtYXRpb25cIiIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgY29tbW9uanMgXCJAYXdzLXNkay9jbGllbnQtc3NvLWFkbWluXCIiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIGNvbW1vbmpzIFwiQGF3cy1zZGsvY2xpZW50LWVjMlwiIiwid2VicGFjazovLy9leHRlcm5hbCBjb21tb25qcyBcIkBhd3Mtc2RrL2NsaWVudC1jbG91ZHRyYWlsXCIiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIGNvbW1vbmpzIFwiQGF3cy1zZGsvY2xpZW50LWNvbmZpZy1zZXJ2aWNlXCIiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIGNvbW1vbmpzIFwiQGF3cy1zZGsvY2xpZW50LWNvbnRyb2x0b3dlclwiIiwid2VicGFjazovLy9leHRlcm5hbCBjb21tb25qcyBcIkBhd3Mtc2RrL2NsaWVudC1jb3N0LWFuZC11c2FnZS1yZXBvcnQtc2VydmljZVwiIiwid2VicGFjazovLy9leHRlcm5hbCBub2RlLWNvbW1vbmpzIFwiZnNcIiIsIndlYnBhY2s6Ly8vLi9idWlsZC9hcHAuanMiLCJ3ZWJwYWNrOi8vLy4vYnVpbGQvc3JjL2FjdGlvbnMvZ2V0LXJlZ2lvbnMuanMiLCJ3ZWJwYWNrOi8vLy4vYnVpbGQvc3JjL2FjdGlvbnMvZGVmaW5lLWFjY291bnQtdHlwZS5qcyIsIndlYnBhY2s6Ly8vLi9idWlsZC9zcmMvYWN0aW9ucy9jaGVjay1sZWdhY3ktY3VyLmpzIiwid2VicGFjazovLy8uL2J1aWxkL3NyYy9hY3Rpb25zL2dldC1lbmFibGVkLW9yZy1wb2xpY3ktdHlwZXMuanMiLCJ3ZWJwYWNrOi8vLy4vYnVpbGQvc3JjL2FjdGlvbnMvZ2V0LWVuYWJsZWQtb3JnLXNlcnZpY2VzLmpzIiwid2VicGFjazovLy8uL2J1aWxkL3NyYy9hY3Rpb25zL2dldC1vcmctZGEtYWNjb3VudHMuanMiLCJ3ZWJwYWNrOi8vLy4vYnVpbGQvc3JjL2FjdGlvbnMvY2hlY2stb3JnLWNsb3VkZm9ybWF0aW9uLmpzIiwid2VicGFjazovLy8uL2J1aWxkL3NyYy9hY3Rpb25zL2NoZWNrLWNvbnRyb2wtdG93ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vYnVpbGQvc3JjL2FjdGlvbnMvZ2V0LWlkYy1pbmZvLmpzIiwid2VicGFjazovLy8uL2J1aWxkL3NyYy9hY3Rpb25zL2dldC1vcmctZGV0YWlscy5qcyIsIndlYnBhY2s6Ly8vLi9idWlsZC9zcmMvYWN0aW9ucy9nZXQtb3JnLW91cy5qcyIsIndlYnBhY2s6Ly8vLi9idWlsZC9zcmMvYWN0aW9ucy9nZXQtb3JnLW1lbWJlci1hY2NvdW50cy5qcyIsIndlYnBhY2s6Ly8vLi9idWlsZC9zcmMvYWN0aW9ucy9jaGVjay1pYW0tdXNlcnMuanMiLCJ3ZWJwYWNrOi8vLy4vYnVpbGQvc3JjL2FjdGlvbnMvY2hlY2stZWMyLWV4aXN0ZW5jZS5qcyIsIndlYnBhY2s6Ly8vLi9idWlsZC9zcmMvYWN0aW9ucy9jaGVjay12cGMtZXhpc3RlbmNlLmpzIiwid2VicGFjazovLy8uL2J1aWxkL3NyYy9hY3Rpb25zL2NoZWNrLWNsb3VkdHJhaWwtZXhpc3RlbmNlLmpzIiwid2VicGFjazovLy8uL2J1aWxkL3NyYy9hY3Rpb25zL2NoZWNrLWNvbmZpZy1leGlzdGVuY2UuanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgX19XRUJQQUNLX05BTUVTUEFDRV9PQkpFQ1RfXyA9IHJlcXVpcmUoXCJAYXdzLXNkay9jbGllbnQtb3JnYW5pemF0aW9uc1wiKTsiLCJjb25zdCBfX1dFQlBBQ0tfTkFNRVNQQUNFX09CSkVDVF9fID0gcmVxdWlyZShcIkBhd3Mtc2RrL2NsaWVudC1pYW1cIik7IiwiY29uc3QgX19XRUJQQUNLX05BTUVTUEFDRV9PQkpFQ1RfXyA9IHJlcXVpcmUoXCJAYXdzLXNkay9jbGllbnQtY2xvdWRmb3JtYXRpb25cIik7IiwiY29uc3QgX19XRUJQQUNLX05BTUVTUEFDRV9PQkpFQ1RfXyA9IHJlcXVpcmUoXCJAYXdzLXNkay9jbGllbnQtc3NvLWFkbWluXCIpOyIsImNvbnN0IF9fV0VCUEFDS19OQU1FU1BBQ0VfT0JKRUNUX18gPSByZXF1aXJlKFwiQGF3cy1zZGsvY2xpZW50LWVjMlwiKTsiLCJjb25zdCBfX1dFQlBBQ0tfTkFNRVNQQUNFX09CSkVDVF9fID0gcmVxdWlyZShcIkBhd3Mtc2RrL2NsaWVudC1jbG91ZHRyYWlsXCIpOyIsImNvbnN0IF9fV0VCUEFDS19OQU1FU1BBQ0VfT0JKRUNUX18gPSByZXF1aXJlKFwiQGF3cy1zZGsvY2xpZW50LWNvbmZpZy1zZXJ2aWNlXCIpOyIsImNvbnN0IF9fV0VCUEFDS19OQU1FU1BBQ0VfT0JKRUNUX18gPSByZXF1aXJlKFwiQGF3cy1zZGsvY2xpZW50LWNvbnRyb2x0b3dlclwiKTsiLCJjb25zdCBfX1dFQlBBQ0tfTkFNRVNQQUNFX09CSkVDVF9fID0gcmVxdWlyZShcIkBhd3Mtc2RrL2NsaWVudC1jb3N0LWFuZC11c2FnZS1yZXBvcnQtc2VydmljZVwiKTsiLCJjb25zdCBfX1dFQlBBQ0tfTkFNRVNQQUNFX09CSkVDVF9fID0gcmVxdWlyZShcImZzXCIpOyIsImltcG9ydCB7IGRlZmluZUFjY291bnRUeXBlIH0gZnJvbSAnLi9zcmMvYWN0aW9ucy9kZWZpbmUtYWNjb3VudC10eXBlLmpzJztcbmltcG9ydCBjaGVja0lhbVVzZXJzIGZyb20gJy4vc3JjL2FjdGlvbnMvY2hlY2staWFtLXVzZXJzLmpzJztcbmltcG9ydCBnZXRFbmFibGVkT3JnUG9saWN5VHlwZXMgZnJvbSAnLi9zcmMvYWN0aW9ucy9nZXQtZW5hYmxlZC1vcmctcG9saWN5LXR5cGVzLmpzJztcbmltcG9ydCBnZXRFbmFibGVkT3JnU2VydmljZXMgZnJvbSAnLi9zcmMvYWN0aW9ucy9nZXQtZW5hYmxlZC1vcmctc2VydmljZXMuanMnO1xuaW1wb3J0IGdldE9yZ0Nsb3VkRm9ybWF0aW9uIGZyb20gJy4vc3JjL2FjdGlvbnMvY2hlY2stb3JnLWNsb3VkZm9ybWF0aW9uLmpzJztcbmltcG9ydCBnZXRJZGNJbmZvIGZyb20gJy4vc3JjL2FjdGlvbnMvZ2V0LWlkYy1pbmZvLmpzJztcbmltcG9ydCBnZXRPcmdEZXRhaWxzIGZyb20gJy4vc3JjL2FjdGlvbnMvZ2V0LW9yZy1kZXRhaWxzLmpzJztcbmltcG9ydCBnZXRPcmdUb3BMZXZlbE91cyBmcm9tICcuL3NyYy9hY3Rpb25zL2dldC1vcmctb3VzLmpzJztcbmltcG9ydCBnZXRBbGxSZWdpb25zIGZyb20gJy4vc3JjL2FjdGlvbnMvZ2V0LXJlZ2lvbnMuanMnO1xuaW1wb3J0IGNoZWNrRWMyRXhpc3RzIGZyb20gJy4vc3JjL2FjdGlvbnMvY2hlY2stZWMyLWV4aXN0ZW5jZS5qcyc7XG5pbXBvcnQgY2hlY2tWcGNFeGlzdHMgZnJvbSAnLi9zcmMvYWN0aW9ucy9jaGVjay12cGMtZXhpc3RlbmNlLmpzJztcbmltcG9ydCBjaGVja0Nsb3VkVHJhaWxFeGlzdHMgZnJvbSAnLi9zcmMvYWN0aW9ucy9jaGVjay1jbG91ZHRyYWlsLWV4aXN0ZW5jZS5qcyc7XG5pbXBvcnQgZ2V0T3JnRGFBY2NvdW50cyBmcm9tICcuL3NyYy9hY3Rpb25zL2dldC1vcmctZGEtYWNjb3VudHMuanMnO1xuaW1wb3J0IGNoZWNrQ29uZmlnRXhpc3RzIGZyb20gJy4vc3JjL2FjdGlvbnMvY2hlY2stY29uZmlnLWV4aXN0ZW5jZS5qcyc7XG5pbXBvcnQgZ2V0T3JnTWVtYmVyQWNjb3VudHMgZnJvbSAnLi9zcmMvYWN0aW9ucy9nZXQtb3JnLW1lbWJlci1hY2NvdW50cy5qcyc7XG5pbXBvcnQgZ2V0Q29udHJvbFRvd2VyIGZyb20gJy4vc3JjL2FjdGlvbnMvY2hlY2stY29udHJvbC10b3dlci5qcyc7XG5pbXBvcnQgY2hlY2tMZWdhY3lDdXIgZnJvbSAnLi9zcmMvYWN0aW9ucy9jaGVjay1sZWdhY3ktY3VyLmpzJztcbmltcG9ydCAqIGFzIGZzIGZyb20gJ2ZzJztcbmNvbnN0IG1haW4gPSBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgcmVwb3J0RmlsZSA9IFwiLi9QYXRoZmluZGVyLnR4dFwiO1xuICAgIGxldCBkYXRlVGltZSA9IG5ldyBEYXRlKCk7XG4gICAgZnMud3JpdGVGaWxlU3luYyhyZXBvcnRGaWxlLCBcIkNsb3VkIEZvdW5kYXRpb25zIC0gUGF0aGZpbmRlclwiKTtcbiAgICBmcy5hcHBlbmRGaWxlU3luYyhyZXBvcnRGaWxlLCBgXFxuR2VuZXJhdGVkIG9uOiAke2RhdGVUaW1lLnRvVVRDU3RyaW5nKCl9IFxcblxcbmApO1xuICAgIGZzLmFwcGVuZEZpbGVTeW5jKHJlcG9ydEZpbGUsIGBcXG4tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1gKTtcbiAgICAvLyBncmFiIHJlZ2lvbiBmcm9tIGF3cyBDbG91ZFNoZWxsLiBTZXQgZGVmYXVsdCB0aG91Z2ggcmVnaW9uIHNwZWNpZmljIGNhbGxzIGFyZSBmb3IgZ2xvYmFsIHNlcnZpY2VzXG4gICAgLy8gYW5kIHVzLWVhc3QtMSB3b3JrcyB0byBnZXQgZGV0YWlscy5cbiAgICBjb25zdCByZWdpb24gPSBwcm9jZXNzLmVudi5BV1NfUkVHSU9OIHx8ICd1cy1lYXN0LTEnO1xuICAgIC8vIGZ1bmN0aW9uIGNoZWNraW5nIGlmIG1hbmFnZW1lbnQgYWNjb3VudCwgbWVtYmVyIGFjY291bnQsIG9yIHN0YW5kYWxvbmUgYWNjb3VudFxuICAgIGNvbnN0IGFsbFJlZ2lvbnMgPSBhd2FpdCBnZXRBbGxSZWdpb25zKCk7XG4gICAgY29uc3QgYWNjb3VudFR5cGUgPSBhd2FpdCBkZWZpbmVBY2NvdW50VHlwZShyZWdpb24pO1xuICAgIGZzLmFwcGVuZEZpbGVTeW5jKHJlcG9ydEZpbGUsIGBcXG5cXG5BV1MgQUNDT1VOVCBUWVBFXFxuYCk7XG4gICAgaWYgKGFjY291bnRUeXBlKSB7XG4gICAgICAgIGNvbnNvbGUuZGlyKGFjY291bnRUeXBlLCB7IGRlcHRoOiBudWxsLCBjb2xvcnM6IHRydWUgfSk7XG4gICAgICAgIGZzLmFwcGVuZEZpbGVTeW5jKHJlcG9ydEZpbGUsIGBcXG4gIElzIGluIEFXUyBPcmdhbml6YXRpb246ICR7YWNjb3VudFR5cGUuaXNJbk9yZ2FuaXphdGlvbn1gKTtcbiAgICAgICAgZnMuYXBwZW5kRmlsZVN5bmMocmVwb3J0RmlsZSwgYFxcbiAgQXNzZXNzaW5nIEFXUyBNYW5hZ2VtZW50IEFjY291bnQ6ICR7YWNjb3VudFR5cGUuaXNNYW5hZ2VtZW50QWNjb3VudH1gKTtcbiAgICB9XG4gICAgLy8gYWxsIGNhbGxzIHJlcXVpcmUgYW4gQVdTIE9yZ2FuaXphdGlvbiBleGlzdCBhbmQgdGhlIGFjY291bnQgYmUgYSBtYW5hZ2VtZW50IGFjY291bnRcbiAgICBpZiAoYWNjb3VudFR5cGUuaXNJbk9yZ2FuaXphdGlvbiAmJiBhY2NvdW50VHlwZS5pc01hbmFnZW1lbnRBY2NvdW50KSB7XG4gICAgICAgIGZzLmFwcGVuZEZpbGVTeW5jKHJlcG9ydEZpbGUsIGBcXG5cXG4tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1gKTtcbiAgICAgICAgZnMuYXBwZW5kRmlsZVN5bmMocmVwb3J0RmlsZSwgYFxcblxcbkxlZ2FjeSBDVVJcXG5gKTtcbiAgICAgICAgY29uc3QgbGVnYWN5Q3VyQ2hlY2sgPSBhd2FpdCBjaGVja0xlZ2FjeUN1cihyZWdpb24pO1xuICAgICAgICBjb25zb2xlLmRpcihsZWdhY3lDdXJDaGVjaywgeyBkZXB0aDogbnVsbCwgY29sb3JzOiB0cnVlIH0pO1xuICAgICAgICBmcy5hcHBlbmRGaWxlU3luYyhyZXBvcnRGaWxlLCBgXFxuICBJcyBsZWdhY3kgQ1VSIHNldHVwOiAke2xlZ2FjeUN1ckNoZWNrLmlzTGVnYWN5Q3VyU2V0dXB9YCk7XG4gICAgICAgIGZzLmFwcGVuZEZpbGVTeW5jKHJlcG9ydEZpbGUsIGBcXG5cXG4tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1gKTtcbiAgICAgICAgZnMuYXBwZW5kRmlsZVN5bmMocmVwb3J0RmlsZSwgYFxcblxcbkFXUyBPUkdBTklaQVRJT04gUE9MSUNZIFRZUEVTXFxuYCk7XG4gICAgICAgIGNvbnN0IGVuYWJsZU9yZ1BvbGljaWVzQ2hlY2sgPSBhd2FpdCBnZXRFbmFibGVkT3JnUG9saWN5VHlwZXMocmVnaW9uKTtcbiAgICAgICAgY29uc29sZS5kaXIoZW5hYmxlT3JnUG9saWNpZXNDaGVjaywgeyBkZXB0aDogbnVsbCwgY29sb3JzOiB0cnVlIH0pO1xuICAgICAgICBmcy5hcHBlbmRGaWxlU3luYyhyZXBvcnRGaWxlLCBgXFxuICBTZXJ2aWNlIENvbnRyb2wgUG9saWNpZXMgKFNDUCkgZW5hYmxlZDogJHtlbmFibGVPcmdQb2xpY2llc0NoZWNrLnNjcEVuYWJsZWR9YCk7XG4gICAgICAgIGZzLmFwcGVuZEZpbGVTeW5jKHJlcG9ydEZpbGUsIGBcXG4gIFRhZyBQb2xpY2llcyBlbmFibGVkOiAke2VuYWJsZU9yZ1BvbGljaWVzQ2hlY2sudGFnUG9saWN5RW5hYmxlZH1gKTtcbiAgICAgICAgZnMuYXBwZW5kRmlsZVN5bmMocmVwb3J0RmlsZSwgYFxcbiAgQmFja3VwIFBvbGljaWVzIGVuYWJsZWQ6ICR7ZW5hYmxlT3JnUG9saWNpZXNDaGVjay5iYWNrdXBQb2xpY3lFbmFibGVkfWApO1xuICAgICAgICBmcy5hcHBlbmRGaWxlU3luYyhyZXBvcnRGaWxlLCBgXFxuXFxuLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tYCk7XG4gICAgICAgIGZzLmFwcGVuZEZpbGVTeW5jKHJlcG9ydEZpbGUsIGBcXG5cXG5BV1MgT1JHQU5JWkFUSU9OIEVOQUJMRUQgU0VSVklDRVNcXG5gKTtcbiAgICAgICAgY29uc3Qgb3JnRW5hYmxlZFNlcnZpY2VzID0gYXdhaXQgZ2V0RW5hYmxlZE9yZ1NlcnZpY2VzKHJlZ2lvbik7XG4gICAgICAgIGNvbnNvbGUuZGlyKG9yZ0VuYWJsZWRTZXJ2aWNlcywgeyBkZXB0aDogbnVsbCwgY29sb3JzOiB0cnVlIH0pO1xuICAgICAgICBmcy5hcHBlbmRGaWxlU3luYyhyZXBvcnRGaWxlLCBgXFxuICBUaGUgZm9sbG93aW5nIEFXUyBTZXJ2aWNlcyBhcmUgZW5hYmxlZCB3aXRoaW4geW91ciBBV1MgT3JnYW5pemF0aW9uOmApO1xuICAgICAgICBmb3IgKGNvbnN0IG9yZ1NlcnZpY2Ugb2Ygb3JnRW5hYmxlZFNlcnZpY2VzKSB7XG4gICAgICAgICAgICBmcy5hcHBlbmRGaWxlU3luYyhyZXBvcnRGaWxlLCBgXFxuICAgICR7b3JnU2VydmljZS5zZXJ2aWNlfWApO1xuICAgICAgICB9XG4gICAgICAgIGZzLmFwcGVuZEZpbGVTeW5jKHJlcG9ydEZpbGUsIGBcXG5cXG4tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1gKTtcbiAgICAgICAgZnMuYXBwZW5kRmlsZVN5bmMocmVwb3J0RmlsZSwgYFxcblxcbkFXUyBPUkdBTklaQVRJT04gSU5URUdSQVRFRCBTRVJWSUNFIFJFR0lTVEVSRUQgREVMRUdBVEVEIEFETUlOU1xcbmApO1xuICAgICAgICBjb25zdCBvcmdEZWxBZG1pbkRldGFpbHMgPSBhd2FpdCBnZXRPcmdEYUFjY291bnRzKCk7XG4gICAgICAgIGNvbnNvbGUuZGlyKG9yZ0RlbEFkbWluRGV0YWlscywgeyBkZXB0aDogbnVsbCwgY29sb3JzOiB0cnVlIH0pO1xuICAgICAgICBpZiAob3JnRGVsQWRtaW5EZXRhaWxzICYmIG9yZ0RlbEFkbWluRGV0YWlscy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGFjY291bnQgb2Ygb3JnRGVsQWRtaW5EZXRhaWxzKSB7XG4gICAgICAgICAgICAgICAgZnMuYXBwZW5kRmlsZVN5bmMocmVwb3J0RmlsZSwgYFxcbiAgQWNjb3VudDogJHthY2NvdW50LmFjY291bnROYW1lfWApO1xuICAgICAgICAgICAgICAgIGlmIChhY2NvdW50LnNlcnZpY2VzICYmIGFjY291bnQuc2VydmljZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBmcy5hcHBlbmRGaWxlU3luYyhyZXBvcnRGaWxlLCBgXFxuICBEZWxlZ2F0ZWQgU2VydmljZXM6YCk7XG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3Qgc3J2IG9mIGFjY291bnQuc2VydmljZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZzLmFwcGVuZEZpbGVTeW5jKHJlcG9ydEZpbGUsIGBcXG4gICAgJHtzcnYuU2VydmljZVByaW5jaXBhbH1gKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmcy5hcHBlbmRGaWxlU3luYyhyZXBvcnRGaWxlLCBgXFxuIGApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZnMuYXBwZW5kRmlsZVN5bmMocmVwb3J0RmlsZSwgYFxcbiAgTm8gZGVsZWdhdGVkIGFkbWluIGFjY291bnRzIGluIEFXUyBPcmdhbml6YXRpb25gKTtcbiAgICAgICAgfVxuICAgICAgICBmcy5hcHBlbmRGaWxlU3luYyhyZXBvcnRGaWxlLCBgXFxuXFxuLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tYCk7XG4gICAgICAgIGZzLmFwcGVuZEZpbGVTeW5jKHJlcG9ydEZpbGUsIGBcXG5cXG5BV1MgT1JHQU5JWkFUSU9OIENMT1VERk9STUFUSU9OXFxuYCk7XG4gICAgICAgIGNvbnN0IGNmbk9yZ1N0YXR1cyA9IGF3YWl0IGdldE9yZ0Nsb3VkRm9ybWF0aW9uKHJlZ2lvbik7XG4gICAgICAgIGNvbnNvbGUuZGlyKGNmbk9yZ1N0YXR1cywgeyBkZXB0aDogbnVsbCwgY29sb3JzOiB0cnVlIH0pO1xuICAgICAgICBmcy5hcHBlbmRGaWxlU3luYyhyZXBvcnRGaWxlLCBgXFxuICBBV1MgQ2xvdWRGb3JtYXRpb24gT3JnYW5pemF0aW9uIHN0YWNrIHNldHMgc3RhdHVzIDogJHtjZm5PcmdTdGF0dXMuc3RhdHVzfWApO1xuICAgICAgICBmcy5hcHBlbmRGaWxlU3luYyhyZXBvcnRGaWxlLCBgXFxuXFxuLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tYCk7XG4gICAgICAgIGZzLmFwcGVuZEZpbGVTeW5jKHJlcG9ydEZpbGUsIGBcXG5cXG5BV1MgQ09OVFJPTCBUT1dFUlxcbmApO1xuICAgICAgICBjb25zdCBjb250cm9sVG93ZXJEZXRhaWxzID0gYXdhaXQgZ2V0Q29udHJvbFRvd2VyKHJlZ2lvbik7XG4gICAgICAgIGlmIChjb250cm9sVG93ZXJEZXRhaWxzKSB7XG4gICAgICAgICAgICBjb25zb2xlLmRpcihjb250cm9sVG93ZXJEZXRhaWxzLCB7IGRlcHRoOiBudWxsLCBjb2xvcnM6IHRydWUgfSk7XG4gICAgICAgICAgICBmcy5hcHBlbmRGaWxlU3luYyhyZXBvcnRGaWxlLCBgXFxuICBDb250cm9sIFRvd2VyIGhvbWUgcmVnaW9uOiAke2NvbnRyb2xUb3dlckRldGFpbHMuY29udHJvbFRvd2VyUmVnaW9ufWApO1xuICAgICAgICAgICAgZnMuYXBwZW5kRmlsZVN5bmMocmVwb3J0RmlsZSwgYFxcbiAgQ29udHJvbCBUb3dlciBzdGF0dXM6ICR7Y29udHJvbFRvd2VyRGV0YWlscy5zdGF0dXN9YCk7XG4gICAgICAgICAgICBmcy5hcHBlbmRGaWxlU3luYyhyZXBvcnRGaWxlLCBgXFxuICBDb250cm9sIFRvd2VyIExhbmRpbmcgWm9uZSB2ZXJzaW9uOiAke2NvbnRyb2xUb3dlckRldGFpbHMuZGVwbG95ZWRWZXJzaW9ufWApO1xuICAgICAgICAgICAgZnMuYXBwZW5kRmlsZVN5bmMocmVwb3J0RmlsZSwgYFxcbiAgTGF0ZXN0IGF2YWlsYWJsZSB2ZXJzaW9uOiAke2NvbnRyb2xUb3dlckRldGFpbHMuZGVwbG95ZWRWZXJzaW9ufWApO1xuICAgICAgICAgICAgZnMuYXBwZW5kRmlsZVN5bmMocmVwb3J0RmlsZSwgYFxcbiAgRHJpZnQgU3RhdHVzOiAke2NvbnRyb2xUb3dlckRldGFpbHMuZHJpZnRTdGF0dXN9YCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBmcy5hcHBlbmRGaWxlU3luYyhyZXBvcnRGaWxlLCBgXFxuICBBV1MgQ29udHJvbCBUb3dlciBpcyBub3QgZGVwbG95ZWQgaW4gdGhlIEFXUyBPcmdhbml6YXRpb25gKTtcbiAgICAgICAgfVxuICAgICAgICBmcy5hcHBlbmRGaWxlU3luYyhyZXBvcnRGaWxlLCBgXFxuXFxuLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tYCk7XG4gICAgICAgIGZzLmFwcGVuZEZpbGVTeW5jKHJlcG9ydEZpbGUsIGBcXG5cXG5BV1MgSUFNIElERU5USVRZIENFTlRFUlxcbmApO1xuICAgICAgICBjb25zdCBpZGNJbmZvcm1hdGlvbiA9IGF3YWl0IGdldElkY0luZm8oYWxsUmVnaW9ucyk7XG4gICAgICAgIGNvbnNvbGUuZGlyKGlkY0luZm9ybWF0aW9uLCB7IGRlcHRoOiBudWxsLCBjb2xvcnM6IHRydWUgfSk7XG4gICAgICAgIGZzLmFwcGVuZEZpbGVTeW5jKHJlcG9ydEZpbGUsIGBcXG4gIElkQyBSZWdpb246ICR7aWRjSW5mb3JtYXRpb24ucmVnaW9ufWApO1xuICAgICAgICBmcy5hcHBlbmRGaWxlU3luYyhyZXBvcnRGaWxlLCBgXFxuICBJZEMgQVJOOiAke2lkY0luZm9ybWF0aW9uLmFybn1gKTtcbiAgICAgICAgZnMuYXBwZW5kRmlsZVN5bmMocmVwb3J0RmlsZSwgYFxcbiAgSWRDIEluc3RhbmNlIElkOiAke2lkY0luZm9ybWF0aW9uLmlkfWApO1xuICAgICAgICBmcy5hcHBlbmRGaWxlU3luYyhyZXBvcnRGaWxlLCBgXFxuXFxuLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tYCk7XG4gICAgICAgIGZzLmFwcGVuZEZpbGVTeW5jKHJlcG9ydEZpbGUsIGBcXG5cXG5BV1MgT1JHQU5JWkFUSU9OIERFVEFJTFNcXG5gKTtcbiAgICAgICAgY29uc3Qgb3JnRGV0YWlscyA9IGF3YWl0IGdldE9yZ0RldGFpbHMocmVnaW9uKTtcbiAgICAgICAgY29uc29sZS5kaXIob3JnRGV0YWlscywgeyBkZXB0aDogbnVsbCwgY29sb3JzOiB0cnVlIH0pO1xuICAgICAgICBmcy5hcHBlbmRGaWxlU3luYyhyZXBvcnRGaWxlLCBgXFxuICBBV1MgT3JnYW5pemF0aW9uIElkOiAke29yZ0RldGFpbHMuaWR9YCk7XG4gICAgICAgIGZzLmFwcGVuZEZpbGVTeW5jKHJlcG9ydEZpbGUsIGBcXG4gIEFXUyBPcmdhbml6YXRpb24gQVJOOiAke29yZ0RldGFpbHMuYXJufWApO1xuICAgICAgICBmcy5hcHBlbmRGaWxlU3luYyhyZXBvcnRGaWxlLCBgXFxuICBBV1MgT3JnYW5pemF0aW9uIFJvb3QgT1UgSWQ6ICR7b3JnRGV0YWlscy5yb290T3VJZH1gKTtcbiAgICAgICAgaWYgKG9yZ0RldGFpbHMucm9vdE91SWQpIHtcbiAgICAgICAgICAgIGZzLmFwcGVuZEZpbGVTeW5jKHJlcG9ydEZpbGUsIGBcXG5cXG4tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1gKTtcbiAgICAgICAgICAgIGZzLmFwcGVuZEZpbGVTeW5jKHJlcG9ydEZpbGUsIGBcXG5cXG5BV1MgT1JHQU5JWkFUSU9OIFRPUC1MRVZFTCBPUkdBTklaQVRJT04gVU5JVFNcXG5gKTtcbiAgICAgICAgICAgIGNvbnN0IG9yZ091cyA9IGF3YWl0IGdldE9yZ1RvcExldmVsT3VzKHJlZ2lvbiwgb3JnRGV0YWlscy5yb290T3VJZCk7XG4gICAgICAgICAgICBjb25zb2xlLmRpcihvcmdPdXMsIHsgZGVwdGg6IG51bGwsIGNvbG9yczogdHJ1ZSB9KTtcbiAgICAgICAgICAgIGZzLmFwcGVuZEZpbGVTeW5jKHJlcG9ydEZpbGUsIGBcXG4gIExpc3Qgb2YgT3JnYW5pemF0aW9uJ3MgdG9wLWxldmVsIE9VcyBhbmQgQVdTIGFjY291bnRzOmApO1xuICAgICAgICAgICAgaWYgKG9yZ091cyAmJiBvcmdPdXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3Qgb3Ugb2Ygb3JnT3VzKSB7XG4gICAgICAgICAgICAgICAgICAgIGZzLmFwcGVuZEZpbGVTeW5jKHJlcG9ydEZpbGUsIGBcXG4gICAgT3JnYW5pemF0aW9uYWwgVW5pdDogJHtvdS5uYW1lfWApO1xuICAgICAgICAgICAgICAgICAgICBmcy5hcHBlbmRGaWxlU3luYyhyZXBvcnRGaWxlLCBgXFxuICAgICAgT3JnYW5pemF0aW9uYWwgVW5pdCBJZDogJHtvdS5pZH1gKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG91LmFjY291bnRzICYmIG91LmFjY291bnRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZzLmFwcGVuZEZpbGVTeW5jKHJlcG9ydEZpbGUsIGBcXG4gICAgICBBV1MgQWNjb3VudHM6YCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGFjY291bnQgb2Ygb3UuYWNjb3VudHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcy5hcHBlbmRGaWxlU3luYyhyZXBvcnRGaWxlLCBgXFxuICAgICAgICAke2FjY291bnQuTmFtZX1gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGZzLmFwcGVuZEZpbGVTeW5jKHJlcG9ydEZpbGUsIGBcXG5gKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZzLmFwcGVuZEZpbGVTeW5jKHJlcG9ydEZpbGUsIGBcXG4gICAgICBBV1MgQWNjb3VudHM6IE5vbmVgKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBmcy5hcHBlbmRGaWxlU3luYyhyZXBvcnRGaWxlLCBgXFxuYCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZnMuYXBwZW5kRmlsZVN5bmMocmVwb3J0RmlsZSwgYFxcbiAgTm8gdG9wIGxldmVsIE9VcyBmb3VuZC5gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmcy5hcHBlbmRGaWxlU3luYyhyZXBvcnRGaWxlLCBgXFxuXFxuLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tYCk7XG4gICAgICAgIGZzLmFwcGVuZEZpbGVTeW5jKHJlcG9ydEZpbGUsIGBcXG5cXG5BV1MgT1JHQU5JWkFUSU9OIE1FTUJFUiBBQ0NPVU5UU1xcbmApO1xuICAgICAgICBjb25zdCBvcmdNZW1iZXJBY2NvdW50RGV0YWlscyA9IGF3YWl0IGdldE9yZ01lbWJlckFjY291bnRzKCk7XG4gICAgICAgIGNvbnNvbGUuZGlyKG9yZ01lbWJlckFjY291bnREZXRhaWxzLCB7IGRlcHRoOiBudWxsLCBjb2xvcnM6IHRydWUgfSk7XG4gICAgICAgIGlmIChvcmdNZW1iZXJBY2NvdW50RGV0YWlscyAmJiBvcmdNZW1iZXJBY2NvdW50RGV0YWlscy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IG1lbWJlckFjY291bnQgb2Ygb3JnTWVtYmVyQWNjb3VudERldGFpbHMpIHtcbiAgICAgICAgICAgICAgICBmcy5hcHBlbmRGaWxlU3luYyhyZXBvcnRGaWxlLCBgXFxuICBBY2NvdW50OiAke21lbWJlckFjY291bnQuYWNjb3VudE5hbWV9YCk7XG4gICAgICAgICAgICAgICAgZnMuYXBwZW5kRmlsZVN5bmMocmVwb3J0RmlsZSwgYFxcbiAgQWNjb3VudCBFbWFpbDogJHttZW1iZXJBY2NvdW50LmFjY291bnRFbWFpbH1cXG5gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGZzLmFwcGVuZEZpbGVTeW5jKHJlcG9ydEZpbGUsIGBObyBtZW1iZXIgYWNjb3VudHMgZm91bmQgd2hpY2ggaXMgYW1hemluZyBhcyB0aGlzIGlzIHJ1bm5pbmcgZnJvbSBvbmUuYCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAoYWNjb3VudFR5cGUuaXNJbk9yZ2FuaXphdGlvbiAmJiAhYWNjb3VudFR5cGUuaXNNYW5hZ2VtZW50QWNjb3VudCkge1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gJ1xcbldBUk5JTkc6IFlvdSBhcmUgcnVubmluZyBQQUFUIGZyb20gYW4gYWNjb3VudCB0aGF0IGlzIGEgbWVtYmVyIG9mIHlvdXIgQVdTIE9yZ2FuaXphdGlvbi4gUGxlYXNlIHJ1biB0aGUgc29sdXRpb24gZnJvbSB5b3VyIEFXUyBNYW5hZ2VtZW50IGFjY291bnQuJztcbiAgICAgICAgY29uc29sZS53YXJuKG1lc3NhZ2UpO1xuICAgICAgICBmcy5hcHBlbmRGaWxlU3luYyhyZXBvcnRGaWxlLCBtZXNzYWdlKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSAnXFxuV0FSTklORzogWW91IGFyZSBydW5uaW5nIFBBQVQgZnJvbSBhbiBhY2NvdW50IHRoYXQgbm90IHBhcnQgb2YgYW4gQVdTIE9yZ2FuaXphdGlvbi4gVGhpcyBhY2NvdW50IHdpbGwgYmUgdHJlYXRlZCBhcyBhIHN0YW5kYWxvbmUgYWNjb3VudC4nO1xuICAgICAgICBjb25zb2xlLndhcm4obWVzc2FnZSk7XG4gICAgICAgIGZzLmFwcGVuZEZpbGVTeW5jKHJlcG9ydEZpbGUsIG1lc3NhZ2UpO1xuICAgIH1cbiAgICBmcy5hcHBlbmRGaWxlU3luYyhyZXBvcnRGaWxlLCBgXFxuXFxuXFxuLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tYCk7XG4gICAgZnMuYXBwZW5kRmlsZVN5bmMocmVwb3J0RmlsZSwgYFxcbi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLWApO1xuICAgIGZzLmFwcGVuZEZpbGVTeW5jKHJlcG9ydEZpbGUsIGBcXG5BV1MgTUFOQUdFTUVOVCBBQ0NPVU5UIENIRUNLU2ApO1xuICAgIGZzLmFwcGVuZEZpbGVTeW5jKHJlcG9ydEZpbGUsIGBcXG4tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1gKTtcbiAgICBmcy5hcHBlbmRGaWxlU3luYyhyZXBvcnRGaWxlLCBgXFxuLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXFxuYCk7XG4gICAgLy8gR2VuZXJhbCBhY2NvdW50IGNoZWNrcyBmb3IgYWxsIGFjY291bnQgdHlwZXMgKG1hbmFnZW1lbnQgYWNjb3VudCwgbWVtYmVyIGFjY291bnQsIHN0YW5kYWxvbmUpXG4gICAgLy8gMS4gbGlzdCBhbGwgSUFNIHVzZXJzIGFuZCBpZiB0aGV5IGhhdmUga2V5cyBpbiB0aGUgYXdzIGFjY291bnRcbiAgICBjb25zdCBpYW1Vc2VyUmVzdWx0ID0gYXdhaXQgY2hlY2tJYW1Vc2VycygpO1xuICAgIGZzLmFwcGVuZEZpbGVTeW5jKHJlcG9ydEZpbGUsIGBcXG5cXG5JQU0gVVNFUlMgQ0hFQ0tcXG5gKTtcbiAgICBpZiAoaWFtVXNlclJlc3VsdCAmJiBpYW1Vc2VyUmVzdWx0Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgY29uc29sZS5kaXIoaWFtVXNlclJlc3VsdCwgeyBkZXB0aDogbnVsbCwgY29sb3JzOiB0cnVlIH0pO1xuICAgICAgICBmb3IgKGNvbnN0IGlhbVVzZXIgb2YgaWFtVXNlclJlc3VsdCkge1xuICAgICAgICAgICAgZnMuYXBwZW5kRmlsZVN5bmMocmVwb3J0RmlsZSwgYFxcbiAgSUFNIFVzZXI6ICR7aWFtVXNlci51c2VyTmFtZX1gKTtcbiAgICAgICAgICAgIGlmIChpYW1Vc2VyLmFjY2Vzc0tleUlkKSB7XG4gICAgICAgICAgICAgICAgZnMuYXBwZW5kRmlsZVN5bmMocmVwb3J0RmlsZSwgYFxcbiAgICBVc2VyIEFQSSBLZXkgSUQ6ICR7aWFtVXNlci5hY2Nlc3NLZXlJZH1gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZzLmFwcGVuZEZpbGVTeW5jKHJlcG9ydEZpbGUsIGBcXG5gKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgZnMuYXBwZW5kRmlsZVN5bmMocmVwb3J0RmlsZSwgYFxcbiAgTm8gSUFNIFVzZXJzIGZvdW5kLmApO1xuICAgIH1cbiAgICBmcy5hcHBlbmRGaWxlU3luYyhyZXBvcnRGaWxlLCBgXFxuXFxuLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tYCk7XG4gICAgLy8gMi4gZmluZCBvdXQgaWYgRUMyIHdvcmtsb2FkcyBhcmUgcnVubmluZyBpbiB0aGUgYWNjb3VudFxuICAgIGNvbnN0IGVjMkNoZWNrID0gYXdhaXQgY2hlY2tFYzJFeGlzdHMoYWxsUmVnaW9ucyk7XG4gICAgZnMuYXBwZW5kRmlsZVN5bmMocmVwb3J0RmlsZSwgYFxcblxcbkVDMiBJTlNUQU5DRSBDSEVDS1xcbmApO1xuICAgIGlmIChlYzJDaGVjayAmJiBlYzJDaGVjay5maW5kKHBhcmFtID0+IHBhcmFtLmVjMkZvdW5kID09PSB0cnVlKSkge1xuICAgICAgICBjb25zb2xlLmRpcihlYzJDaGVjaywgeyBkZXB0aDogbnVsbCwgY29sb3JzOiB0cnVlIH0pO1xuICAgICAgICBmb3IgKGNvbnN0IGVjMiBvZiBlYzJDaGVjaykge1xuICAgICAgICAgICAgaWYgKGVjMi5lYzJGb3VuZCkge1xuICAgICAgICAgICAgICAgIGZzLmFwcGVuZEZpbGVTeW5jKHJlcG9ydEZpbGUsIGBcXG4gICR7ZWMyLnJlZ2lvbn0gLSBmb3VuZCBFQzIgSW5zdGFuY2UocykuYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGZzLmFwcGVuZEZpbGVTeW5jKHJlcG9ydEZpbGUsIGBcXG4gIE5vIEVDMiBpbnN0YW5jZXMgZm91bmQuYCk7XG4gICAgfVxuICAgIGZzLmFwcGVuZEZpbGVTeW5jKHJlcG9ydEZpbGUsIGBcXG5cXG4tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1gKTtcbiAgICAvLyAzLiBsaXN0IGFsbCBWUENzIChkZWZhdWx0IG9yIG5vdClcbiAgICBjb25zdCB2cGNDaGVjayA9IGF3YWl0IGNoZWNrVnBjRXhpc3RzKGFsbFJlZ2lvbnMpO1xuICAgIGZzLmFwcGVuZEZpbGVTeW5jKHJlcG9ydEZpbGUsIGBcXG5cXG5WUEMgQ0hFQ0tcXG5gKTtcbiAgICBpZiAodnBjQ2hlY2sgJiYgdnBjQ2hlY2subGVuZ3RoID4gMCkge1xuICAgICAgICBjb25zb2xlLmRpcih2cGNDaGVjaywgeyBkZXB0aDogbnVsbCwgY29sb3JzOiB0cnVlIH0pO1xuICAgICAgICBmb3IgKGNvbnN0IHZwY0ZpbmQgb2YgdnBjQ2hlY2spIHtcbiAgICAgICAgICAgIGlmICh2cGNGaW5kLnZwY0ZvdW5kKSB7XG4gICAgICAgICAgICAgICAgZnMuYXBwZW5kRmlsZVN5bmMocmVwb3J0RmlsZSwgYFxcbiAgJHt2cGNGaW5kLnJlZ2lvbn0gLSBmb3VuZCBWUEMocykuYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGZzLmFwcGVuZEZpbGVTeW5jKHJlcG9ydEZpbGUsIGBcXG4gIE5vIFZQQ3MgZm91bmQuYCk7XG4gICAgfVxuICAgIGZzLmFwcGVuZEZpbGVTeW5jKHJlcG9ydEZpbGUsIGBcXG5cXG4tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1gKTtcbiAgICAvLyA0LiBjaGVjayBmb3IgY2xvdWR0cmFpbCBydW5uaW5nXG4gICAgY29uc3QgY2xvdWRUcmFpbENoZWNrID0gYXdhaXQgY2hlY2tDbG91ZFRyYWlsRXhpc3RzKGFsbFJlZ2lvbnMpO1xuICAgIGZzLmFwcGVuZEZpbGVTeW5jKHJlcG9ydEZpbGUsIGBcXG5cXG5DTE9VRFRSQUlMIENIRUNLXFxuYCk7XG4gICAgaWYgKGNsb3VkVHJhaWxDaGVjayAmJiBjbG91ZFRyYWlsQ2hlY2subGVuZ3RoID4gMCkge1xuICAgICAgICBjb25zb2xlLmRpcihjbG91ZFRyYWlsQ2hlY2ssIHsgZGVwdGg6IG51bGwsIGNvbG9yczogdHJ1ZSB9KTtcbiAgICAgICAgZm9yIChjb25zdCBjdEZpbmQgb2YgY2xvdWRUcmFpbENoZWNrKSB7XG4gICAgICAgICAgICBpZiAoY3RGaW5kLnRyYWlsRm91bmQpIHtcbiAgICAgICAgICAgICAgICBmcy5hcHBlbmRGaWxlU3luYyhyZXBvcnRGaWxlLCBgXFxuICBDbG91ZFRyYWlsIGZvdW5kIGluICR7Y3RGaW5kLnJlZ2lvbn1gKTtcbiAgICAgICAgICAgICAgICBmcy5hcHBlbmRGaWxlU3luYyhyZXBvcnRGaWxlLCBgXFxuICAgIElzIE9yZ2FuaXphdGlvbiBUcmFpbDogJHtjdEZpbmQuaXNPcmdUcmFpbH1gKTtcbiAgICAgICAgICAgICAgICBmcy5hcHBlbmRGaWxlU3luYyhyZXBvcnRGaWxlLCBgXFxuICAgIElzIE11bHRpUmVnaW9uOiAke2N0RmluZC5pc011bHRpUmVnaW9ufWApO1xuICAgICAgICAgICAgICAgIGZzLmFwcGVuZEZpbGVTeW5jKHJlcG9ydEZpbGUsIGBcXG5gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgZnMuYXBwZW5kRmlsZVN5bmMocmVwb3J0RmlsZSwgYFxcbiAgTm8gQVdTIENsb3VkVHJhaWwgcmVzb3VyY2UgZGlzY292ZXJlZGApO1xuICAgIH1cbiAgICBmcy5hcHBlbmRGaWxlU3luYyhyZXBvcnRGaWxlLCBgXFxuYCk7XG4gICAgZnMuYXBwZW5kRmlsZVN5bmMocmVwb3J0RmlsZSwgYFxcblxcbi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLWApO1xuICAgIC8vIDUuIGNoZWNrIGZvciBBV1MgY29uZmlnIHJlY29yZGVycyBhbmQgZGVsaXZlcnkgY2hhbm5lbHNcbiAgICBjb25zdCBjb25maWdDaGVjayA9IGF3YWl0IGNoZWNrQ29uZmlnRXhpc3RzKGFsbFJlZ2lvbnMpO1xuICAgIGZzLmFwcGVuZEZpbGVTeW5jKHJlcG9ydEZpbGUsIGBcXG5cXG5BV1MgQ09ORklHIENIRUNLXFxuYCk7XG4gICAgaWYgKGNvbmZpZ0NoZWNrICYmIGNvbmZpZ0NoZWNrLmZpbmQocGFyYW0gPT4gcGFyYW0uY29uZmlnUmVjb3JkZXJGb3VuZCA9PT0gdHJ1ZSkpIHtcbiAgICAgICAgY29uc29sZS5kaXIoY29uZmlnQ2hlY2ssIHsgZGVwdGg6IG51bGwsIGNvbG9yczogdHJ1ZSB9KTtcbiAgICAgICAgZm9yIChjb25zdCBjb25maWdGaW5kIG9mIGNvbmZpZ0NoZWNrKSB7XG4gICAgICAgICAgICBpZiAoY29uZmlnRmluZC5jb25maWdSZWNvcmRlckZvdW5kKSB7XG4gICAgICAgICAgICAgICAgZnMuYXBwZW5kRmlsZVN5bmMocmVwb3J0RmlsZSwgYFxcbiAgJHtjb25maWdGaW5kLnJlZ2lvbn0gLSBDb25maWcgUmVjb3JkZXIgZm91bmRgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjb25maWdGaW5kLmNvbmZpZ0RlbGl2ZXJ5Q2hhbm5lbEZvdW5kKSB7XG4gICAgICAgICAgICAgICAgZnMuYXBwZW5kRmlsZVN5bmMocmVwb3J0RmlsZSwgYFxcbiAgJHtjb25maWdGaW5kLnJlZ2lvbn0gLSBDb25maWcgRGVsaXZlcnkgQ2hhbm5lbCBmb3VuZGApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBmcy5hcHBlbmRGaWxlU3luYyhyZXBvcnRGaWxlLCBgXFxuICBObyBBV1MgQ29uZmlnIHJlc291cmNlIGRpc2NvdmVyZWRgKTtcbiAgICB9XG4gICAgZnMuYXBwZW5kRmlsZVN5bmMocmVwb3J0RmlsZSwgYFxcblxcblxcbiAgRU5EIEFTU0VTU01FTlRgKTtcbn07XG5tYWluKCk7XG4iLCJpbXBvcnQgeyBFQzJDbGllbnQsIERlc2NyaWJlUmVnaW9uc0NvbW1hbmQgfSBmcm9tIFwiQGF3cy1zZGsvY2xpZW50LWVjMlwiO1xuYXN5bmMgZnVuY3Rpb24gZ2V0QWxsUmVnaW9ucygpIHtcbiAgICAvLyBncmFiYmluZyBhbGwgcmVnaW9ucyBmcm9tIHVzLWVhc3QtMVxuICAgIGNvbnN0IGVjMkNsaWVudCA9IG5ldyBFQzJDbGllbnQoeyByZWdpb246IFwidXMtZWFzdC0xXCIgfSk7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgZGVzY3JpYmVSZWdpb25zQ29tbWFuZCA9IG5ldyBEZXNjcmliZVJlZ2lvbnNDb21tYW5kKHt9KTtcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBlYzJDbGllbnQuc2VuZChkZXNjcmliZVJlZ2lvbnNDb21tYW5kKTtcbiAgICAgICAgY29uc3QgcmVnaW9ucyA9IFtdO1xuICAgICAgICBmb3IgKGNvbnN0IHJlZ2lvbiBvZiByZXNwb25zZS5SZWdpb25zIHx8IFtdKSB7XG4gICAgICAgICAgICByZWdpb25zLnB1c2gocmVnaW9uLlJlZ2lvbk5hbWUgfHwgXCJcIik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlZ2lvbnM7XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgcmV0cmlldmluZyByZWdpb25zOlwiLCBlcnJvcik7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gICAgZmluYWxseSB7XG4gICAgICAgIGVjMkNsaWVudC5kZXN0cm95KCk7XG4gICAgfVxufVxuZXhwb3J0IGRlZmF1bHQgZ2V0QWxsUmVnaW9ucztcbiIsImltcG9ydCB7IE9yZ2FuaXphdGlvbnNDbGllbnQsIERlc2NyaWJlT3JnYW5pemF0aW9uQ29tbWFuZCwgfSBmcm9tIFwiQGF3cy1zZGsvY2xpZW50LW9yZ2FuaXphdGlvbnNcIjtcbi8vIGZ1bmN0aW9uIGNoZWNraW5nIGlmIG1hbmFnZW1lbnQgYWNjb3VudCwgbWVtYmVyIGFjY291bnQsIG9yIHN0YW5kYWxvbmUgYWNjb3VudFxuZXhwb3J0IGNvbnN0IGRlZmluZUFjY291bnRUeXBlID0gYXN5bmMgKHJlZ2lvbikgPT4ge1xuICAgIGNvbnN0IG9yZ2FuaXphdGlvbnNDbGllbnQgPSBuZXcgT3JnYW5pemF0aW9uc0NsaWVudCh7IHJlZ2lvbiB9KTtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCBkZXNjcmliZU9yZ2FuaXphdGlvbkNvbW1hbmQgPSBuZXcgRGVzY3JpYmVPcmdhbml6YXRpb25Db21tYW5kKHt9KTtcbiAgICAgICAgY29uc3QgZGVzY3JpYmVPcmdhbml6YXRpb25SZXNwb25zZSA9IGF3YWl0IG9yZ2FuaXphdGlvbnNDbGllbnQuc2VuZChkZXNjcmliZU9yZ2FuaXphdGlvbkNvbW1hbmQpO1xuICAgICAgICBjb25zdCBpc0luT3JnYW5pemF0aW9uID0gISFkZXNjcmliZU9yZ2FuaXphdGlvblJlc3BvbnNlLk9yZ2FuaXphdGlvbjtcbiAgICAgICAgLy8gdGhlIGFjY291bnQgaXMgbm90IHN0YW5kYWxvbmUgYW5kIHBhcnQgb2YgQVdTIE9yZ2FuaXphdGlvblxuICAgICAgICBpZiAoZGVzY3JpYmVPcmdhbml6YXRpb25SZXNwb25zZS5Pcmdhbml6YXRpb24/Lk1hc3RlckFjY291bnRJZCkge1xuICAgICAgICAgICAgY29uc3QgaXNNYW5hZ2VtZW50QWNjb3VudCA9IGRlc2NyaWJlT3JnYW5pemF0aW9uUmVzcG9uc2UuT3JnYW5pemF0aW9uPy5NYXN0ZXJBY2NvdW50SWQgPT09IGRlc2NyaWJlT3JnYW5pemF0aW9uUmVzcG9uc2UuT3JnYW5pemF0aW9uPy5NYXN0ZXJBY2NvdW50SWQ7XG4gICAgICAgICAgICByZXR1cm4geyBpc0luT3JnYW5pemF0aW9uLCBpc01hbmFnZW1lbnRBY2NvdW50IH07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4geyBpc0luT3JnYW5pemF0aW9uIH07XG4gICAgICAgIH1cbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvcjpcIiwgZXJyb3IpO1xuICAgICAgICByZXR1cm4geyBpc0luT3JnYW5pemF0aW9uOiBmYWxzZSB9O1xuICAgIH1cbiAgICBmaW5hbGx5IHtcbiAgICAgICAgb3JnYW5pemF0aW9uc0NsaWVudC5kZXN0cm95KCk7XG4gICAgfVxufTtcbiIsImltcG9ydCB7IENvc3RBbmRVc2FnZVJlcG9ydFNlcnZpY2VDbGllbnQsIERlc2NyaWJlUmVwb3J0RGVmaW5pdGlvbnNDb21tYW5kIH0gZnJvbSBcIkBhd3Mtc2RrL2NsaWVudC1jb3N0LWFuZC11c2FnZS1yZXBvcnQtc2VydmljZVwiO1xuY29uc3QgY2hlY2tMZWdhY3lDdXIgPSBhc3luYyAocmVnaW9uKSA9PiB7XG4gICAgLy8gU2V0IHVwIEFXUyBTREsgY2xpZW50IGZvciBDb3N0IEV4cGxvcmVyXG4gICAgY29uc3QgY3VyQ2xpZW50ID0gbmV3IENvc3RBbmRVc2FnZVJlcG9ydFNlcnZpY2VDbGllbnQoeyByZWdpb24gfSk7XG4gICAgbGV0IGlzTGVnYWN5Q3VyU2V0dXAgPSBmYWxzZTtcbiAgICB0cnkge1xuICAgICAgICAvLyBDaGVjayBpZiBDb3N0IEV4cGxvcmVyIGlzIHNldCB1cFxuICAgICAgICBjb25zdCBpbnB1dCA9IHt9O1xuICAgICAgICBjb25zdCBjb21tYW5kID0gbmV3IERlc2NyaWJlUmVwb3J0RGVmaW5pdGlvbnNDb21tYW5kKGlucHV0KTtcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBjdXJDbGllbnQuc2VuZChjb21tYW5kKTtcbiAgICAgICAgY29uc29sZS5sb2coSlNPTi5zdHJpbmdpZnkocmVzcG9uc2UsIG51bGwsIDIpKTtcbiAgICAgICAgaWYgKHJlc3BvbnNlLlJlcG9ydERlZmluaXRpb25zICYmIHJlc3BvbnNlLlJlcG9ydERlZmluaXRpb25zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGlzTGVnYWN5Q3VyU2V0dXAgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IGlzTGVnYWN5Q3VyU2V0dXAgfTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIC8vIENoZWNrIGlmIHRoZSBlcnJvciBpcyByZWxhdGVkIHRvIENvc3QgRXhwbG9yZXIgc2V0dXBcbiAgICAgICAgY29uc29sZS5lcnJvcihgRXJyb3I6ICR7ZXJyb3J9YCk7XG4gICAgICAgIGlzTGVnYWN5Q3VyU2V0dXAgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuIHsgaXNMZWdhY3lDdXJTZXR1cCB9O1xuICAgIH1cbiAgICBmaW5hbGx5IHtcbiAgICAgICAgLy8gQ2xvc2UgdGhlIEFXUyBTREsgY2xpZW50XG4gICAgICAgIGN1ckNsaWVudC5kZXN0cm95KCk7XG4gICAgfVxufTtcbmV4cG9ydCBkZWZhdWx0IGNoZWNrTGVnYWN5Q3VyO1xuIiwiaW1wb3J0IHsgT3JnYW5pemF0aW9uc0NsaWVudCwgTGlzdFJvb3RzQ29tbWFuZCB9IGZyb20gXCJAYXdzLXNkay9jbGllbnQtb3JnYW5pemF0aW9uc1wiO1xuYXN5bmMgZnVuY3Rpb24gZ2V0RW5hYmxlZE9yZ1BvbGljeVR5cGVzKHJlZ2lvbikge1xuICAgIGNvbnN0IG9yZ0NsaWVudCA9IG5ldyBPcmdhbml6YXRpb25zQ2xpZW50KHsgcmVnaW9uIH0pO1xuICAgIGxldCBwb2xpY3lUeXBlc0VuYWJsZWQgPSB7XG4gICAgICAgIHNjcEVuYWJsZWQ6IGZhbHNlLFxuICAgICAgICB0YWdQb2xpY3lFbmFibGVkOiBmYWxzZSxcbiAgICAgICAgYmFja3VwUG9saWN5RW5hYmxlZDogZmFsc2VcbiAgICB9O1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGlucHV0ID0ge307XG4gICAgICAgIGNvbnN0IGNvbW1hbmQgPSBuZXcgTGlzdFJvb3RzQ29tbWFuZChpbnB1dCk7XG4gICAgICAgIGNvbnN0IHJvb3RzID0gYXdhaXQgb3JnQ2xpZW50LnNlbmQoY29tbWFuZCk7XG4gICAgICAgIGlmIChyb290cy5Sb290cykge1xuICAgICAgICAgICAgaWYgKHJvb3RzLlJvb3RzWzBdLlBvbGljeVR5cGVzKSB7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBlbmFibGVkUG9saWN5IG9mIHJvb3RzLlJvb3RzWzBdLlBvbGljeVR5cGVzKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlbmFibGVkUG9saWN5LlR5cGUgPT0gJ1NFUlZJQ0VfQ09OVFJPTF9QT0xJQ1knICYmIGVuYWJsZWRQb2xpY3kuU3RhdHVzID09ICdFTkFCTEVEJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcG9saWN5VHlwZXNFbmFibGVkLnNjcEVuYWJsZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChlbmFibGVkUG9saWN5LlR5cGUgPT0gJ1RBR19QT0xJQ1knICYmIGVuYWJsZWRQb2xpY3kuU3RhdHVzID09ICdFTkFCTEVEJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcG9saWN5VHlwZXNFbmFibGVkLnRhZ1BvbGljeUVuYWJsZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChlbmFibGVkUG9saWN5LlR5cGUgPT0gJ0JBQ0tVUF9QT0xJQ1knICYmIGVuYWJsZWRQb2xpY3kuU3RhdHVzID09ICdFTkFCTEVEJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcG9saWN5VHlwZXNFbmFibGVkLmJhY2t1cFBvbGljeUVuYWJsZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSAvLyBlbmQgZm9yXG4gICAgICAgICAgICB9IC8vIGVuZCBpZlxuICAgICAgICB9IC8vIGVuZCBpZlxuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihgQW4gZXJyb3Igb2NjdXJyZWQ6ICR7ZXJyb3J9YCk7XG4gICAgfVxuICAgIGZpbmFsbHkge1xuICAgICAgICBvcmdDbGllbnQuZGVzdHJveSgpO1xuICAgICAgICByZXR1cm4gcG9saWN5VHlwZXNFbmFibGVkO1xuICAgIH1cbn1cbmV4cG9ydCBkZWZhdWx0IGdldEVuYWJsZWRPcmdQb2xpY3lUeXBlcztcbiIsImltcG9ydCB7IE9yZ2FuaXphdGlvbnNDbGllbnQsIExpc3RBV1NTZXJ2aWNlQWNjZXNzRm9yT3JnYW5pemF0aW9uQ29tbWFuZCB9IGZyb20gXCJAYXdzLXNkay9jbGllbnQtb3JnYW5pemF0aW9uc1wiO1xuYXN5bmMgZnVuY3Rpb24gZ2V0RW5hYmxlZE9yZ1NlcnZpY2VzKHJlZ2lvbikge1xuICAgIGNvbnN0IGRpc2NvdmVyZWRPcmdTZXJ2aWNlcyA9IFtdO1xuICAgIGNvbnN0IG9yZ0NsaWVudCA9IG5ldyBPcmdhbml6YXRpb25zQ2xpZW50KHsgcmVnaW9uIH0pO1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IG9yZ1NlcnZpY2VBY2Nlc3NDb21tYW5kID0gbmV3IExpc3RBV1NTZXJ2aWNlQWNjZXNzRm9yT3JnYW5pemF0aW9uQ29tbWFuZCh7fSk7XG4gICAgICAgIGNvbnN0IG9yZ1NlcnZpY2VBY2Nlc3NSZXNwb25zZSA9IGF3YWl0IG9yZ0NsaWVudC5zZW5kKG9yZ1NlcnZpY2VBY2Nlc3NDb21tYW5kKTtcbiAgICAgICAgaWYgKG9yZ1NlcnZpY2VBY2Nlc3NSZXNwb25zZS5FbmFibGVkU2VydmljZVByaW5jaXBhbHMgJiYgb3JnU2VydmljZUFjY2Vzc1Jlc3BvbnNlLkVuYWJsZWRTZXJ2aWNlUHJpbmNpcGFscy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBvcmdTZXJ2aWNlQWNjZXNzUmVzcG9uc2UuRW5hYmxlZFNlcnZpY2VQcmluY2lwYWxzO1xuICAgICAgICAgICAgZm9yIChjb25zdCBvcmdTZXJ2aWNlIG9mIG9yZ1NlcnZpY2VBY2Nlc3NSZXNwb25zZS5FbmFibGVkU2VydmljZVByaW5jaXBhbHMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBmb3VuZE9yZ1NlcnZpY2UgPSB7IHNlcnZpY2U6IG9yZ1NlcnZpY2UuU2VydmljZVByaW5jaXBhbCA/PyBcIlwiIH07XG4gICAgICAgICAgICAgICAgZGlzY292ZXJlZE9yZ1NlcnZpY2VzLnB1c2goZm91bmRPcmdTZXJ2aWNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgY2hlY2tpbmcgc2VydmljZSBhY2Nlc3M6JywgZXJyb3IpO1xuICAgIH1cbiAgICBmaW5hbGx5IHtcbiAgICAgICAgb3JnQ2xpZW50LmRlc3Ryb3koKTtcbiAgICAgICAgcmV0dXJuIGRpc2NvdmVyZWRPcmdTZXJ2aWNlcztcbiAgICB9XG59XG47XG5leHBvcnQgZGVmYXVsdCBnZXRFbmFibGVkT3JnU2VydmljZXM7XG4iLCJpbXBvcnQgeyBPcmdhbml6YXRpb25zQ2xpZW50LCBMaXN0RGVsZWdhdGVkQWRtaW5pc3RyYXRvcnNDb21tYW5kLCBMaXN0RGVsZWdhdGVkU2VydmljZXNGb3JBY2NvdW50Q29tbWFuZCB9IGZyb20gXCJAYXdzLXNkay9jbGllbnQtb3JnYW5pemF0aW9uc1wiO1xuYXN5bmMgZnVuY3Rpb24gZ2V0T3JnRGFBY2NvdW50cygpIHtcbiAgICBsZXQgb3JnRGFEZXRhaWxzID0gW107XG4gICAgY29uc3Qgb3JnQ2xpZW50ID0gbmV3IE9yZ2FuaXphdGlvbnNDbGllbnQoeyByZWdpb246ICd1cy1lYXN0LTEnIH0pO1xuICAgIGxldCBvcmdEYURldGFpbCA9IHt9O1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGNvbW1hbmQgPSBuZXcgTGlzdERlbGVnYXRlZEFkbWluaXN0cmF0b3JzQ29tbWFuZCh7fSk7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgb3JnQ2xpZW50LnNlbmQoY29tbWFuZCk7XG4gICAgICAgIGlmIChyZXNwb25zZS5EZWxlZ2F0ZWRBZG1pbmlzdHJhdG9ycykge1xuICAgICAgICAgICAgZm9yIChjb25zdCBkYSBvZiByZXNwb25zZS5EZWxlZ2F0ZWRBZG1pbmlzdHJhdG9ycykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGlucHV0ID0geyBBY2NvdW50SWQ6IGRhLklkIH07XG4gICAgICAgICAgICAgICAgY29uc3QgY29tbWFuZCA9IG5ldyBMaXN0RGVsZWdhdGVkU2VydmljZXNGb3JBY2NvdW50Q29tbWFuZChpbnB1dCk7XG4gICAgICAgICAgICAgICAgY29uc3QgYWNjb3VudFJlc3BvbnNlID0gYXdhaXQgb3JnQ2xpZW50LnNlbmQoY29tbWFuZCk7XG4gICAgICAgICAgICAgICAgaWYgKGFjY291bnRSZXNwb25zZS5EZWxlZ2F0ZWRTZXJ2aWNlcykge1xuICAgICAgICAgICAgICAgICAgICBvcmdEYURldGFpbCA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlcnZpY2VzOiBhY2NvdW50UmVzcG9uc2UuRGVsZWdhdGVkU2VydmljZXMsXG4gICAgICAgICAgICAgICAgICAgICAgICBhY2NvdW50TmFtZTogZGEuTmFtZVxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICBvcmdEYURldGFpbHMucHVzaChvcmdEYURldGFpbCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmxvZyhgRXJyb3IgbG9va2luZyBmb3IgZGVsZWdhdGVkIHNlcnZpY2VzLmApO1xuICAgIH1cbiAgICBmaW5hbGx5IHtcbiAgICAgICAgb3JnQ2xpZW50LmRlc3Ryb3koKTtcbiAgICB9XG4gICAgcmV0dXJuIG9yZ0RhRGV0YWlscztcbn1cbjtcbmV4cG9ydCBkZWZhdWx0IGdldE9yZ0RhQWNjb3VudHM7XG4iLCJpbXBvcnQgeyBDbG91ZEZvcm1hdGlvbkNsaWVudCwgRGVzY3JpYmVPcmdhbml6YXRpb25zQWNjZXNzQ29tbWFuZCwgfSBmcm9tIFwiQGF3cy1zZGsvY2xpZW50LWNsb3VkZm9ybWF0aW9uXCI7XG5hc3luYyBmdW5jdGlvbiBnZXRPcmdDbG91ZEZvcm1hdGlvbihyZWdpb24pIHtcbiAgICBsZXQgb3JnQ2ZuU3RhdHVzID0ge1xuICAgICAgICBzdGF0dXM6IFwiZGlzYWJsZWRcIlxuICAgIH07XG4gICAgY29uc3QgY2xvdWRGb3JtYXRpb25DbGllbnQgPSBuZXcgQ2xvdWRGb3JtYXRpb25DbGllbnQoeyByZWdpb24gfSk7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgZGVzY3JpYmVPcmdBY2Nlc3NJbnB1dCA9IHt9O1xuICAgICAgICBjb25zdCBjb21tYW5kID0gbmV3IERlc2NyaWJlT3JnYW5pemF0aW9uc0FjY2Vzc0NvbW1hbmQoZGVzY3JpYmVPcmdBY2Nlc3NJbnB1dCk7XG4gICAgICAgIGNvbnN0IGNsb3VkRm9ybWF0aW9uT3JnQWNjZXNzID0gYXdhaXQgY2xvdWRGb3JtYXRpb25DbGllbnQuc2VuZChjb21tYW5kKTtcbiAgICAgICAgLy9jb25zb2xlLmxvZyhcIkNsb3VkRm9ybWF0aW9uIGFjdGl2YXRpb24gc3RhdHVzOiBcIiwgY2xvdWRGb3JtYXRpb25PcmdBY2Nlc3MuU3RhdHVzKVxuICAgICAgICBvcmdDZm5TdGF0dXMuc3RhdHVzID0gY2xvdWRGb3JtYXRpb25PcmdBY2Nlc3MuU3RhdHVzID8/IFwiZGlzYWJsZWRcIjtcbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGBFcnJvcjogJHtlcnJvcn1gKTtcbiAgICAgICAgLy90aHJvdyBuZXcgRXJyb3IoYEVycm9yOiAke2Vycm9yfWApO1xuICAgIH1cbiAgICBmaW5hbGx5IHtcbiAgICAgICAgY2xvdWRGb3JtYXRpb25DbGllbnQuZGVzdHJveSgpO1xuICAgICAgICByZXR1cm4gb3JnQ2ZuU3RhdHVzO1xuICAgIH1cbn1cbjtcbmV4cG9ydCBkZWZhdWx0IGdldE9yZ0Nsb3VkRm9ybWF0aW9uO1xuIiwiaW1wb3J0IHsgQ29udHJvbFRvd2VyQ2xpZW50LCBMaXN0TGFuZGluZ1pvbmVzQ29tbWFuZCwgR2V0TGFuZGluZ1pvbmVDb21tYW5kIH0gZnJvbSBcIkBhd3Mtc2RrL2NsaWVudC1jb250cm9sdG93ZXJcIjtcbmFzeW5jIGZ1bmN0aW9uIGdldENvbnRyb2xUb3dlcihyZWdpb24pIHtcbiAgICBsZXQgY29udHJvbFRvd2VySW5mbyA9IHt9O1xuICAgIGNvbnN0IGNvbnRyb2xUb3dlckNsaWVudCA9IG5ldyBDb250cm9sVG93ZXJDbGllbnQoeyByZWdpb24gfSk7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgY29tbWFuZCA9IG5ldyBMaXN0TGFuZGluZ1pvbmVzQ29tbWFuZCh7fSk7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgY29udHJvbFRvd2VyQ2xpZW50LnNlbmQoY29tbWFuZCk7XG4gICAgICAgIGNvbnNvbGUubG9nKEpTT04uc3RyaW5naWZ5KHJlc3BvbnNlLmxhbmRpbmdab25lcywgbnVsbCwgMikpO1xuICAgICAgICBpZiAocmVzcG9uc2UubGFuZGluZ1pvbmVzICYmIHJlc3BvbnNlLmxhbmRpbmdab25lcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBjb25zdCBpbnB1dCA9IHtcbiAgICAgICAgICAgICAgICBsYW5kaW5nWm9uZUlkZW50aWZpZXI6IHJlc3BvbnNlLmxhbmRpbmdab25lc1swXS5hcm4sXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgbHpSZWdpb24gPSByZXNwb25zZS5sYW5kaW5nWm9uZXNbMF0uYXJuPy50b1N0cmluZygpLnNwbGl0KCc6JylbM10gPz8gXCJcIjtcbiAgICAgICAgICAgIGlmIChselJlZ2lvbikge1xuICAgICAgICAgICAgICAgIGNvbnRyb2xUb3dlckluZm8uY29udHJvbFRvd2VyUmVnaW9uID0gbHpSZWdpb247XG4gICAgICAgICAgICAgICAgY29uc3QgY29udHJvbFRvd2VyQ2xpZW50UmVnaW9uID0gbmV3IENvbnRyb2xUb3dlckNsaWVudCh7IHJlZ2lvbjogbHpSZWdpb24gfSk7XG4gICAgICAgICAgICAgICAgY29uc3QgY29tbWFuZCA9IG5ldyBHZXRMYW5kaW5nWm9uZUNvbW1hbmQoaW5wdXQpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGx6UmVzcG9uc2UgPSBhd2FpdCBjb250cm9sVG93ZXJDbGllbnRSZWdpb24uc2VuZChjb21tYW5kKTtcbiAgICAgICAgICAgICAgICBpZiAobHpSZXNwb25zZS5sYW5kaW5nWm9uZSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhKU09OLnN0cmluZ2lmeShselJlc3BvbnNlLmxhbmRpbmdab25lLCBudWxsLCAyKSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xUb3dlckluZm8uc3RhdHVzID0gbHpSZXNwb25zZS5sYW5kaW5nWm9uZS5zdGF0dXM7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xUb3dlckluZm8ubGF0ZXN0QXZhaWxhYmxlVmVyc2lvbiA9IGx6UmVzcG9uc2UubGFuZGluZ1pvbmUubGF0ZXN0QXZhaWxhYmxlVmVyc2lvbjtcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbFRvd2VySW5mby5kZXBsb3llZFZlcnNpb24gPSBselJlc3BvbnNlLmxhbmRpbmdab25lLnZlcnNpb247XG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xUb3dlckluZm8uZHJpZnRTdGF0dXMgPSBselJlc3BvbnNlLmxhbmRpbmdab25lLmRyaWZ0U3RhdHVzPy5zdGF0dXM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKGBFcnJvciBjaGVja2luZyBDb250cm9sIFRvd2VyIGluICR7cmVnaW9ufTpgLCBlcnJvcik7XG4gICAgfVxuICAgIGZpbmFsbHkge1xuICAgICAgICBjb250cm9sVG93ZXJDbGllbnQuZGVzdHJveSgpO1xuICAgIH1cbiAgICByZXR1cm4gY29udHJvbFRvd2VySW5mbztcbn1cbmV4cG9ydCBkZWZhdWx0IGdldENvbnRyb2xUb3dlcjtcbiIsImltcG9ydCB7IFNTT0FkbWluQ2xpZW50LCBMaXN0SW5zdGFuY2VzQ29tbWFuZCB9IGZyb20gXCJAYXdzLXNkay9jbGllbnQtc3NvLWFkbWluXCI7XG5hc3luYyBmdW5jdGlvbiBnZXRJZGNJbmZvKHJlZ2lvbkxpc3QpIHtcbiAgICBsZXQgaWRjRGV0YWlscyA9IHsgZm91bmQ6IGZhbHNlIH07XG4gICAgZm9yIChjb25zdCByZWdpb24gb2YgcmVnaW9uTGlzdCkge1xuICAgICAgICBjb25zdCBzc29BZG1pbkNsaWVudCA9IG5ldyBTU09BZG1pbkNsaWVudCh7IHJlZ2lvbiB9KTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHNzb0lucHV0ID0ge1xuICAgICAgICAgICAgICAgIE1heFJlc3VsdHM6IE51bWJlcihcIjEwMFwiKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IGNvbW1hbmQgPSBuZXcgTGlzdEluc3RhbmNlc0NvbW1hbmQoc3NvSW5wdXQpO1xuICAgICAgICAgICAgY29uc3Qgc3NvSW5zdGFuY2VSZXNwb25zZSA9IGF3YWl0IHNzb0FkbWluQ2xpZW50LnNlbmQoY29tbWFuZCk7XG4gICAgICAgICAgICBpZiAoc3NvSW5zdGFuY2VSZXNwb25zZS5JbnN0YW5jZXMgJiYgc3NvSW5zdGFuY2VSZXNwb25zZS5JbnN0YW5jZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHNzb0luc3RhbmNlID0gc3NvSW5zdGFuY2VSZXNwb25zZS5JbnN0YW5jZXNbMF07XG4gICAgICAgICAgICAgICAgaWRjRGV0YWlscy5mb3VuZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgaWRjRGV0YWlscy5yZWdpb24gPSByZWdpb247XG4gICAgICAgICAgICAgICAgaWRjRGV0YWlscy5hcm4gPSBzc29JbnN0YW5jZS5JbnN0YW5jZUFybjtcbiAgICAgICAgICAgICAgICBpZGNEZXRhaWxzLmlkID0gc3NvSW5zdGFuY2UuSWRlbnRpdHlTdG9yZUlkO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgY29uc29sZS5sb2coYEVycm9yIGxvb2tpbmcgZm9yIEFXUyBJZGVudGl0eSBDZW50ZXIgZGV0YWlscyBpbiByZWdpb24gJHtyZWdpb259YCk7XG4gICAgICAgIH1cbiAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICBzc29BZG1pbkNsaWVudC5kZXN0cm95KCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGlkY0RldGFpbHM7XG59XG47XG5leHBvcnQgZGVmYXVsdCBnZXRJZGNJbmZvO1xuIiwiaW1wb3J0IHsgT3JnYW5pemF0aW9uc0NsaWVudCwgRGVzY3JpYmVPcmdhbml6YXRpb25Db21tYW5kLCBMaXN0Um9vdHNDb21tYW5kIH0gZnJvbSBcIkBhd3Mtc2RrL2NsaWVudC1vcmdhbml6YXRpb25zXCI7XG5hc3luYyBmdW5jdGlvbiBnZXRPcmdEZXRhaWxzKHJlZ2lvbikge1xuICAgIGNvbnN0IG9yZ0NsaWVudCA9IG5ldyBPcmdhbml6YXRpb25zQ2xpZW50KHsgcmVnaW9uIH0pO1xuICAgIGxldCBvcmdEZXRhaWxzID0ge307XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3Qgb3JnRGVzY3JpYmVDb21tYW5kID0gbmV3IERlc2NyaWJlT3JnYW5pemF0aW9uQ29tbWFuZCh7fSk7XG4gICAgICAgIGNvbnN0IG9yZ0RhdGEgPSBhd2FpdCBvcmdDbGllbnQuc2VuZChvcmdEZXNjcmliZUNvbW1hbmQpO1xuICAgICAgICBpZiAob3JnRGF0YS5Pcmdhbml6YXRpb24pIHtcbiAgICAgICAgICAgIG9yZ0RldGFpbHMuaWQgPSBvcmdEYXRhLk9yZ2FuaXphdGlvbi5JZCA/PyBcIlwiO1xuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coYE9yZ2FuaXphdGlvbiBJRDogJHtvcmdEZXRhaWxzLmlkfWAgKTtcbiAgICAgICAgICAgIG9yZ0RldGFpbHMuYXJuID0gb3JnRGF0YS5Pcmdhbml6YXRpb24uQXJuID8/IFwiXCI7XG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhgT3JnYW5pemF0aW9uIEFSTjogJHtvcmdEZXRhaWxzLmFybn1gKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjb21tYW5kID0gbmV3IExpc3RSb290c0NvbW1hbmQoe30pO1xuICAgICAgICBjb25zdCByb290cyA9IGF3YWl0IG9yZ0NsaWVudC5zZW5kKGNvbW1hbmQpO1xuICAgICAgICBpZiAocm9vdHMuUm9vdHMpIHtcbiAgICAgICAgICAgIG9yZ0RldGFpbHMucm9vdE91SWQgPSByb290cy5Sb290c1swXS5JZDtcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGBBV1MgT3JnIHJvb3Qgb3UgaWQ6ICR7b3JnRGV0YWlscy5yb290T3VJZH1gKVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ05vIGluZm8gZm91bmQgZm9yIHlvdXIgQVdTIE9yZ2FuaXphdGlvbi4nKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihgQW4gZXJyb3Igb2NjdXJyZWQ6ICR7ZXJyb3J9YCk7XG4gICAgfVxuICAgIGZpbmFsbHkge1xuICAgICAgICBvcmdDbGllbnQuZGVzdHJveSgpO1xuICAgICAgICByZXR1cm4gb3JnRGV0YWlscztcbiAgICB9XG59XG5leHBvcnQgZGVmYXVsdCBnZXRPcmdEZXRhaWxzO1xuIiwiaW1wb3J0IHsgT3JnYW5pemF0aW9uc0NsaWVudCwgTGlzdE9yZ2FuaXphdGlvbmFsVW5pdHNGb3JQYXJlbnRDb21tYW5kLCBMaXN0QWNjb3VudHNGb3JQYXJlbnRDb21tYW5kIH0gZnJvbSBcIkBhd3Mtc2RrL2NsaWVudC1vcmdhbml6YXRpb25zXCI7XG5hc3luYyBmdW5jdGlvbiBnZXRPcmdUb3BMZXZlbE91cyhyZWdpb24sIHJvb3RPdUlkKSB7XG4gICAgY29uc3Qgb3JnQ2xpZW50ID0gbmV3IE9yZ2FuaXphdGlvbnNDbGllbnQoeyByZWdpb24gfSk7XG4gICAgbGV0IHRvcExldmVsT3VzID0gW107XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgbGlzdE9Vc0NvbW1hbmQgPSBuZXcgTGlzdE9yZ2FuaXphdGlvbmFsVW5pdHNGb3JQYXJlbnRDb21tYW5kKHtcbiAgICAgICAgICAgIFBhcmVudElkOiByb290T3VJZCxcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IGxpc3RPVXNSZXNwb25zZSA9IGF3YWl0IG9yZ0NsaWVudC5zZW5kKGxpc3RPVXNDb21tYW5kKTtcbiAgICAgICAgaWYgKGxpc3RPVXNSZXNwb25zZS5Pcmdhbml6YXRpb25hbFVuaXRzKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IG91IG9mIGxpc3RPVXNSZXNwb25zZS5Pcmdhbml6YXRpb25hbFVuaXRzKSB7XG4gICAgICAgICAgICAgICAgbGV0IHRvcExldmVsT3UgPSB7XG4gICAgICAgICAgICAgICAgICAgIGlkOiBvdS5JZCxcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogb3UuTmFtZVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgY29uc3QgYWNjb3VudFJlc3BvbnNlID0gYXdhaXQgb3JnQ2xpZW50LnNlbmQobmV3IExpc3RBY2NvdW50c0ZvclBhcmVudENvbW1hbmQoeyBQYXJlbnRJZDogb3UuSWQgfSkpO1xuICAgICAgICAgICAgICAgIGlmIChhY2NvdW50UmVzcG9uc2UuQWNjb3VudHMgJiYgYWNjb3VudFJlc3BvbnNlLkFjY291bnRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgdG9wTGV2ZWxPdS5hY2NvdW50cyA9IGFjY291bnRSZXNwb25zZS5BY2NvdW50cztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdG9wTGV2ZWxPdXMucHVzaCh0b3BMZXZlbE91KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgY2hlY2tpbmcgc2VydmljZSBhY2Nlc3M6JywgZXJyb3IpO1xuICAgICAgICByZXR1cm4gW107XG4gICAgfVxuICAgIGZpbmFsbHkge1xuICAgICAgICBvcmdDbGllbnQuZGVzdHJveSgpO1xuICAgIH1cbiAgICByZXR1cm4gdG9wTGV2ZWxPdXM7XG59XG47XG5leHBvcnQgZGVmYXVsdCBnZXRPcmdUb3BMZXZlbE91cztcbiIsImltcG9ydCB7IE9yZ2FuaXphdGlvbnNDbGllbnQsIExpc3RBY2NvdW50c0NvbW1hbmQgfSBmcm9tICdAYXdzLXNkay9jbGllbnQtb3JnYW5pemF0aW9ucyc7XG5hc3luYyBmdW5jdGlvbiBnZXRPcmdNZW1iZXJBY2NvdW50cygpIHtcbiAgICBsZXQgb3JnTWVtYmVyQWNjb3VudEluZm8gPSBbXTtcbiAgICBjb25zdCBvcmdzQ2xpZW50ID0gbmV3IE9yZ2FuaXphdGlvbnNDbGllbnQoeyByZWdpb246ICd1cy1lYXN0LTEnIH0pO1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgb3Jnc0NsaWVudC5zZW5kKG5ldyBMaXN0QWNjb3VudHNDb21tYW5kKHt9KSk7XG4gICAgICAgIGlmIChyZXNwb25zZS5BY2NvdW50cyAmJiByZXNwb25zZS5BY2NvdW50cy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGFjY291bnQgb2YgcmVzcG9uc2UuQWNjb3VudHMpIHtcbiAgICAgICAgICAgICAgICBsZXQgb3JnTWVtYmVyQWNjb3VudCA9IHtcbiAgICAgICAgICAgICAgICAgICAgYWNjb3VudE5hbWU6IGFjY291bnQuTmFtZSxcbiAgICAgICAgICAgICAgICAgICAgYWNjb3VudEVtYWlsOiBhY2NvdW50LkVtYWlsLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgb3JnTWVtYmVyQWNjb3VudEluZm8ucHVzaChvcmdNZW1iZXJBY2NvdW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgbGlzdGluZyBBV1MgYWNjb3VudHM6JywgZXJyb3IpO1xuICAgIH1cbiAgICBmaW5hbGx5IHtcbiAgICAgICAgb3Jnc0NsaWVudC5kZXN0cm95KCk7XG4gICAgfVxuICAgIHJldHVybiBvcmdNZW1iZXJBY2NvdW50SW5mbztcbn1cbmV4cG9ydCBkZWZhdWx0IGdldE9yZ01lbWJlckFjY291bnRzO1xuIiwiaW1wb3J0IHsgSUFNQ2xpZW50LCBMaXN0VXNlcnNDb21tYW5kLCBMaXN0QWNjZXNzS2V5c0NvbW1hbmQsIEdldEFjY2Vzc0tleUxhc3RVc2VkQ29tbWFuZCB9IGZyb20gXCJAYXdzLXNkay9jbGllbnQtaWFtXCI7XG4vLyBmdW5jdGlvbiBsaXN0IGFsbCBJQU0gdXNlcnMgYW5kIGlmIHRoZXkgaGF2ZSBrZXlzIGluIHRoZSBtYW5hZ2VtZW50IGFjY291bnRcbmNvbnN0IGNoZWNrSWFtVXNlcnMgPSBhc3luYyAoKSA9PiB7XG4gICAgLy8gU2V0IHRvIHVzLWVhc3QtMSBhcyBJQU0gaXMgZ2xvYmFsIGFuZCByZWdpb24gaXNuJ3QgYSBjb25jZXJuXG4gICAgY29uc3QgaWFtQ2xpZW50ID0gbmV3IElBTUNsaWVudCh7IHJlZ2lvbjogJ3VzLWVhc3QtMScgfSk7XG4gICAgY29uc3QgaWFtVXNlckluZm8gPSBbXTtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCBsaXN0VXNlcnNDb21tYW5kID0gbmV3IExpc3RVc2Vyc0NvbW1hbmQoe30pO1xuICAgICAgICBjb25zdCBsaXN0VXNlcnNSZXNwb25zZSA9IGF3YWl0IGlhbUNsaWVudC5zZW5kKGxpc3RVc2Vyc0NvbW1hbmQpO1xuICAgICAgICBmb3IgKGNvbnN0IHVzZXIgb2YgbGlzdFVzZXJzUmVzcG9uc2UuVXNlcnMgfHwgW10pIHtcbiAgICAgICAgICAgIGNvbnN0IHVzZXJOYW1lID0gdXNlci5Vc2VyTmFtZSB8fCBcIlwiO1xuICAgICAgICAgICAgY29uc3QgbGlzdEFjY2Vzc0tleXNDb21tYW5kID0gbmV3IExpc3RBY2Nlc3NLZXlzQ29tbWFuZCh7XG4gICAgICAgICAgICAgICAgVXNlck5hbWU6IHVzZXJOYW1lLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBjb25zdCBsaXN0QWNjZXNzS2V5c1Jlc3BvbnNlID0gYXdhaXQgaWFtQ2xpZW50LnNlbmQobGlzdEFjY2Vzc0tleXNDb21tYW5kKTtcbiAgICAgICAgICAgIGNvbnN0IGFjY2Vzc0tleXMgPSBsaXN0QWNjZXNzS2V5c1Jlc3BvbnNlLkFjY2Vzc0tleU1ldGFkYXRhIHx8IFtdO1xuICAgICAgICAgICAgaWYgKGFjY2Vzc0tleXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgYWNjZXNzS2V5IG9mIGFjY2Vzc0tleXMpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYWNjZXNzS2V5SWQgPSBhY2Nlc3NLZXkuQWNjZXNzS2V5SWQgfHwgXCJcIjtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZ2V0TGFzdFVzZWRDb21tYW5kID0gbmV3IEdldEFjY2Vzc0tleUxhc3RVc2VkQ29tbWFuZCh7XG4gICAgICAgICAgICAgICAgICAgICAgICBBY2Nlc3NLZXlJZDogYWNjZXNzS2V5SWQsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBsYXN0VXNlZFJlc3BvbnNlID0gYXdhaXQgaWFtQ2xpZW50LnNlbmQoZ2V0TGFzdFVzZWRDb21tYW5kKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZm91bmRVc2VySW5mbyA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVzZXJOYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgYWNjZXNzS2V5SWQsXG4gICAgICAgICAgICAgICAgICAgICAgICBsYXN0VXNlZDogbGFzdFVzZWRSZXNwb25zZSAmJiBsYXN0VXNlZFJlc3BvbnNlLkFjY2Vzc0tleUxhc3RVc2VkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBgJHtsYXN0VXNlZFJlc3BvbnNlLkFjY2Vzc0tleUxhc3RVc2VkLkxhc3RVc2VkRGF0ZX1gIHx8IFwiTm90IGF2YWlsYWJsZVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBcIk5vdCBhdmFpbGFibGVcIixcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgaWFtVXNlckluZm8ucHVzaChmb3VuZFVzZXJJbmZvKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCBmb3VuZFVzZXJJbmZvID0ge1xuICAgICAgICAgICAgICAgICAgICB1c2VyTmFtZVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgaWFtVXNlckluZm8ucHVzaChmb3VuZFVzZXJJbmZvKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yOlwiLCBlcnJvcik7XG4gICAgfVxuICAgIGZpbmFsbHkge1xuICAgICAgICBpYW1DbGllbnQuZGVzdHJveSgpO1xuICAgIH1cbiAgICByZXR1cm4gaWFtVXNlckluZm87XG59O1xuZXhwb3J0IGRlZmF1bHQgY2hlY2tJYW1Vc2VycztcbiIsImltcG9ydCB7IEVDMkNsaWVudCwgRGVzY3JpYmVJbnN0YW5jZXNDb21tYW5kIH0gZnJvbSBcIkBhd3Mtc2RrL2NsaWVudC1lYzJcIjtcbmFzeW5jIGZ1bmN0aW9uIGNoZWNrRWMyRXhpc3RzKHJlZ2lvbnMpIHtcbiAgICBsZXQgZWMyVmFsaWRhdGlvbiA9IFtdO1xuICAgIGZvciAoY29uc3QgcmVnaW9uIG9mIHJlZ2lvbnMpIHtcbiAgICAgICAgY29uc3QgZWMyQ2xpZW50ID0gbmV3IEVDMkNsaWVudCh7IHJlZ2lvbiB9KTtcbiAgICAgICAgY29uc3QgY29tbWFuZCA9IG5ldyBEZXNjcmliZUluc3RhbmNlc0NvbW1hbmQoe30pO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBlYzJDbGllbnQuc2VuZChjb21tYW5kKTtcbiAgICAgICAgICAgIGlmIChyZXNwb25zZS5SZXNlcnZhdGlvbnMpIHtcbiAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UuUmVzZXJ2YXRpb25zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhgV0FSTklORzogSW5zdGFuY2UocykgZXhpc3RzIGluIHJlZ2lvbjogJHtyZWdpb259YCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGVjMkZvdW5kID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVnaW9uOiByZWdpb24sXG4gICAgICAgICAgICAgICAgICAgICAgICBlYzJGb3VuZDogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICBlYzJWYWxpZGF0aW9uLnB1c2goZWMyRm91bmQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZWMyRm91bmQgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWdpb246IHJlZ2lvbixcbiAgICAgICAgICAgICAgICAgICAgICAgIGVjMkZvdW5kOiBmYWxzZVxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICBlYzJWYWxpZGF0aW9uLnB1c2goZWMyRm91bmQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IGVjMkZvdW5kID0ge1xuICAgICAgICAgICAgICAgICAgICByZWdpb246IHJlZ2lvbixcbiAgICAgICAgICAgICAgICAgICAgZWMyRm91bmQ6IGZhbHNlXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBlYzJWYWxpZGF0aW9uLnB1c2goZWMyRm91bmQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgY29uc29sZS5sb2coYEVycm9yIGNoZWNraW5nIGluc3RhbmNlOiAke2Vycm9yfWApO1xuICAgICAgICB9XG4gICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgZWMyQ2xpZW50LmRlc3Ryb3koKTtcbiAgICAgICAgfVxuICAgIH0gLy8gZW5kIGZvclxuICAgIHJldHVybiBlYzJWYWxpZGF0aW9uO1xufVxuO1xuZXhwb3J0IGRlZmF1bHQgY2hlY2tFYzJFeGlzdHM7XG4iLCJpbXBvcnQgeyBFQzJDbGllbnQsIERlc2NyaWJlVnBjc0NvbW1hbmQgfSBmcm9tIFwiQGF3cy1zZGsvY2xpZW50LWVjMlwiO1xuYXN5bmMgZnVuY3Rpb24gY2hlY2tWcGNFeGlzdHMocmVnaW9ucykge1xuICAgIGxldCB2cGNWYWxpZGF0aW9uID0gW107XG4gICAgZm9yIChjb25zdCByZWdpb24gb2YgcmVnaW9ucykge1xuICAgICAgICBjb25zdCBlYzJDbGllbnQgPSBuZXcgRUMyQ2xpZW50KHsgcmVnaW9uIH0pO1xuICAgICAgICBjb25zdCBjb21tYW5kID0gbmV3IERlc2NyaWJlVnBjc0NvbW1hbmQoe30pO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBlYzJDbGllbnQuc2VuZChjb21tYW5kKTtcbiAgICAgICAgICAgIGlmIChyZXNwb25zZS5WcGNzKSB7XG4gICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLlZwY3MubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKGBXQVJOSU5HOiBWUEMocykgZXhpc3RzIGluIHJlZ2lvbjogJHtyZWdpb259YCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHZwY0ZvdW5kID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVnaW9uOiByZWdpb24sXG4gICAgICAgICAgICAgICAgICAgICAgICB2cGNGb3VuZDogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB2cGNWYWxpZGF0aW9uLnB1c2godnBjRm91bmQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdnBjRm91bmQgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWdpb246IHJlZ2lvbixcbiAgICAgICAgICAgICAgICAgICAgICAgIHZwY0ZvdW5kOiBmYWxzZVxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB2cGNWYWxpZGF0aW9uLnB1c2godnBjRm91bmQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IHZwY0ZvdW5kID0ge1xuICAgICAgICAgICAgICAgICAgICByZWdpb246IHJlZ2lvbixcbiAgICAgICAgICAgICAgICAgICAgdnBjRm91bmQ6IGZhbHNlXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB2cGNWYWxpZGF0aW9uLnB1c2godnBjRm91bmQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgY29uc29sZS5sb2coYEVycm9yIGNoZWNraW5nIGluc3RhbmNlOiAke2Vycm9yfWApO1xuICAgICAgICB9XG4gICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgZWMyQ2xpZW50LmRlc3Ryb3koKTtcbiAgICAgICAgfVxuICAgIH0gLy8gZW5kIGZvclxuICAgIHJldHVybiB2cGNWYWxpZGF0aW9uO1xufVxuO1xuZXhwb3J0IGRlZmF1bHQgY2hlY2tWcGNFeGlzdHM7XG4iLCJpbXBvcnQgeyBDbG91ZFRyYWlsQ2xpZW50LCBEZXNjcmliZVRyYWlsc0NvbW1hbmQgfSBmcm9tICdAYXdzLXNkay9jbGllbnQtY2xvdWR0cmFpbCc7XG5hc3luYyBmdW5jdGlvbiBjaGVja0Nsb3VkVHJhaWxFeGlzdHMocmVnaW9ucykge1xuICAgIGxldCBjbG91ZFRyYWlsVmFsaWRhdGlvbiA9IFtdO1xuICAgIGZvciAoY29uc3QgcmVnaW9uIG9mIHJlZ2lvbnMpIHtcbiAgICAgICAgY29uc3QgY2xvdWRUcmFpbENsaWVudCA9IG5ldyBDbG91ZFRyYWlsQ2xpZW50KHsgcmVnaW9uIH0pO1xuICAgICAgICBjb25zdCBjbG91ZFRyYWlsRGVzY3JpYmVDb21tYW5kID0gbmV3IERlc2NyaWJlVHJhaWxzQ29tbWFuZCh7fSk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBjbG91ZFRyYWlsUmVzcG9uc2UgPSBhd2FpdCBjbG91ZFRyYWlsQ2xpZW50LnNlbmQoY2xvdWRUcmFpbERlc2NyaWJlQ29tbWFuZCk7XG4gICAgICAgICAgICBpZiAoY2xvdWRUcmFpbFJlc3BvbnNlLnRyYWlsTGlzdCkge1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgdHJhaWwgb2YgY2xvdWRUcmFpbFJlc3BvbnNlLnRyYWlsTGlzdCkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgdHJhaWxJbmZvID0ge307XG4gICAgICAgICAgICAgICAgICAgIGlmICh0cmFpbC5Ib21lUmVnaW9uID09IHJlZ2lvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhgdHJhaWwgZm91bmQgaW4gJHtyZWdpb259YClcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYWlsSW5mbyA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWdpb246IHJlZ2lvbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmFpbEZvdW5kOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzT3JnVHJhaWw6IHRyYWlsLklzTXVsdGlSZWdpb25UcmFpbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc011bHRpUmVnaW9uOiB0cmFpbC5Jc011bHRpUmVnaW9uVHJhaWxcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFpbEluZm8gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVnaW9uOiByZWdpb24sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhaWxGb3VuZDogZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2xvdWRUcmFpbFZhbGlkYXRpb24ucHVzaCh0cmFpbEluZm8pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGBFcnJvciBjaGVja2luZyBpbnN0YW5jZTogJHtlcnJvcn1gKTtcbiAgICAgICAgfVxuICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgIGNsb3VkVHJhaWxDbGllbnQuZGVzdHJveSgpO1xuICAgICAgICB9XG4gICAgfSAvLyBlbmQgZm9yIHJlZ2lvbnNcbiAgICByZXR1cm4gY2xvdWRUcmFpbFZhbGlkYXRpb247XG59XG47XG5leHBvcnQgZGVmYXVsdCBjaGVja0Nsb3VkVHJhaWxFeGlzdHM7XG4iLCJpbXBvcnQgeyBDb25maWdTZXJ2aWNlQ2xpZW50LCBEZXNjcmliZUNvbmZpZ3VyYXRpb25SZWNvcmRlclN0YXR1c0NvbW1hbmQsIERlc2NyaWJlRGVsaXZlcnlDaGFubmVsc0NvbW1hbmQgfSBmcm9tICdAYXdzLXNkay9jbGllbnQtY29uZmlnLXNlcnZpY2UnO1xuYXN5bmMgZnVuY3Rpb24gY2hlY2tDb25maWdFeGlzdHMocmVnaW9ucykge1xuICAgIGxldCBjb25maWdEZXRhaWxzID0gW107XG4gICAgZm9yIChjb25zdCByZWdpb24gb2YgcmVnaW9ucykge1xuICAgICAgICBjb25zdCBjb25maWdTZXJ2aWNlQ2xpZW50ID0gbmV3IENvbmZpZ1NlcnZpY2VDbGllbnQoeyByZWdpb24gfSk7XG4gICAgICAgIGxldCBjb25maWdEZXRhaWwgPSB7XG4gICAgICAgICAgICByZWdpb246IHJlZ2lvbixcbiAgICAgICAgICAgIGNvbmZpZ1JlY29yZGVyRm91bmQ6IGZhbHNlLFxuICAgICAgICAgICAgY29uZmlnRGVsaXZlcnlDaGFubmVsRm91bmQ6IGZhbHNlXG4gICAgICAgIH07XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBDaGVjayBpZiBDb25maWcgcmVjb3JkZXIgZXhpc3RzXG4gICAgICAgICAgICBjb25zdCByZWNvcmRlclJlc3BvbnNlID0gYXdhaXQgY29uZmlnU2VydmljZUNsaWVudC5zZW5kKG5ldyBEZXNjcmliZUNvbmZpZ3VyYXRpb25SZWNvcmRlclN0YXR1c0NvbW1hbmQoe30pKTtcbiAgICAgICAgICAgIGNvbnN0IHJlY29yZGVyRXhpc3RzID0gcmVjb3JkZXJSZXNwb25zZS5Db25maWd1cmF0aW9uUmVjb3JkZXJzU3RhdHVzPy5sZW5ndGggIT09IDA7XG4gICAgICAgICAgICBpZiAocmVjb3JkZXJFeGlzdHMpIHtcbiAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKGBBV1MgQ29uZmlnIFJlY29yZGVyIGV4aXN0cyBpbiAke3JlZ2lvbn06ICR7cmVjb3JkZXJFeGlzdHN9YCk7XG4gICAgICAgICAgICAgICAgY29uZmlnRGV0YWlsLmNvbmZpZ1JlY29yZGVyRm91bmQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gQ2hlY2sgaWYgQ29uZmlnIGRlbGl2ZXJ5IGNoYW5uZWwgZXhpc3RzXG4gICAgICAgICAgICBjb25zdCBjaGFubmVsUmVzcG9uc2UgPSBhd2FpdCBjb25maWdTZXJ2aWNlQ2xpZW50LnNlbmQobmV3IERlc2NyaWJlRGVsaXZlcnlDaGFubmVsc0NvbW1hbmQoe30pKTtcbiAgICAgICAgICAgIGNvbnN0IGNoYW5uZWxFeGlzdHMgPSBjaGFubmVsUmVzcG9uc2UuRGVsaXZlcnlDaGFubmVscz8ubGVuZ3RoICE9PSAwO1xuICAgICAgICAgICAgaWYgKGNoYW5uZWxFeGlzdHMpIHtcbiAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKGBBV1MgQ29uZmlnIERlbGl2ZXJ5IENoYW5uZWwgZXhpc3RzIGluICR7cmVnaW9ufTogJHtjaGFubmVsRXhpc3RzfWApO1xuICAgICAgICAgICAgICAgIGNvbmZpZ0RldGFpbC5jb25maWdEZWxpdmVyeUNoYW5uZWxGb3VuZCA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uZmlnRGV0YWlscy5wdXNoKGNvbmZpZ0RldGFpbCk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGBFcnJvciBjaGVja2luZyBBV1MgQ29uZmlnIGluICR7cmVnaW9ufTpgLCBlcnJvcik7XG4gICAgICAgIH1cbiAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICBjb25maWdTZXJ2aWNlQ2xpZW50LmRlc3Ryb3koKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gY29uZmlnRGV0YWlscztcbn1cbmV4cG9ydCBkZWZhdWx0IGNoZWNrQ29uZmlnRXhpc3RzO1xuIl0sIm5hbWVzIjpbInJlcXVpcmUiLCJhc3luYyIsInJlcG9ydEZpbGUiLCJkYXRlVGltZSIsIkRhdGUiLCJ0b1VUQ1N0cmluZyIsInJlZ2lvbiIsInByb2Nlc3MiLCJlbnYiLCJBV1NfUkVHSU9OIiwiYWxsUmVnaW9ucyIsImVjMkNsaWVudCIsIkVDMkNsaWVudCIsImRlc2NyaWJlUmVnaW9uc0NvbW1hbmQiLCJEZXNjcmliZVJlZ2lvbnNDb21tYW5kIiwicmVzcG9uc2UiLCJzZW5kIiwicmVnaW9ucyIsIlJlZ2lvbnMiLCJwdXNoIiwiUmVnaW9uTmFtZSIsImVycm9yIiwiY29uc29sZSIsImRlc3Ryb3kiLCJhY2NvdW50VHlwZSIsIm9yZ2FuaXphdGlvbnNDbGllbnQiLCJPcmdhbml6YXRpb25zQ2xpZW50IiwiZGVzY3JpYmVPcmdhbml6YXRpb25Db21tYW5kIiwiRGVzY3JpYmVPcmdhbml6YXRpb25Db21tYW5kIiwiZGVzY3JpYmVPcmdhbml6YXRpb25SZXNwb25zZSIsImlzSW5Pcmdhbml6YXRpb24iLCJPcmdhbml6YXRpb24iLCJNYXN0ZXJBY2NvdW50SWQiLCJpc01hbmFnZW1lbnRBY2NvdW50IiwiZGVmaW5lQWNjb3VudFR5cGUiLCJkaXIiLCJkZXB0aCIsImNvbG9ycyIsImxlZ2FjeUN1ckNoZWNrIiwiY3VyQ2xpZW50IiwiQ29zdEFuZFVzYWdlUmVwb3J0U2VydmljZUNsaWVudCIsImlzTGVnYWN5Q3VyU2V0dXAiLCJpbnB1dCIsImNvbW1hbmQiLCJEZXNjcmliZVJlcG9ydERlZmluaXRpb25zQ29tbWFuZCIsImxvZyIsIkpTT04iLCJzdHJpbmdpZnkiLCJSZXBvcnREZWZpbml0aW9ucyIsImxlbmd0aCIsImVuYWJsZU9yZ1BvbGljaWVzQ2hlY2siLCJvcmdDbGllbnQiLCJwb2xpY3lUeXBlc0VuYWJsZWQiLCJzY3BFbmFibGVkIiwidGFnUG9saWN5RW5hYmxlZCIsImJhY2t1cFBvbGljeUVuYWJsZWQiLCJMaXN0Um9vdHNDb21tYW5kIiwicm9vdHMiLCJSb290cyIsIlBvbGljeVR5cGVzIiwiZW5hYmxlZFBvbGljeSIsIlR5cGUiLCJTdGF0dXMiLCJvcmdFbmFibGVkU2VydmljZXMiLCJkaXNjb3ZlcmVkT3JnU2VydmljZXMiLCJvcmdTZXJ2aWNlQWNjZXNzQ29tbWFuZCIsIkxpc3RBV1NTZXJ2aWNlQWNjZXNzRm9yT3JnYW5pemF0aW9uQ29tbWFuZCIsIm9yZ1NlcnZpY2VBY2Nlc3NSZXNwb25zZSIsIkVuYWJsZWRTZXJ2aWNlUHJpbmNpcGFscyIsIm9yZ1NlcnZpY2UiLCJmb3VuZE9yZ1NlcnZpY2UiLCJzZXJ2aWNlIiwiU2VydmljZVByaW5jaXBhbCIsIm9yZ0RlbEFkbWluRGV0YWlscyIsIm9yZ0RhRGV0YWlscyIsIm9yZ0RhRGV0YWlsIiwiTGlzdERlbGVnYXRlZEFkbWluaXN0cmF0b3JzQ29tbWFuZCIsIkRlbGVnYXRlZEFkbWluaXN0cmF0b3JzIiwiZGEiLCJBY2NvdW50SWQiLCJJZCIsIkxpc3REZWxlZ2F0ZWRTZXJ2aWNlc0ZvckFjY291bnRDb21tYW5kIiwiYWNjb3VudFJlc3BvbnNlIiwiRGVsZWdhdGVkU2VydmljZXMiLCJzZXJ2aWNlcyIsImFjY291bnROYW1lIiwiTmFtZSIsImFjY291bnQiLCJzcnYiLCJjZm5PcmdTdGF0dXMiLCJvcmdDZm5TdGF0dXMiLCJzdGF0dXMiLCJjbG91ZEZvcm1hdGlvbkNsaWVudCIsIkNsb3VkRm9ybWF0aW9uQ2xpZW50IiwiZGVzY3JpYmVPcmdBY2Nlc3NJbnB1dCIsIkRlc2NyaWJlT3JnYW5pemF0aW9uc0FjY2Vzc0NvbW1hbmQiLCJjbG91ZEZvcm1hdGlvbk9yZ0FjY2VzcyIsImNvbnRyb2xUb3dlckRldGFpbHMiLCJjb250cm9sVG93ZXJJbmZvIiwiY29udHJvbFRvd2VyQ2xpZW50IiwiQ29udHJvbFRvd2VyQ2xpZW50IiwiTGlzdExhbmRpbmdab25lc0NvbW1hbmQiLCJsYW5kaW5nWm9uZXMiLCJsYW5kaW5nWm9uZUlkZW50aWZpZXIiLCJhcm4iLCJselJlZ2lvbiIsInRvU3RyaW5nIiwic3BsaXQiLCJjb250cm9sVG93ZXJSZWdpb24iLCJjb250cm9sVG93ZXJDbGllbnRSZWdpb24iLCJHZXRMYW5kaW5nWm9uZUNvbW1hbmQiLCJselJlc3BvbnNlIiwibGFuZGluZ1pvbmUiLCJsYXRlc3RBdmFpbGFibGVWZXJzaW9uIiwiZGVwbG95ZWRWZXJzaW9uIiwidmVyc2lvbiIsImRyaWZ0U3RhdHVzIiwiaWRjSW5mb3JtYXRpb24iLCJyZWdpb25MaXN0IiwiaWRjRGV0YWlscyIsImZvdW5kIiwic3NvQWRtaW5DbGllbnQiLCJTU09BZG1pbkNsaWVudCIsInNzb0lucHV0IiwiTWF4UmVzdWx0cyIsIk51bWJlciIsIkxpc3RJbnN0YW5jZXNDb21tYW5kIiwic3NvSW5zdGFuY2VSZXNwb25zZSIsIkluc3RhbmNlcyIsInNzb0luc3RhbmNlIiwiSW5zdGFuY2VBcm4iLCJpZCIsIklkZW50aXR5U3RvcmVJZCIsIm9yZ0RldGFpbHMiLCJvcmdEZXNjcmliZUNvbW1hbmQiLCJvcmdEYXRhIiwiQXJuIiwicm9vdE91SWQiLCJvcmdPdXMiLCJ0b3BMZXZlbE91cyIsImxpc3RPVXNDb21tYW5kIiwiTGlzdE9yZ2FuaXphdGlvbmFsVW5pdHNGb3JQYXJlbnRDb21tYW5kIiwiUGFyZW50SWQiLCJsaXN0T1VzUmVzcG9uc2UiLCJPcmdhbml6YXRpb25hbFVuaXRzIiwib3UiLCJ0b3BMZXZlbE91IiwibmFtZSIsIkxpc3RBY2NvdW50c0ZvclBhcmVudENvbW1hbmQiLCJBY2NvdW50cyIsImFjY291bnRzIiwib3JnTWVtYmVyQWNjb3VudERldGFpbHMiLCJvcmdNZW1iZXJBY2NvdW50SW5mbyIsIm9yZ3NDbGllbnQiLCJMaXN0QWNjb3VudHNDb21tYW5kIiwib3JnTWVtYmVyQWNjb3VudCIsImFjY291bnRFbWFpbCIsIkVtYWlsIiwibWVtYmVyQWNjb3VudCIsIm1lc3NhZ2UiLCJ3YXJuIiwiaWFtVXNlclJlc3VsdCIsImlhbUNsaWVudCIsIklBTUNsaWVudCIsImlhbVVzZXJJbmZvIiwibGlzdFVzZXJzQ29tbWFuZCIsIkxpc3RVc2Vyc0NvbW1hbmQiLCJsaXN0VXNlcnNSZXNwb25zZSIsInVzZXIiLCJVc2VycyIsInVzZXJOYW1lIiwiVXNlck5hbWUiLCJsaXN0QWNjZXNzS2V5c0NvbW1hbmQiLCJMaXN0QWNjZXNzS2V5c0NvbW1hbmQiLCJhY2Nlc3NLZXlzIiwiQWNjZXNzS2V5TWV0YWRhdGEiLCJhY2Nlc3NLZXkiLCJhY2Nlc3NLZXlJZCIsIkFjY2Vzc0tleUlkIiwiZ2V0TGFzdFVzZWRDb21tYW5kIiwiR2V0QWNjZXNzS2V5TGFzdFVzZWRDb21tYW5kIiwibGFzdFVzZWRSZXNwb25zZSIsImZvdW5kVXNlckluZm8iLCJsYXN0VXNlZCIsIkFjY2Vzc0tleUxhc3RVc2VkIiwiTGFzdFVzZWREYXRlIiwiaWFtVXNlciIsImVjMkNoZWNrIiwiZWMyVmFsaWRhdGlvbiIsIkRlc2NyaWJlSW5zdGFuY2VzQ29tbWFuZCIsIlJlc2VydmF0aW9ucyIsImVjMkZvdW5kIiwiZmluZCIsInBhcmFtIiwiZWMyIiwidnBjQ2hlY2siLCJ2cGNWYWxpZGF0aW9uIiwiRGVzY3JpYmVWcGNzQ29tbWFuZCIsIlZwY3MiLCJ2cGNGb3VuZCIsInZwY0ZpbmQiLCJjbG91ZFRyYWlsQ2hlY2siLCJjbG91ZFRyYWlsVmFsaWRhdGlvbiIsImNsb3VkVHJhaWxDbGllbnQiLCJDbG91ZFRyYWlsQ2xpZW50IiwiY2xvdWRUcmFpbERlc2NyaWJlQ29tbWFuZCIsIkRlc2NyaWJlVHJhaWxzQ29tbWFuZCIsImNsb3VkVHJhaWxSZXNwb25zZSIsInRyYWlsTGlzdCIsInRyYWlsIiwidHJhaWxJbmZvIiwiSG9tZVJlZ2lvbiIsInRyYWlsRm91bmQiLCJpc09yZ1RyYWlsIiwiSXNNdWx0aVJlZ2lvblRyYWlsIiwiaXNNdWx0aVJlZ2lvbiIsImN0RmluZCIsImNvbmZpZ0NoZWNrIiwiY29uZmlnRGV0YWlscyIsImNvbmZpZ1NlcnZpY2VDbGllbnQiLCJDb25maWdTZXJ2aWNlQ2xpZW50IiwiY29uZmlnRGV0YWlsIiwiY29uZmlnUmVjb3JkZXJGb3VuZCIsImNvbmZpZ0RlbGl2ZXJ5Q2hhbm5lbEZvdW5kIiwicmVjb3JkZXJSZXNwb25zZSIsIkRlc2NyaWJlQ29uZmlndXJhdGlvblJlY29yZGVyU3RhdHVzQ29tbWFuZCIsIkNvbmZpZ3VyYXRpb25SZWNvcmRlcnNTdGF0dXMiLCJjaGFubmVsUmVzcG9uc2UiLCJEZXNjcmliZURlbGl2ZXJ5Q2hhbm5lbHNDb21tYW5kIiwiRGVsaXZlcnlDaGFubmVscyIsImNvbmZpZ0ZpbmQiLCJtYWluIl0sInNvdXJjZVJvb3QiOiIifQ==