(()=>{"use strict";const n=require("@aws-sdk/client-sts"),e=require("@aws-sdk/client-organizations"),o=require("@aws-sdk/client-iam"),i=require("@aws-sdk/client-cloudformation"),t=require("@aws-sdk/client-sso-admin"),a=require("@aws-sdk/client-ec2"),s=require("@aws-sdk/client-cloudtrail"),c=require("@aws-sdk/client-config-service"),r=require("@aws-sdk/client-controltower"),l=require("@aws-sdk/client-cost-and-usage-report-service"),d=require("fs");(async()=>{const p="./Pathfinder.txt";let u=new Date;d.writeFileSync(p,"Cloud Foundations - Pathfinder"),d.appendFileSync(p,`\nGenerated on: ${u.toUTCString()} \n\n`),d.appendFileSync(p,"\n---------------------------------------------------------");const y=process.env.AWS_REGION||"us-east-1",g=await async function(){const n=new a.EC2Client({region:"us-east-1"});try{const e=new a.DescribeRegionsCommand({}),o=await n.send(e),i=[];for(const n of o.Regions||[])i.push(n.RegionName||"");return i}catch(n){return console.error("Error retrieving regions:",n),[]}finally{n.destroy()}}(),S=await(async o=>{const i=new e.OrganizationsClient({region:o});try{const t=await async function(e){const o=new n.STSClient({region:e});try{const e=new n.GetCallerIdentityCommand({}),{Account:i}=await o.send(e);return i}catch(n){throw console.error("Error getting account ID:",n),n}}(o);if(t){console.log(`current account is: ${t}`);const n=new e.DescribeOrganizationCommand({}),o=await i.send(n);o.Organization?.MasterAccountId&&(console.log(`current management account is: ${o.Organization?.MasterAccountId}`),o.Organization)}}catch(n){return console.error("Error:",n),{isInOrganization:!1}}finally{i.destroy()}return{isInOrganization:!1,isManagementAccount:!1}})(y);if(d.appendFileSync(p,"\n\nAWS ACCOUNT TYPE\n"),S&&(console.dir(S,{depth:null,colors:!0}),d.appendFileSync(p,`\n  Is in AWS Organization: ${S.isInOrganization}`),d.appendFileSync(p,`\n  Assessing AWS Management Account: ${S.isManagementAccount}`)),S.isInOrganization&&S.isManagementAccount){d.appendFileSync(p,"\n\n---------------------------------------------------------"),d.appendFileSync(p,"\n\nLegacy CUR\n");const n=await(async n=>{const e=new l.CostAndUsageReportServiceClient({region:n});let o=!1;try{const n={},i=new l.DescribeReportDefinitionsCommand(n),t=await e.send(i);return t.ReportDefinitions&&t.ReportDefinitions.length>0&&(o=!0),{isLegacyCurSetup:o}}catch(n){return console.error(`Error: ${n}`),o=!1,{isLegacyCurSetup:o}}finally{e.destroy()}})("us-east-1");console.dir(n,{depth:null,colors:!0}),d.appendFileSync(p,`\n  Is legacy CUR setup: ${n.isLegacyCurSetup}`),d.appendFileSync(p,"\n\n---------------------------------------------------------"),d.appendFileSync(p,"\n\nAWS ORGANIZATION POLICY TYPES\n");const o=await async function(n){const o=new e.OrganizationsClient({region:n});let i={scpEnabled:!1,tagPolicyEnabled:!1,backupPolicyEnabled:!1};try{const n={},t=new e.ListRootsCommand(n),a=await o.send(t);if(a.Roots&&a.Roots[0].PolicyTypes)for(const n of a.Roots[0].PolicyTypes)"SERVICE_CONTROL_POLICY"==n.Type&&"ENABLED"==n.Status&&(i.scpEnabled=!0),"TAG_POLICY"==n.Type&&"ENABLED"==n.Status&&(i.tagPolicyEnabled=!0),"BACKUP_POLICY"==n.Type&&"ENABLED"==n.Status&&(i.backupPolicyEnabled=!0)}catch(n){console.error(`An error occurred: ${n}`)}finally{return o.destroy(),i}}("us-east-1");console.dir(o,{depth:null,colors:!0}),d.appendFileSync(p,`\n  Service Control Policies (SCP) enabled: ${o.scpEnabled}`),d.appendFileSync(p,`\n  Tag Policies enabled: ${o.tagPolicyEnabled}`),d.appendFileSync(p,`\n  Backup Policies enabled: ${o.backupPolicyEnabled}`),d.appendFileSync(p,"\n\n---------------------------------------------------------"),d.appendFileSync(p,"\n\nAWS ORGANIZATION ENABLED SERVICES\n");const a=await async function(n){const o=[],i=new e.OrganizationsClient({region:n});try{const n=new e.ListAWSServiceAccessForOrganizationCommand({}),t=await i.send(n);if(t.EnabledServicePrincipals&&t.EnabledServicePrincipals.length>0){t.EnabledServicePrincipals;for(const n of t.EnabledServicePrincipals){const e={service:n.ServicePrincipal??""};o.push(e)}}}catch(n){console.error("Error checking service access:",n)}finally{return i.destroy(),o}}("us-east-1");console.dir(a,{depth:null,colors:!0}),d.appendFileSync(p,"\n  The following AWS Services are enabled within your AWS Organization:");for(const n of a)d.appendFileSync(p,`\n    ${n.service}`);d.appendFileSync(p,"\n\n---------------------------------------------------------"),d.appendFileSync(p,"\n\nAWS ORGANIZATION INTEGRATED SERVICE REGISTERED DELEGATED ADMINS\n");const s=await async function(){let n=[];const o=new e.OrganizationsClient({region:"us-east-1"});let i={};try{const t=new e.ListDelegatedAdministratorsCommand({}),a=await o.send(t);if(a.DelegatedAdministrators)for(const t of a.DelegatedAdministrators){const a={AccountId:t.Id},s=new e.ListDelegatedServicesForAccountCommand(a),c=await o.send(s);c.DelegatedServices&&(i={services:c.DelegatedServices,accountName:t.Name},n.push(i))}}catch(n){console.log("Error looking for delegated services.")}finally{o.destroy()}return n}();if(console.dir(s,{depth:null,colors:!0}),s&&s.length>0)for(const n of s){if(d.appendFileSync(p,`\n  Account: ${n.accountName}`),n.services&&n.services.length>0){d.appendFileSync(p,"\n  Delegated Services:");for(const e of n.services)d.appendFileSync(p,`\n    ${e.ServicePrincipal}`)}d.appendFileSync(p,"\n ")}else d.appendFileSync(p,"\n  No delegated admin accounts in AWS Organization");d.appendFileSync(p,"\n\n---------------------------------------------------------"),d.appendFileSync(p,"\n\nAWS ORGANIZATION CLOUDFORMATION\n");const c=await async function(n){let e={status:"disabled"};const o=new i.CloudFormationClient({region:n});try{const n={},t=new i.DescribeOrganizationsAccessCommand(n),a=await o.send(t);e.status=a.Status??"disabled"}catch(n){console.log(`Error: ${n}`)}finally{return o.destroy(),e}}(y);console.dir(c,{depth:null,colors:!0}),d.appendFileSync(p,`\n  AWS CloudFormation Organization stack sets status : ${c.status}`),d.appendFileSync(p,"\n\n---------------------------------------------------------"),d.appendFileSync(p,"\n\nAWS CONTROL TOWER\n");const u=await async function(n){let e={};const o=new r.ControlTowerClient({region:n});try{const n=new r.ListLandingZonesCommand({}),i=await o.send(n);if(console.log(JSON.stringify(i.landingZones,null,2)),i.landingZones&&i.landingZones.length>0){const n={landingZoneIdentifier:i.landingZones[0].arn},o=i.landingZones[0].arn?.toString().split(":")[3]??"";if(o){e.controlTowerRegion=o;const i=new r.ControlTowerClient({region:o}),t=new r.GetLandingZoneCommand(n),a=await i.send(t);a.landingZone&&(console.log(JSON.stringify(a.landingZone,null,2)),e.status=a.landingZone.status,e.latestAvailableVersion=a.landingZone.latestAvailableVersion,e.deployedVersion=a.landingZone.version,e.driftStatus=a.landingZone.driftStatus?.status)}}}catch(e){console.error(`Error checking Control Tower in ${n}:`,e)}finally{o.destroy()}return e}(y);u?(console.dir(u,{depth:null,colors:!0}),d.appendFileSync(p,`\n  Control Tower home region: ${u.controlTowerRegion}`),d.appendFileSync(p,`\n  Control Tower status: ${u.status}`),d.appendFileSync(p,`\n  Control Tower Landing Zone version: ${u.deployedVersion}`),d.appendFileSync(p,`\n  Latest available version: ${u.latestAvailableVersion}`),d.appendFileSync(p,`\n  Drift Status: ${u.driftStatus}`)):d.appendFileSync(p,"\n  AWS Control Tower is not deployed in the AWS Organization"),d.appendFileSync(p,"\n\n---------------------------------------------------------"),d.appendFileSync(p,"\n\nAWS IAM IDENTITY CENTER\n");const S=await async function(n){let e={found:!1};for(const o of n){const n=new t.SSOAdminClient({region:o});try{const i={MaxResults:Number("100")},a=new t.ListInstancesCommand(i),s=await n.send(a);if(s.Instances&&s.Instances.length>0){const n=s.Instances[0];e.found=!0,e.region=o,e.arn=n.InstanceArn,e.id=n.IdentityStoreId;break}}catch(n){console.log(`Error looking for AWS Identity Center details in region ${o}`)}finally{n.destroy()}}return e}(g);console.dir(S,{depth:null,colors:!0}),d.appendFileSync(p,`\n  IdC Region: ${S.region}`),d.appendFileSync(p,`\n  IdC ARN: ${S.arn}`),d.appendFileSync(p,`\n  IdC Instance Id: ${S.id}`),d.appendFileSync(p,"\n\n---------------------------------------------------------"),d.appendFileSync(p,"\n\nAWS ORGANIZATION DETAILS\n");const f=await async function(n){const o=new e.OrganizationsClient({region:n});let i={};try{const n=new e.DescribeOrganizationCommand({}),t=await o.send(n);t.Organization&&(i.id=t.Organization.Id??"",i.arn=t.Organization.Arn??"");const a=new e.ListRootsCommand({}),s=await o.send(a);s.Roots?i.rootOuId=s.Roots[0].Id:console.log("No info found for your AWS Organization.")}catch(n){console.error(`An error occurred: ${n}`)}finally{return o.destroy(),i}}("us-east-1");if(console.dir(f,{depth:null,colors:!0}),d.appendFileSync(p,`\n  AWS Organization Id: ${f.id}`),d.appendFileSync(p,`\n  AWS Organization ARN: ${f.arn}`),d.appendFileSync(p,`\n  AWS Organization Root OU Id: ${f.rootOuId}`),f.rootOuId){d.appendFileSync(p,"\n\n---------------------------------------------------------"),d.appendFileSync(p,"\n\nAWS ORGANIZATION TOP-LEVEL ORGANIZATION UNITS\n");const n=await async function(n,o){const i=new e.OrganizationsClient({region:n});let t=[];try{const n=new e.ListOrganizationalUnitsForParentCommand({ParentId:o}),a=await i.send(n);if(a.OrganizationalUnits)for(const n of a.OrganizationalUnits){let o={id:n.Id,name:n.Name};const a=await i.send(new e.ListAccountsForParentCommand({ParentId:n.Id}));a.Accounts&&a.Accounts.length>0&&(o.accounts=a.Accounts),t.push(o)}}catch(n){return console.error("Error checking service access:",n),[]}finally{i.destroy()}return t}("us-east-1",f.rootOuId);if(console.dir(n,{depth:null,colors:!0}),d.appendFileSync(p,"\n  List of Organization's top-level OUs and AWS accounts:"),n&&n.length>0)for(const e of n){if(d.appendFileSync(p,`\n    Organizational Unit: ${e.name}`),d.appendFileSync(p,`\n      Organizational Unit Id: ${e.id}`),e.accounts&&e.accounts.length>0){d.appendFileSync(p,"\n      AWS Accounts:");for(const n of e.accounts)d.appendFileSync(p,`\n        ${n.Name}`);d.appendFileSync(p,"\n")}else d.appendFileSync(p,"\n      AWS Accounts: None");d.appendFileSync(p,"\n")}else d.appendFileSync(p,"\n  No top level OUs found.")}d.appendFileSync(p,"\n\n---------------------------------------------------------"),d.appendFileSync(p,"\n\nAWS ORGANIZATION MEMBER ACCOUNTS\n");const A=await async function(){let n=[];const o=new e.OrganizationsClient({region:"us-east-1"});try{const i=await o.send(new e.ListAccountsCommand({}));if(i.Accounts&&i.Accounts.length>0)for(const e of i.Accounts){let o={accountName:e.Name,accountEmail:e.Email};n.push(o)}}catch(n){console.error("Error listing AWS accounts:",n)}finally{o.destroy()}return n}();if(console.dir(A,{depth:null,colors:!0}),A&&A.length>0)for(const n of A)d.appendFileSync(p,`\n  Account: ${n.accountName}`),d.appendFileSync(p,`\n  Account Email: ${n.accountEmail}\n`);else d.appendFileSync(p,"No member accounts found which is amazing as this is running from one.")}else if(S.isInOrganization&&!S.isManagementAccount){const n="\nWARNING: You are running Pathfinder from an account that is a member of your AWS Organization. Please run the solution from your AWS Management account.";console.warn(n),d.appendFileSync(p,n)}else{const n="\nWARNING: You are running Pathfinder from an account that not part of an AWS Organization. This account will be treated as a standalone account.";console.warn(n),d.appendFileSync(p,n)}d.appendFileSync(p,"\n\n\n---------------------------------------------------------"),d.appendFileSync(p,"\n---------------------------------------------------------"),d.appendFileSync(p,"\nAWS MANAGEMENT ACCOUNT CHECKS"),d.appendFileSync(p,"\n---------------------------------------------------------"),d.appendFileSync(p,"\n---------------------------------------------------------\n");const f=await(async()=>{const n=new o.IAMClient({region:"us-east-1"}),e=[];try{const i=new o.ListUsersCommand({}),t=await n.send(i);for(const i of t.Users||[]){const t=i.UserName||"",a=new o.ListAccessKeysCommand({UserName:t}),s=(await n.send(a)).AccessKeyMetadata||[];if(s.length>0)for(const i of s){const a=i.AccessKeyId||"",s=new o.GetAccessKeyLastUsedCommand({AccessKeyId:a}),c=await n.send(s),r={userName:t,accessKeyId:a,lastUsed:c&&c.AccessKeyLastUsed&&`${c.AccessKeyLastUsed.LastUsedDate}`||"Not available"};e.push(r)}else{const n={userName:t};e.push(n)}}}catch(n){console.error("Error:",n)}finally{n.destroy()}return e})();if(d.appendFileSync(p,"\n\nIAM USERS CHECK\n"),f&&f.length>0){console.dir(f,{depth:null,colors:!0});for(const n of f)d.appendFileSync(p,`\n  IAM User: ${n.userName}`),n.accessKeyId&&d.appendFileSync(p,`\n    User API Key ID: ${n.accessKeyId}`),d.appendFileSync(p,"\n")}else d.appendFileSync(p,"\n  No IAM Users found.");d.appendFileSync(p,"\n\n---------------------------------------------------------");const A=await async function(n){let e=[];for(const o of n){const n=new a.EC2Client({region:o}),i=new a.DescribeInstancesCommand({});try{const t=await n.send(i);if(t.Reservations)if(t.Reservations.length>0){const n={region:o,ec2Found:!0};e.push(n)}else{const n={region:o,ec2Found:!1};e.push(n)}else{const n={region:o,ec2Found:!1};e.push(n)}}catch(n){console.log(`Error checking instance: ${n}`)}finally{n.destroy()}}return e}(g);if(d.appendFileSync(p,"\n\nEC2 INSTANCE CHECK\n"),A&&A.find((n=>!0===n.ec2Found))){console.dir(A,{depth:null,colors:!0});for(const n of A)n.ec2Found&&d.appendFileSync(p,`\n  ${n.region} - found EC2 Instance(s).`)}else d.appendFileSync(p,"\n  No EC2 instances found.");d.appendFileSync(p,"\n\n---------------------------------------------------------");const C=await async function(n){let e=[];for(const o of n){const n=new a.EC2Client({region:o}),i=new a.DescribeVpcsCommand({});try{const t=await n.send(i);if(t.Vpcs)if(t.Vpcs.length>0){const n={region:o,vpcFound:!0};e.push(n)}else{const n={region:o,vpcFound:!1};e.push(n)}else{const n={region:o,vpcFound:!1};e.push(n)}}catch(n){console.log(`Error checking instance: ${n}`)}finally{n.destroy()}}return e}(g);if(d.appendFileSync(p,"\n\nVPC CHECK\n"),C&&C.length>0){console.dir(C,{depth:null,colors:!0});for(const n of C)n.vpcFound&&d.appendFileSync(p,`\n  ${n.region} - found VPC(s).`)}else d.appendFileSync(p,"\n  No VPCs found.");d.appendFileSync(p,"\n\n---------------------------------------------------------");const F=await async function(n){let e=[];for(const o of n){const n=new s.CloudTrailClient({region:o}),i=new s.DescribeTrailsCommand({});try{const t=await n.send(i);if(t.trailList)for(const n of t.trailList){let i={};i=n.HomeRegion==o?{region:o,trailFound:!0,isOrgTrail:n.IsMultiRegionTrail,isMultiRegion:n.IsMultiRegionTrail}:{region:o,trailFound:!1},e.push(i)}}catch(n){console.log(`Error checking instance: ${n}`)}finally{n.destroy()}}return e}(g);if(d.appendFileSync(p,"\n\nCLOUDTRAIL CHECK\n"),F&&F.length>0){console.dir(F,{depth:null,colors:!0});for(const n of F)n.trailFound&&(d.appendFileSync(p,`\n  CloudTrail found in ${n.region}`),d.appendFileSync(p,`\n    Is Organization Trail: ${n.isOrgTrail}`),d.appendFileSync(p,`\n    Is MultiRegion: ${n.isMultiRegion}`),d.appendFileSync(p,"\n"))}else d.appendFileSync(p,"\n  No AWS CloudTrail resource discovered");d.appendFileSync(p,"\n"),d.appendFileSync(p,"\n\n---------------------------------------------------------");const w=await async function(n){let e=[];for(const o of n){const n=new c.ConfigServiceClient({region:o});let i={region:o,configRecorderFound:!1,configDeliveryChannelFound:!1};try{const o=await n.send(new c.DescribeConfigurationRecorderStatusCommand({}));0!==o.ConfigurationRecordersStatus?.length&&(i.configRecorderFound=!0);const t=await n.send(new c.DescribeDeliveryChannelsCommand({}));0!==t.DeliveryChannels?.length&&(i.configDeliveryChannelFound=!0),e.push(i)}catch(n){console.error(`Error checking AWS Config in ${o}:`,n)}finally{n.destroy()}}return e}(g);if(d.appendFileSync(p,"\n\nAWS CONFIG CHECK\n"),w&&w.find((n=>!0===n.configRecorderFound))){console.dir(w,{depth:null,colors:!0});for(const n of w)n.configRecorderFound&&d.appendFileSync(p,`\n  ${n.region} - Config Recorder found`),n.configDeliveryChannelFound&&d.appendFileSync(p,`\n  ${n.region} - Config Delivery Channel found`)}else d.appendFileSync(p,"\n  No AWS Config resource discovered");d.appendFileSync(p,"\n\n\n  END ASSESSMENT")})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,